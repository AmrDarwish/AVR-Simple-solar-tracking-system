
0026_HLDR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00002dee  00002e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000213c  00000000  00000000  00002f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001612  00000000  00000000  000050c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000200  00000000  00000000  000066d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000257  00000000  00000000  000068d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028a2  00000000  00000000  00006b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000165a  00000000  00000000  000093cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014c9  00000000  00000000  0000aa29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  0000bef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000361  00000000  00000000  0000c114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba6  00000000  00000000  0000c475  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d01b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <main>
      7a:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 95 04 	call	0x92a	; 0x92a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__subsf3>
      ae:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <__fixunssfdi>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__prologue_saves__>
      e6:	7b 01       	movw	r14, r22
      e8:	8c 01       	movw	r16, r24
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	40 e8       	ldi	r20, 0x80	; 128
      f0:	5f e3       	ldi	r21, 0x3F	; 63
      f2:	0e 94 c5 04 	call	0x98a	; 0x98a <__ltsf2>
      f6:	88 23       	and	r24, r24
      f8:	4c f4       	brge	.+18     	; 0x10c <__fixunssfdi+0x32>
      fa:	aa 24       	eor	r10, r10
      fc:	bb 24       	eor	r11, r11
      fe:	cc 24       	eor	r12, r12
     100:	dd 24       	eor	r13, r13
     102:	ee 24       	eor	r14, r14
     104:	ff 24       	eor	r15, r15
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	10 e0       	ldi	r17, 0x00	; 0
     10a:	86 c0       	rjmp	.+268    	; 0x218 <__fixunssfdi+0x13e>
     10c:	c8 01       	movw	r24, r16
     10e:	b7 01       	movw	r22, r14
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	40 e8       	ldi	r20, 0x80	; 128
     116:	5f e4       	ldi	r21, 0x4F	; 79
     118:	0e 94 c5 04 	call	0x98a	; 0x98a <__ltsf2>
     11c:	88 23       	and	r24, r24
     11e:	54 f4       	brge	.+20     	; 0x134 <__fixunssfdi+0x5a>
     120:	c8 01       	movw	r24, r16
     122:	b7 01       	movw	r22, r14
     124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     128:	5b 01       	movw	r10, r22
     12a:	6c 01       	movw	r12, r24
     12c:	ee 24       	eor	r14, r14
     12e:	ff 24       	eor	r15, r15
     130:	87 01       	movw	r16, r14
     132:	72 c0       	rjmp	.+228    	; 0x218 <__fixunssfdi+0x13e>
     134:	c8 01       	movw	r24, r16
     136:	b7 01       	movw	r22, r14
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	40 e8       	ldi	r20, 0x80	; 128
     13e:	5f e5       	ldi	r21, 0x5F	; 95
     140:	0e 94 c5 04 	call	0x98a	; 0x98a <__ltsf2>
     144:	87 fd       	sbrc	r24, 7
     146:	0f c0       	rjmp	.+30     	; 0x166 <__fixunssfdi+0x8c>
     148:	aa 24       	eor	r10, r10
     14a:	aa 94       	dec	r10
     14c:	bb 24       	eor	r11, r11
     14e:	ba 94       	dec	r11
     150:	cc 24       	eor	r12, r12
     152:	ca 94       	dec	r12
     154:	dd 24       	eor	r13, r13
     156:	da 94       	dec	r13
     158:	ee 24       	eor	r14, r14
     15a:	ea 94       	dec	r14
     15c:	ff 24       	eor	r15, r15
     15e:	fa 94       	dec	r15
     160:	0f ef       	ldi	r16, 0xFF	; 255
     162:	1f ef       	ldi	r17, 0xFF	; 255
     164:	59 c0       	rjmp	.+178    	; 0x218 <__fixunssfdi+0x13e>
     166:	c8 01       	movw	r24, r16
     168:	b7 01       	movw	r22, r14
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e8       	ldi	r20, 0x80	; 128
     170:	5f e2       	ldi	r21, 0x2F	; 47
     172:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
     176:	7b 01       	movw	r14, r22
     178:	8c 01       	movw	r16, r24
     17a:	22 24       	eor	r2, r2
     17c:	33 24       	eor	r3, r3
     17e:	21 01       	movw	r4, r2
     180:	90 e1       	ldi	r25, 0x10	; 16
     182:	a9 2e       	mov	r10, r25
     184:	b1 2c       	mov	r11, r1
     186:	c1 2c       	mov	r12, r1
     188:	d1 2c       	mov	r13, r1
     18a:	c0 e0       	ldi	r28, 0x00	; 0
     18c:	d0 e0       	ldi	r29, 0x00	; 0
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0a 2c       	mov	r0, r10
     198:	04 c0       	rjmp	.+8      	; 0x1a2 <__fixunssfdi+0xc8>
     19a:	66 0f       	add	r22, r22
     19c:	77 1f       	adc	r23, r23
     19e:	88 1f       	adc	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	0a 94       	dec	r0
     1a4:	d2 f7       	brpl	.-12     	; 0x19a <__fixunssfdi+0xc0>
     1a6:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__floatunsisf>
     1aa:	3b 01       	movw	r6, r22
     1ac:	4c 01       	movw	r8, r24
     1ae:	c8 01       	movw	r24, r16
     1b0:	b7 01       	movw	r22, r14
     1b2:	a4 01       	movw	r20, r8
     1b4:	93 01       	movw	r18, r6
     1b6:	0e 94 95 04 	call	0x92a	; 0x92a <__gesf2>
     1ba:	88 23       	and	r24, r24
     1bc:	64 f0       	brlt	.+24     	; 0x1d6 <__fixunssfdi+0xfc>
     1be:	2a 28       	or	r2, r10
     1c0:	3b 28       	or	r3, r11
     1c2:	4c 28       	or	r4, r12
     1c4:	5d 28       	or	r5, r13
     1c6:	c8 01       	movw	r24, r16
     1c8:	b7 01       	movw	r22, r14
     1ca:	a4 01       	movw	r20, r8
     1cc:	93 01       	movw	r18, r6
     1ce:	0e 94 b9 03 	call	0x772	; 0x772 <__divsf3>
     1d2:	7b 01       	movw	r14, r22
     1d4:	8c 01       	movw	r16, r24
     1d6:	d6 94       	lsr	r13
     1d8:	c7 94       	ror	r12
     1da:	b7 94       	ror	r11
     1dc:	a7 94       	ror	r10
     1de:	21 96       	adiw	r28, 0x01	; 1
     1e0:	c5 30       	cpi	r28, 0x05	; 5
     1e2:	d1 05       	cpc	r29, r1
     1e4:	a1 f6       	brne	.-88     	; 0x18e <__fixunssfdi+0xb4>
     1e6:	c8 01       	movw	r24, r16
     1e8:	b7 01       	movw	r22, r14
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	40 e8       	ldi	r20, 0x80	; 128
     1f0:	5f e4       	ldi	r21, 0x4F	; 79
     1f2:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
     1f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     1fa:	5b 01       	movw	r10, r22
     1fc:	6c 01       	movw	r12, r24
     1fe:	9b 01       	movw	r18, r22
     200:	a6 01       	movw	r20, r12
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	02 2d       	mov	r16, r2
     20c:	0e 94 20 06 	call	0xc40	; 0xc40 <__ashldi3>
     210:	59 01       	movw	r10, r18
     212:	6a 01       	movw	r12, r20
     214:	7b 01       	movw	r14, r22
     216:	8c 01       	movw	r16, r24
     218:	95 01       	movw	r18, r10
     21a:	a6 01       	movw	r20, r12
     21c:	b7 01       	movw	r22, r14
     21e:	c8 01       	movw	r24, r16
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
     224:	e2 e1       	ldi	r30, 0x12	; 18
     226:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__epilogue_restores__>

0000022a <_fpadd_parts>:
     22a:	a0 e0       	ldi	r26, 0x00	; 0
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	eb e1       	ldi	r30, 0x1B	; 27
     230:	f1 e0       	ldi	r31, 0x01	; 1
     232:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__prologue_saves__>
     236:	dc 01       	movw	r26, r24
     238:	2b 01       	movw	r4, r22
     23a:	fa 01       	movw	r30, r20
     23c:	9c 91       	ld	r25, X
     23e:	92 30       	cpi	r25, 0x02	; 2
     240:	08 f4       	brcc	.+2      	; 0x244 <_fpadd_parts+0x1a>
     242:	39 c1       	rjmp	.+626    	; 0x4b6 <_fpadd_parts+0x28c>
     244:	eb 01       	movw	r28, r22
     246:	88 81       	ld	r24, Y
     248:	82 30       	cpi	r24, 0x02	; 2
     24a:	08 f4       	brcc	.+2      	; 0x24e <_fpadd_parts+0x24>
     24c:	33 c1       	rjmp	.+614    	; 0x4b4 <_fpadd_parts+0x28a>
     24e:	94 30       	cpi	r25, 0x04	; 4
     250:	69 f4       	brne	.+26     	; 0x26c <_fpadd_parts+0x42>
     252:	84 30       	cpi	r24, 0x04	; 4
     254:	09 f0       	breq	.+2      	; 0x258 <_fpadd_parts+0x2e>
     256:	2f c1       	rjmp	.+606    	; 0x4b6 <_fpadd_parts+0x28c>
     258:	11 96       	adiw	r26, 0x01	; 1
     25a:	9c 91       	ld	r25, X
     25c:	11 97       	sbiw	r26, 0x01	; 1
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	98 17       	cp	r25, r24
     262:	09 f4       	brne	.+2      	; 0x266 <_fpadd_parts+0x3c>
     264:	28 c1       	rjmp	.+592    	; 0x4b6 <_fpadd_parts+0x28c>
     266:	ab e7       	ldi	r26, 0x7B	; 123
     268:	b0 e0       	ldi	r27, 0x00	; 0
     26a:	25 c1       	rjmp	.+586    	; 0x4b6 <_fpadd_parts+0x28c>
     26c:	84 30       	cpi	r24, 0x04	; 4
     26e:	09 f4       	brne	.+2      	; 0x272 <_fpadd_parts+0x48>
     270:	21 c1       	rjmp	.+578    	; 0x4b4 <_fpadd_parts+0x28a>
     272:	82 30       	cpi	r24, 0x02	; 2
     274:	a9 f4       	brne	.+42     	; 0x2a0 <_fpadd_parts+0x76>
     276:	92 30       	cpi	r25, 0x02	; 2
     278:	09 f0       	breq	.+2      	; 0x27c <_fpadd_parts+0x52>
     27a:	1d c1       	rjmp	.+570    	; 0x4b6 <_fpadd_parts+0x28c>
     27c:	9a 01       	movw	r18, r20
     27e:	ad 01       	movw	r20, r26
     280:	88 e0       	ldi	r24, 0x08	; 8
     282:	ea 01       	movw	r28, r20
     284:	09 90       	ld	r0, Y+
     286:	ae 01       	movw	r20, r28
     288:	e9 01       	movw	r28, r18
     28a:	09 92       	st	Y+, r0
     28c:	9e 01       	movw	r18, r28
     28e:	81 50       	subi	r24, 0x01	; 1
     290:	c1 f7       	brne	.-16     	; 0x282 <_fpadd_parts+0x58>
     292:	e2 01       	movw	r28, r4
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	11 96       	adiw	r26, 0x01	; 1
     298:	9c 91       	ld	r25, X
     29a:	89 23       	and	r24, r25
     29c:	81 83       	std	Z+1, r24	; 0x01
     29e:	08 c1       	rjmp	.+528    	; 0x4b0 <_fpadd_parts+0x286>
     2a0:	92 30       	cpi	r25, 0x02	; 2
     2a2:	09 f4       	brne	.+2      	; 0x2a6 <_fpadd_parts+0x7c>
     2a4:	07 c1       	rjmp	.+526    	; 0x4b4 <_fpadd_parts+0x28a>
     2a6:	12 96       	adiw	r26, 0x02	; 2
     2a8:	2d 90       	ld	r2, X+
     2aa:	3c 90       	ld	r3, X
     2ac:	13 97       	sbiw	r26, 0x03	; 3
     2ae:	eb 01       	movw	r28, r22
     2b0:	8a 81       	ldd	r24, Y+2	; 0x02
     2b2:	9b 81       	ldd	r25, Y+3	; 0x03
     2b4:	14 96       	adiw	r26, 0x04	; 4
     2b6:	ad 90       	ld	r10, X+
     2b8:	bd 90       	ld	r11, X+
     2ba:	cd 90       	ld	r12, X+
     2bc:	dc 90       	ld	r13, X
     2be:	17 97       	sbiw	r26, 0x07	; 7
     2c0:	ec 80       	ldd	r14, Y+4	; 0x04
     2c2:	fd 80       	ldd	r15, Y+5	; 0x05
     2c4:	0e 81       	ldd	r16, Y+6	; 0x06
     2c6:	1f 81       	ldd	r17, Y+7	; 0x07
     2c8:	91 01       	movw	r18, r2
     2ca:	28 1b       	sub	r18, r24
     2cc:	39 0b       	sbc	r19, r25
     2ce:	b9 01       	movw	r22, r18
     2d0:	37 ff       	sbrs	r19, 7
     2d2:	04 c0       	rjmp	.+8      	; 0x2dc <_fpadd_parts+0xb2>
     2d4:	66 27       	eor	r22, r22
     2d6:	77 27       	eor	r23, r23
     2d8:	62 1b       	sub	r22, r18
     2da:	73 0b       	sbc	r23, r19
     2dc:	60 32       	cpi	r22, 0x20	; 32
     2de:	71 05       	cpc	r23, r1
     2e0:	0c f0       	brlt	.+2      	; 0x2e4 <_fpadd_parts+0xba>
     2e2:	61 c0       	rjmp	.+194    	; 0x3a6 <_fpadd_parts+0x17c>
     2e4:	12 16       	cp	r1, r18
     2e6:	13 06       	cpc	r1, r19
     2e8:	6c f5       	brge	.+90     	; 0x344 <_fpadd_parts+0x11a>
     2ea:	37 01       	movw	r6, r14
     2ec:	48 01       	movw	r8, r16
     2ee:	06 2e       	mov	r0, r22
     2f0:	04 c0       	rjmp	.+8      	; 0x2fa <_fpadd_parts+0xd0>
     2f2:	96 94       	lsr	r9
     2f4:	87 94       	ror	r8
     2f6:	77 94       	ror	r7
     2f8:	67 94       	ror	r6
     2fa:	0a 94       	dec	r0
     2fc:	d2 f7       	brpl	.-12     	; 0x2f2 <_fpadd_parts+0xc8>
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e0       	ldi	r20, 0x00	; 0
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	04 c0       	rjmp	.+8      	; 0x310 <_fpadd_parts+0xe6>
     308:	22 0f       	add	r18, r18
     30a:	33 1f       	adc	r19, r19
     30c:	44 1f       	adc	r20, r20
     30e:	55 1f       	adc	r21, r21
     310:	6a 95       	dec	r22
     312:	d2 f7       	brpl	.-12     	; 0x308 <_fpadd_parts+0xde>
     314:	21 50       	subi	r18, 0x01	; 1
     316:	30 40       	sbci	r19, 0x00	; 0
     318:	40 40       	sbci	r20, 0x00	; 0
     31a:	50 40       	sbci	r21, 0x00	; 0
     31c:	2e 21       	and	r18, r14
     31e:	3f 21       	and	r19, r15
     320:	40 23       	and	r20, r16
     322:	51 23       	and	r21, r17
     324:	21 15       	cp	r18, r1
     326:	31 05       	cpc	r19, r1
     328:	41 05       	cpc	r20, r1
     32a:	51 05       	cpc	r21, r1
     32c:	21 f0       	breq	.+8      	; 0x336 <_fpadd_parts+0x10c>
     32e:	21 e0       	ldi	r18, 0x01	; 1
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	50 e0       	ldi	r21, 0x00	; 0
     336:	79 01       	movw	r14, r18
     338:	8a 01       	movw	r16, r20
     33a:	e6 28       	or	r14, r6
     33c:	f7 28       	or	r15, r7
     33e:	08 29       	or	r16, r8
     340:	19 29       	or	r17, r9
     342:	3c c0       	rjmp	.+120    	; 0x3bc <_fpadd_parts+0x192>
     344:	23 2b       	or	r18, r19
     346:	d1 f1       	breq	.+116    	; 0x3bc <_fpadd_parts+0x192>
     348:	26 0e       	add	r2, r22
     34a:	37 1e       	adc	r3, r23
     34c:	35 01       	movw	r6, r10
     34e:	46 01       	movw	r8, r12
     350:	06 2e       	mov	r0, r22
     352:	04 c0       	rjmp	.+8      	; 0x35c <_fpadd_parts+0x132>
     354:	96 94       	lsr	r9
     356:	87 94       	ror	r8
     358:	77 94       	ror	r7
     35a:	67 94       	ror	r6
     35c:	0a 94       	dec	r0
     35e:	d2 f7       	brpl	.-12     	; 0x354 <_fpadd_parts+0x12a>
     360:	21 e0       	ldi	r18, 0x01	; 1
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	40 e0       	ldi	r20, 0x00	; 0
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	04 c0       	rjmp	.+8      	; 0x372 <_fpadd_parts+0x148>
     36a:	22 0f       	add	r18, r18
     36c:	33 1f       	adc	r19, r19
     36e:	44 1f       	adc	r20, r20
     370:	55 1f       	adc	r21, r21
     372:	6a 95       	dec	r22
     374:	d2 f7       	brpl	.-12     	; 0x36a <_fpadd_parts+0x140>
     376:	21 50       	subi	r18, 0x01	; 1
     378:	30 40       	sbci	r19, 0x00	; 0
     37a:	40 40       	sbci	r20, 0x00	; 0
     37c:	50 40       	sbci	r21, 0x00	; 0
     37e:	2a 21       	and	r18, r10
     380:	3b 21       	and	r19, r11
     382:	4c 21       	and	r20, r12
     384:	5d 21       	and	r21, r13
     386:	21 15       	cp	r18, r1
     388:	31 05       	cpc	r19, r1
     38a:	41 05       	cpc	r20, r1
     38c:	51 05       	cpc	r21, r1
     38e:	21 f0       	breq	.+8      	; 0x398 <_fpadd_parts+0x16e>
     390:	21 e0       	ldi	r18, 0x01	; 1
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	59 01       	movw	r10, r18
     39a:	6a 01       	movw	r12, r20
     39c:	a6 28       	or	r10, r6
     39e:	b7 28       	or	r11, r7
     3a0:	c8 28       	or	r12, r8
     3a2:	d9 28       	or	r13, r9
     3a4:	0b c0       	rjmp	.+22     	; 0x3bc <_fpadd_parts+0x192>
     3a6:	82 15       	cp	r24, r2
     3a8:	93 05       	cpc	r25, r3
     3aa:	2c f0       	brlt	.+10     	; 0x3b6 <_fpadd_parts+0x18c>
     3ac:	1c 01       	movw	r2, r24
     3ae:	aa 24       	eor	r10, r10
     3b0:	bb 24       	eor	r11, r11
     3b2:	65 01       	movw	r12, r10
     3b4:	03 c0       	rjmp	.+6      	; 0x3bc <_fpadd_parts+0x192>
     3b6:	ee 24       	eor	r14, r14
     3b8:	ff 24       	eor	r15, r15
     3ba:	87 01       	movw	r16, r14
     3bc:	11 96       	adiw	r26, 0x01	; 1
     3be:	9c 91       	ld	r25, X
     3c0:	d2 01       	movw	r26, r4
     3c2:	11 96       	adiw	r26, 0x01	; 1
     3c4:	8c 91       	ld	r24, X
     3c6:	98 17       	cp	r25, r24
     3c8:	09 f4       	brne	.+2      	; 0x3cc <_fpadd_parts+0x1a2>
     3ca:	45 c0       	rjmp	.+138    	; 0x456 <_fpadd_parts+0x22c>
     3cc:	99 23       	and	r25, r25
     3ce:	39 f0       	breq	.+14     	; 0x3de <_fpadd_parts+0x1b4>
     3d0:	a8 01       	movw	r20, r16
     3d2:	97 01       	movw	r18, r14
     3d4:	2a 19       	sub	r18, r10
     3d6:	3b 09       	sbc	r19, r11
     3d8:	4c 09       	sbc	r20, r12
     3da:	5d 09       	sbc	r21, r13
     3dc:	06 c0       	rjmp	.+12     	; 0x3ea <_fpadd_parts+0x1c0>
     3de:	a6 01       	movw	r20, r12
     3e0:	95 01       	movw	r18, r10
     3e2:	2e 19       	sub	r18, r14
     3e4:	3f 09       	sbc	r19, r15
     3e6:	40 0b       	sbc	r20, r16
     3e8:	51 0b       	sbc	r21, r17
     3ea:	57 fd       	sbrc	r21, 7
     3ec:	08 c0       	rjmp	.+16     	; 0x3fe <_fpadd_parts+0x1d4>
     3ee:	11 82       	std	Z+1, r1	; 0x01
     3f0:	33 82       	std	Z+3, r3	; 0x03
     3f2:	22 82       	std	Z+2, r2	; 0x02
     3f4:	24 83       	std	Z+4, r18	; 0x04
     3f6:	35 83       	std	Z+5, r19	; 0x05
     3f8:	46 83       	std	Z+6, r20	; 0x06
     3fa:	57 83       	std	Z+7, r21	; 0x07
     3fc:	1d c0       	rjmp	.+58     	; 0x438 <_fpadd_parts+0x20e>
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	81 83       	std	Z+1, r24	; 0x01
     402:	33 82       	std	Z+3, r3	; 0x03
     404:	22 82       	std	Z+2, r2	; 0x02
     406:	88 27       	eor	r24, r24
     408:	99 27       	eor	r25, r25
     40a:	dc 01       	movw	r26, r24
     40c:	82 1b       	sub	r24, r18
     40e:	93 0b       	sbc	r25, r19
     410:	a4 0b       	sbc	r26, r20
     412:	b5 0b       	sbc	r27, r21
     414:	84 83       	std	Z+4, r24	; 0x04
     416:	95 83       	std	Z+5, r25	; 0x05
     418:	a6 83       	std	Z+6, r26	; 0x06
     41a:	b7 83       	std	Z+7, r27	; 0x07
     41c:	0d c0       	rjmp	.+26     	; 0x438 <_fpadd_parts+0x20e>
     41e:	22 0f       	add	r18, r18
     420:	33 1f       	adc	r19, r19
     422:	44 1f       	adc	r20, r20
     424:	55 1f       	adc	r21, r21
     426:	24 83       	std	Z+4, r18	; 0x04
     428:	35 83       	std	Z+5, r19	; 0x05
     42a:	46 83       	std	Z+6, r20	; 0x06
     42c:	57 83       	std	Z+7, r21	; 0x07
     42e:	82 81       	ldd	r24, Z+2	; 0x02
     430:	93 81       	ldd	r25, Z+3	; 0x03
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	93 83       	std	Z+3, r25	; 0x03
     436:	82 83       	std	Z+2, r24	; 0x02
     438:	24 81       	ldd	r18, Z+4	; 0x04
     43a:	35 81       	ldd	r19, Z+5	; 0x05
     43c:	46 81       	ldd	r20, Z+6	; 0x06
     43e:	57 81       	ldd	r21, Z+7	; 0x07
     440:	da 01       	movw	r26, r20
     442:	c9 01       	movw	r24, r18
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	a1 09       	sbc	r26, r1
     448:	b1 09       	sbc	r27, r1
     44a:	8f 5f       	subi	r24, 0xFF	; 255
     44c:	9f 4f       	sbci	r25, 0xFF	; 255
     44e:	af 4f       	sbci	r26, 0xFF	; 255
     450:	bf 43       	sbci	r27, 0x3F	; 63
     452:	28 f3       	brcs	.-54     	; 0x41e <_fpadd_parts+0x1f4>
     454:	0b c0       	rjmp	.+22     	; 0x46c <_fpadd_parts+0x242>
     456:	91 83       	std	Z+1, r25	; 0x01
     458:	33 82       	std	Z+3, r3	; 0x03
     45a:	22 82       	std	Z+2, r2	; 0x02
     45c:	ea 0c       	add	r14, r10
     45e:	fb 1c       	adc	r15, r11
     460:	0c 1d       	adc	r16, r12
     462:	1d 1d       	adc	r17, r13
     464:	e4 82       	std	Z+4, r14	; 0x04
     466:	f5 82       	std	Z+5, r15	; 0x05
     468:	06 83       	std	Z+6, r16	; 0x06
     46a:	17 83       	std	Z+7, r17	; 0x07
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	80 83       	st	Z, r24
     470:	24 81       	ldd	r18, Z+4	; 0x04
     472:	35 81       	ldd	r19, Z+5	; 0x05
     474:	46 81       	ldd	r20, Z+6	; 0x06
     476:	57 81       	ldd	r21, Z+7	; 0x07
     478:	57 ff       	sbrs	r21, 7
     47a:	1a c0       	rjmp	.+52     	; 0x4b0 <_fpadd_parts+0x286>
     47c:	c9 01       	movw	r24, r18
     47e:	aa 27       	eor	r26, r26
     480:	97 fd       	sbrc	r25, 7
     482:	a0 95       	com	r26
     484:	ba 2f       	mov	r27, r26
     486:	81 70       	andi	r24, 0x01	; 1
     488:	90 70       	andi	r25, 0x00	; 0
     48a:	a0 70       	andi	r26, 0x00	; 0
     48c:	b0 70       	andi	r27, 0x00	; 0
     48e:	56 95       	lsr	r21
     490:	47 95       	ror	r20
     492:	37 95       	ror	r19
     494:	27 95       	ror	r18
     496:	82 2b       	or	r24, r18
     498:	93 2b       	or	r25, r19
     49a:	a4 2b       	or	r26, r20
     49c:	b5 2b       	or	r27, r21
     49e:	84 83       	std	Z+4, r24	; 0x04
     4a0:	95 83       	std	Z+5, r25	; 0x05
     4a2:	a6 83       	std	Z+6, r26	; 0x06
     4a4:	b7 83       	std	Z+7, r27	; 0x07
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	93 81       	ldd	r25, Z+3	; 0x03
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	93 83       	std	Z+3, r25	; 0x03
     4ae:	82 83       	std	Z+2, r24	; 0x02
     4b0:	df 01       	movw	r26, r30
     4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <_fpadd_parts+0x28c>
     4b4:	d2 01       	movw	r26, r4
     4b6:	cd 01       	movw	r24, r26
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	e2 e1       	ldi	r30, 0x12	; 18
     4be:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__epilogue_restores__>

000004c2 <__subsf3>:
     4c2:	a0 e2       	ldi	r26, 0x20	; 32
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
     4c6:	e7 e6       	ldi	r30, 0x67	; 103
     4c8:	f2 e0       	ldi	r31, 0x02	; 2
     4ca:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x18>
     4ce:	69 83       	std	Y+1, r22	; 0x01
     4d0:	7a 83       	std	Y+2, r23	; 0x02
     4d2:	8b 83       	std	Y+3, r24	; 0x03
     4d4:	9c 83       	std	Y+4, r25	; 0x04
     4d6:	2d 83       	std	Y+5, r18	; 0x05
     4d8:	3e 83       	std	Y+6, r19	; 0x06
     4da:	4f 83       	std	Y+7, r20	; 0x07
     4dc:	58 87       	std	Y+8, r21	; 0x08
     4de:	e9 e0       	ldi	r30, 0x09	; 9
     4e0:	ee 2e       	mov	r14, r30
     4e2:	f1 2c       	mov	r15, r1
     4e4:	ec 0e       	add	r14, r28
     4e6:	fd 1e       	adc	r15, r29
     4e8:	ce 01       	movw	r24, r28
     4ea:	01 96       	adiw	r24, 0x01	; 1
     4ec:	b7 01       	movw	r22, r14
     4ee:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     4f2:	8e 01       	movw	r16, r28
     4f4:	0f 5e       	subi	r16, 0xEF	; 239
     4f6:	1f 4f       	sbci	r17, 0xFF	; 255
     4f8:	ce 01       	movw	r24, r28
     4fa:	05 96       	adiw	r24, 0x05	; 5
     4fc:	b8 01       	movw	r22, r16
     4fe:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     502:	8a 89       	ldd	r24, Y+18	; 0x12
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	89 27       	eor	r24, r25
     508:	8a 8b       	std	Y+18, r24	; 0x12
     50a:	c7 01       	movw	r24, r14
     50c:	b8 01       	movw	r22, r16
     50e:	ae 01       	movw	r20, r28
     510:	47 5e       	subi	r20, 0xE7	; 231
     512:	5f 4f       	sbci	r21, 0xFF	; 255
     514:	0e 94 15 01 	call	0x22a	; 0x22a <_fpadd_parts>
     518:	0e 94 ee 06 	call	0xddc	; 0xddc <__pack_f>
     51c:	a0 96       	adiw	r28, 0x20	; 32
     51e:	e6 e0       	ldi	r30, 0x06	; 6
     520:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x18>

00000524 <__addsf3>:
     524:	a0 e2       	ldi	r26, 0x20	; 32
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	e8 e9       	ldi	r30, 0x98	; 152
     52a:	f2 e0       	ldi	r31, 0x02	; 2
     52c:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x18>
     530:	69 83       	std	Y+1, r22	; 0x01
     532:	7a 83       	std	Y+2, r23	; 0x02
     534:	8b 83       	std	Y+3, r24	; 0x03
     536:	9c 83       	std	Y+4, r25	; 0x04
     538:	2d 83       	std	Y+5, r18	; 0x05
     53a:	3e 83       	std	Y+6, r19	; 0x06
     53c:	4f 83       	std	Y+7, r20	; 0x07
     53e:	58 87       	std	Y+8, r21	; 0x08
     540:	f9 e0       	ldi	r31, 0x09	; 9
     542:	ef 2e       	mov	r14, r31
     544:	f1 2c       	mov	r15, r1
     546:	ec 0e       	add	r14, r28
     548:	fd 1e       	adc	r15, r29
     54a:	ce 01       	movw	r24, r28
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	b7 01       	movw	r22, r14
     550:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     554:	8e 01       	movw	r16, r28
     556:	0f 5e       	subi	r16, 0xEF	; 239
     558:	1f 4f       	sbci	r17, 0xFF	; 255
     55a:	ce 01       	movw	r24, r28
     55c:	05 96       	adiw	r24, 0x05	; 5
     55e:	b8 01       	movw	r22, r16
     560:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     564:	c7 01       	movw	r24, r14
     566:	b8 01       	movw	r22, r16
     568:	ae 01       	movw	r20, r28
     56a:	47 5e       	subi	r20, 0xE7	; 231
     56c:	5f 4f       	sbci	r21, 0xFF	; 255
     56e:	0e 94 15 01 	call	0x22a	; 0x22a <_fpadd_parts>
     572:	0e 94 ee 06 	call	0xddc	; 0xddc <__pack_f>
     576:	a0 96       	adiw	r28, 0x20	; 32
     578:	e6 e0       	ldi	r30, 0x06	; 6
     57a:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x18>

0000057e <__mulsf3>:
     57e:	a0 e2       	ldi	r26, 0x20	; 32
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	e5 ec       	ldi	r30, 0xC5	; 197
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <__prologue_saves__>
     58a:	69 83       	std	Y+1, r22	; 0x01
     58c:	7a 83       	std	Y+2, r23	; 0x02
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	9c 83       	std	Y+4, r25	; 0x04
     592:	2d 83       	std	Y+5, r18	; 0x05
     594:	3e 83       	std	Y+6, r19	; 0x06
     596:	4f 83       	std	Y+7, r20	; 0x07
     598:	58 87       	std	Y+8, r21	; 0x08
     59a:	ce 01       	movw	r24, r28
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	be 01       	movw	r22, r28
     5a0:	67 5f       	subi	r22, 0xF7	; 247
     5a2:	7f 4f       	sbci	r23, 0xFF	; 255
     5a4:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     5a8:	ce 01       	movw	r24, r28
     5aa:	05 96       	adiw	r24, 0x05	; 5
     5ac:	be 01       	movw	r22, r28
     5ae:	6f 5e       	subi	r22, 0xEF	; 239
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     5b6:	99 85       	ldd	r25, Y+9	; 0x09
     5b8:	92 30       	cpi	r25, 0x02	; 2
     5ba:	88 f0       	brcs	.+34     	; 0x5de <__mulsf3+0x60>
     5bc:	89 89       	ldd	r24, Y+17	; 0x11
     5be:	82 30       	cpi	r24, 0x02	; 2
     5c0:	c8 f0       	brcs	.+50     	; 0x5f4 <__mulsf3+0x76>
     5c2:	94 30       	cpi	r25, 0x04	; 4
     5c4:	19 f4       	brne	.+6      	; 0x5cc <__mulsf3+0x4e>
     5c6:	82 30       	cpi	r24, 0x02	; 2
     5c8:	51 f4       	brne	.+20     	; 0x5de <__mulsf3+0x60>
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <__mulsf3+0x56>
     5cc:	84 30       	cpi	r24, 0x04	; 4
     5ce:	29 f4       	brne	.+10     	; 0x5da <__mulsf3+0x5c>
     5d0:	92 30       	cpi	r25, 0x02	; 2
     5d2:	81 f4       	brne	.+32     	; 0x5f4 <__mulsf3+0x76>
     5d4:	8b e7       	ldi	r24, 0x7B	; 123
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	c6 c0       	rjmp	.+396    	; 0x766 <__mulsf3+0x1e8>
     5da:	92 30       	cpi	r25, 0x02	; 2
     5dc:	49 f4       	brne	.+18     	; 0x5f0 <__mulsf3+0x72>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5e2:	8a 89       	ldd	r24, Y+18	; 0x12
     5e4:	98 13       	cpse	r25, r24
     5e6:	21 e0       	ldi	r18, 0x01	; 1
     5e8:	2a 87       	std	Y+10, r18	; 0x0a
     5ea:	ce 01       	movw	r24, r28
     5ec:	09 96       	adiw	r24, 0x09	; 9
     5ee:	bb c0       	rjmp	.+374    	; 0x766 <__mulsf3+0x1e8>
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	49 f4       	brne	.+18     	; 0x606 <__mulsf3+0x88>
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f8:	8a 89       	ldd	r24, Y+18	; 0x12
     5fa:	98 13       	cpse	r25, r24
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	2a 8b       	std	Y+18, r18	; 0x12
     600:	ce 01       	movw	r24, r28
     602:	41 96       	adiw	r24, 0x11	; 17
     604:	b0 c0       	rjmp	.+352    	; 0x766 <__mulsf3+0x1e8>
     606:	2d 84       	ldd	r2, Y+13	; 0x0d
     608:	3e 84       	ldd	r3, Y+14	; 0x0e
     60a:	4f 84       	ldd	r4, Y+15	; 0x0f
     60c:	58 88       	ldd	r5, Y+16	; 0x10
     60e:	6d 88       	ldd	r6, Y+21	; 0x15
     610:	7e 88       	ldd	r7, Y+22	; 0x16
     612:	8f 88       	ldd	r8, Y+23	; 0x17
     614:	98 8c       	ldd	r9, Y+24	; 0x18
     616:	ee 24       	eor	r14, r14
     618:	ff 24       	eor	r15, r15
     61a:	87 01       	movw	r16, r14
     61c:	aa 24       	eor	r10, r10
     61e:	bb 24       	eor	r11, r11
     620:	65 01       	movw	r12, r10
     622:	40 e0       	ldi	r20, 0x00	; 0
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	e0 e0       	ldi	r30, 0x00	; 0
     62c:	f0 e0       	ldi	r31, 0x00	; 0
     62e:	c1 01       	movw	r24, r2
     630:	81 70       	andi	r24, 0x01	; 1
     632:	90 70       	andi	r25, 0x00	; 0
     634:	89 2b       	or	r24, r25
     636:	e9 f0       	breq	.+58     	; 0x672 <__mulsf3+0xf4>
     638:	e6 0c       	add	r14, r6
     63a:	f7 1c       	adc	r15, r7
     63c:	08 1d       	adc	r16, r8
     63e:	19 1d       	adc	r17, r9
     640:	9a 01       	movw	r18, r20
     642:	ab 01       	movw	r20, r22
     644:	2a 0d       	add	r18, r10
     646:	3b 1d       	adc	r19, r11
     648:	4c 1d       	adc	r20, r12
     64a:	5d 1d       	adc	r21, r13
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	a0 e0       	ldi	r26, 0x00	; 0
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	e6 14       	cp	r14, r6
     656:	f7 04       	cpc	r15, r7
     658:	08 05       	cpc	r16, r8
     65a:	19 05       	cpc	r17, r9
     65c:	20 f4       	brcc	.+8      	; 0x666 <__mulsf3+0xe8>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	a0 e0       	ldi	r26, 0x00	; 0
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	ba 01       	movw	r22, r20
     668:	a9 01       	movw	r20, r18
     66a:	48 0f       	add	r20, r24
     66c:	59 1f       	adc	r21, r25
     66e:	6a 1f       	adc	r22, r26
     670:	7b 1f       	adc	r23, r27
     672:	aa 0c       	add	r10, r10
     674:	bb 1c       	adc	r11, r11
     676:	cc 1c       	adc	r12, r12
     678:	dd 1c       	adc	r13, r13
     67a:	97 fe       	sbrs	r9, 7
     67c:	08 c0       	rjmp	.+16     	; 0x68e <__mulsf3+0x110>
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	a0 e0       	ldi	r26, 0x00	; 0
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	a8 2a       	or	r10, r24
     688:	b9 2a       	or	r11, r25
     68a:	ca 2a       	or	r12, r26
     68c:	db 2a       	or	r13, r27
     68e:	31 96       	adiw	r30, 0x01	; 1
     690:	e0 32       	cpi	r30, 0x20	; 32
     692:	f1 05       	cpc	r31, r1
     694:	49 f0       	breq	.+18     	; 0x6a8 <__mulsf3+0x12a>
     696:	66 0c       	add	r6, r6
     698:	77 1c       	adc	r7, r7
     69a:	88 1c       	adc	r8, r8
     69c:	99 1c       	adc	r9, r9
     69e:	56 94       	lsr	r5
     6a0:	47 94       	ror	r4
     6a2:	37 94       	ror	r3
     6a4:	27 94       	ror	r2
     6a6:	c3 cf       	rjmp	.-122    	; 0x62e <__mulsf3+0xb0>
     6a8:	fa 85       	ldd	r31, Y+10	; 0x0a
     6aa:	ea 89       	ldd	r30, Y+18	; 0x12
     6ac:	2b 89       	ldd	r18, Y+19	; 0x13
     6ae:	3c 89       	ldd	r19, Y+20	; 0x14
     6b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     6b4:	28 0f       	add	r18, r24
     6b6:	39 1f       	adc	r19, r25
     6b8:	2e 5f       	subi	r18, 0xFE	; 254
     6ba:	3f 4f       	sbci	r19, 0xFF	; 255
     6bc:	17 c0       	rjmp	.+46     	; 0x6ec <__mulsf3+0x16e>
     6be:	ca 01       	movw	r24, r20
     6c0:	81 70       	andi	r24, 0x01	; 1
     6c2:	90 70       	andi	r25, 0x00	; 0
     6c4:	89 2b       	or	r24, r25
     6c6:	61 f0       	breq	.+24     	; 0x6e0 <__mulsf3+0x162>
     6c8:	16 95       	lsr	r17
     6ca:	07 95       	ror	r16
     6cc:	f7 94       	ror	r15
     6ce:	e7 94       	ror	r14
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	a0 e0       	ldi	r26, 0x00	; 0
     6d6:	b0 e8       	ldi	r27, 0x80	; 128
     6d8:	e8 2a       	or	r14, r24
     6da:	f9 2a       	or	r15, r25
     6dc:	0a 2b       	or	r16, r26
     6de:	1b 2b       	or	r17, r27
     6e0:	76 95       	lsr	r23
     6e2:	67 95       	ror	r22
     6e4:	57 95       	ror	r21
     6e6:	47 95       	ror	r20
     6e8:	2f 5f       	subi	r18, 0xFF	; 255
     6ea:	3f 4f       	sbci	r19, 0xFF	; 255
     6ec:	77 fd       	sbrc	r23, 7
     6ee:	e7 cf       	rjmp	.-50     	; 0x6be <__mulsf3+0x140>
     6f0:	0c c0       	rjmp	.+24     	; 0x70a <__mulsf3+0x18c>
     6f2:	44 0f       	add	r20, r20
     6f4:	55 1f       	adc	r21, r21
     6f6:	66 1f       	adc	r22, r22
     6f8:	77 1f       	adc	r23, r23
     6fa:	17 fd       	sbrc	r17, 7
     6fc:	41 60       	ori	r20, 0x01	; 1
     6fe:	ee 0c       	add	r14, r14
     700:	ff 1c       	adc	r15, r15
     702:	00 1f       	adc	r16, r16
     704:	11 1f       	adc	r17, r17
     706:	21 50       	subi	r18, 0x01	; 1
     708:	30 40       	sbci	r19, 0x00	; 0
     70a:	40 30       	cpi	r20, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	59 07       	cpc	r21, r25
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	69 07       	cpc	r22, r25
     714:	90 e4       	ldi	r25, 0x40	; 64
     716:	79 07       	cpc	r23, r25
     718:	60 f3       	brcs	.-40     	; 0x6f2 <__mulsf3+0x174>
     71a:	2b 8f       	std	Y+27, r18	; 0x1b
     71c:	3c 8f       	std	Y+28, r19	; 0x1c
     71e:	db 01       	movw	r26, r22
     720:	ca 01       	movw	r24, r20
     722:	8f 77       	andi	r24, 0x7F	; 127
     724:	90 70       	andi	r25, 0x00	; 0
     726:	a0 70       	andi	r26, 0x00	; 0
     728:	b0 70       	andi	r27, 0x00	; 0
     72a:	80 34       	cpi	r24, 0x40	; 64
     72c:	91 05       	cpc	r25, r1
     72e:	a1 05       	cpc	r26, r1
     730:	b1 05       	cpc	r27, r1
     732:	61 f4       	brne	.+24     	; 0x74c <__mulsf3+0x1ce>
     734:	47 fd       	sbrc	r20, 7
     736:	0a c0       	rjmp	.+20     	; 0x74c <__mulsf3+0x1ce>
     738:	e1 14       	cp	r14, r1
     73a:	f1 04       	cpc	r15, r1
     73c:	01 05       	cpc	r16, r1
     73e:	11 05       	cpc	r17, r1
     740:	29 f0       	breq	.+10     	; 0x74c <__mulsf3+0x1ce>
     742:	40 5c       	subi	r20, 0xC0	; 192
     744:	5f 4f       	sbci	r21, 0xFF	; 255
     746:	6f 4f       	sbci	r22, 0xFF	; 255
     748:	7f 4f       	sbci	r23, 0xFF	; 255
     74a:	40 78       	andi	r20, 0x80	; 128
     74c:	1a 8e       	std	Y+26, r1	; 0x1a
     74e:	fe 17       	cp	r31, r30
     750:	11 f0       	breq	.+4      	; 0x756 <__mulsf3+0x1d8>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	8a 8f       	std	Y+26, r24	; 0x1a
     756:	4d 8f       	std	Y+29, r20	; 0x1d
     758:	5e 8f       	std	Y+30, r21	; 0x1e
     75a:	6f 8f       	std	Y+31, r22	; 0x1f
     75c:	78 a3       	std	Y+32, r23	; 0x20
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	89 8f       	std	Y+25, r24	; 0x19
     762:	ce 01       	movw	r24, r28
     764:	49 96       	adiw	r24, 0x19	; 25
     766:	0e 94 ee 06 	call	0xddc	; 0xddc <__pack_f>
     76a:	a0 96       	adiw	r28, 0x20	; 32
     76c:	e2 e1       	ldi	r30, 0x12	; 18
     76e:	0c 94 95 16 	jmp	0x2d2a	; 0x2d2a <__epilogue_restores__>

00000772 <__divsf3>:
     772:	a8 e1       	ldi	r26, 0x18	; 24
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	ef eb       	ldi	r30, 0xBF	; 191
     778:	f3 e0       	ldi	r31, 0x03	; 3
     77a:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__+0x10>
     77e:	69 83       	std	Y+1, r22	; 0x01
     780:	7a 83       	std	Y+2, r23	; 0x02
     782:	8b 83       	std	Y+3, r24	; 0x03
     784:	9c 83       	std	Y+4, r25	; 0x04
     786:	2d 83       	std	Y+5, r18	; 0x05
     788:	3e 83       	std	Y+6, r19	; 0x06
     78a:	4f 83       	std	Y+7, r20	; 0x07
     78c:	58 87       	std	Y+8, r21	; 0x08
     78e:	b9 e0       	ldi	r27, 0x09	; 9
     790:	eb 2e       	mov	r14, r27
     792:	f1 2c       	mov	r15, r1
     794:	ec 0e       	add	r14, r28
     796:	fd 1e       	adc	r15, r29
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	b7 01       	movw	r22, r14
     79e:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     7a2:	8e 01       	movw	r16, r28
     7a4:	0f 5e       	subi	r16, 0xEF	; 239
     7a6:	1f 4f       	sbci	r17, 0xFF	; 255
     7a8:	ce 01       	movw	r24, r28
     7aa:	05 96       	adiw	r24, 0x05	; 5
     7ac:	b8 01       	movw	r22, r16
     7ae:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     7b2:	29 85       	ldd	r18, Y+9	; 0x09
     7b4:	22 30       	cpi	r18, 0x02	; 2
     7b6:	08 f4       	brcc	.+2      	; 0x7ba <__divsf3+0x48>
     7b8:	7e c0       	rjmp	.+252    	; 0x8b6 <__stack+0x57>
     7ba:	39 89       	ldd	r19, Y+17	; 0x11
     7bc:	32 30       	cpi	r19, 0x02	; 2
     7be:	10 f4       	brcc	.+4      	; 0x7c4 <__divsf3+0x52>
     7c0:	b8 01       	movw	r22, r16
     7c2:	7c c0       	rjmp	.+248    	; 0x8bc <__stack+0x5d>
     7c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     7c6:	9a 89       	ldd	r25, Y+18	; 0x12
     7c8:	89 27       	eor	r24, r25
     7ca:	8a 87       	std	Y+10, r24	; 0x0a
     7cc:	24 30       	cpi	r18, 0x04	; 4
     7ce:	11 f0       	breq	.+4      	; 0x7d4 <__divsf3+0x62>
     7d0:	22 30       	cpi	r18, 0x02	; 2
     7d2:	31 f4       	brne	.+12     	; 0x7e0 <__divsf3+0x6e>
     7d4:	23 17       	cp	r18, r19
     7d6:	09 f0       	breq	.+2      	; 0x7da <__divsf3+0x68>
     7d8:	6e c0       	rjmp	.+220    	; 0x8b6 <__stack+0x57>
     7da:	6b e7       	ldi	r22, 0x7B	; 123
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	6e c0       	rjmp	.+220    	; 0x8bc <__stack+0x5d>
     7e0:	34 30       	cpi	r19, 0x04	; 4
     7e2:	39 f4       	brne	.+14     	; 0x7f2 <__divsf3+0x80>
     7e4:	1d 86       	std	Y+13, r1	; 0x0d
     7e6:	1e 86       	std	Y+14, r1	; 0x0e
     7e8:	1f 86       	std	Y+15, r1	; 0x0f
     7ea:	18 8a       	std	Y+16, r1	; 0x10
     7ec:	1c 86       	std	Y+12, r1	; 0x0c
     7ee:	1b 86       	std	Y+11, r1	; 0x0b
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <__divsf3+0x88>
     7f2:	32 30       	cpi	r19, 0x02	; 2
     7f4:	21 f4       	brne	.+8      	; 0x7fe <__divsf3+0x8c>
     7f6:	84 e0       	ldi	r24, 0x04	; 4
     7f8:	89 87       	std	Y+9, r24	; 0x09
     7fa:	b7 01       	movw	r22, r14
     7fc:	5f c0       	rjmp	.+190    	; 0x8bc <__stack+0x5d>
     7fe:	2b 85       	ldd	r18, Y+11	; 0x0b
     800:	3c 85       	ldd	r19, Y+12	; 0x0c
     802:	8b 89       	ldd	r24, Y+19	; 0x13
     804:	9c 89       	ldd	r25, Y+20	; 0x14
     806:	28 1b       	sub	r18, r24
     808:	39 0b       	sbc	r19, r25
     80a:	3c 87       	std	Y+12, r19	; 0x0c
     80c:	2b 87       	std	Y+11, r18	; 0x0b
     80e:	ed 84       	ldd	r14, Y+13	; 0x0d
     810:	fe 84       	ldd	r15, Y+14	; 0x0e
     812:	0f 85       	ldd	r16, Y+15	; 0x0f
     814:	18 89       	ldd	r17, Y+16	; 0x10
     816:	ad 88       	ldd	r10, Y+21	; 0x15
     818:	be 88       	ldd	r11, Y+22	; 0x16
     81a:	cf 88       	ldd	r12, Y+23	; 0x17
     81c:	d8 8c       	ldd	r13, Y+24	; 0x18
     81e:	ea 14       	cp	r14, r10
     820:	fb 04       	cpc	r15, r11
     822:	0c 05       	cpc	r16, r12
     824:	1d 05       	cpc	r17, r13
     826:	40 f4       	brcc	.+16     	; 0x838 <__divsf3+0xc6>
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	21 50       	subi	r18, 0x01	; 1
     832:	30 40       	sbci	r19, 0x00	; 0
     834:	3c 87       	std	Y+12, r19	; 0x0c
     836:	2b 87       	std	Y+11, r18	; 0x0b
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	a0 e0       	ldi	r26, 0x00	; 0
     846:	b0 e4       	ldi	r27, 0x40	; 64
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	ea 14       	cp	r14, r10
     84e:	fb 04       	cpc	r15, r11
     850:	0c 05       	cpc	r16, r12
     852:	1d 05       	cpc	r17, r13
     854:	40 f0       	brcs	.+16     	; 0x866 <__stack+0x7>
     856:	28 2b       	or	r18, r24
     858:	39 2b       	or	r19, r25
     85a:	4a 2b       	or	r20, r26
     85c:	5b 2b       	or	r21, r27
     85e:	ea 18       	sub	r14, r10
     860:	fb 08       	sbc	r15, r11
     862:	0c 09       	sbc	r16, r12
     864:	1d 09       	sbc	r17, r13
     866:	b6 95       	lsr	r27
     868:	a7 95       	ror	r26
     86a:	97 95       	ror	r25
     86c:	87 95       	ror	r24
     86e:	ee 0c       	add	r14, r14
     870:	ff 1c       	adc	r15, r15
     872:	00 1f       	adc	r16, r16
     874:	11 1f       	adc	r17, r17
     876:	6f 5f       	subi	r22, 0xFF	; 255
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	6f 31       	cpi	r22, 0x1F	; 31
     87c:	71 05       	cpc	r23, r1
     87e:	31 f7       	brne	.-52     	; 0x84c <__divsf3+0xda>
     880:	da 01       	movw	r26, r20
     882:	c9 01       	movw	r24, r18
     884:	8f 77       	andi	r24, 0x7F	; 127
     886:	90 70       	andi	r25, 0x00	; 0
     888:	a0 70       	andi	r26, 0x00	; 0
     88a:	b0 70       	andi	r27, 0x00	; 0
     88c:	80 34       	cpi	r24, 0x40	; 64
     88e:	91 05       	cpc	r25, r1
     890:	a1 05       	cpc	r26, r1
     892:	b1 05       	cpc	r27, r1
     894:	61 f4       	brne	.+24     	; 0x8ae <__stack+0x4f>
     896:	27 fd       	sbrc	r18, 7
     898:	0a c0       	rjmp	.+20     	; 0x8ae <__stack+0x4f>
     89a:	e1 14       	cp	r14, r1
     89c:	f1 04       	cpc	r15, r1
     89e:	01 05       	cpc	r16, r1
     8a0:	11 05       	cpc	r17, r1
     8a2:	29 f0       	breq	.+10     	; 0x8ae <__stack+0x4f>
     8a4:	20 5c       	subi	r18, 0xC0	; 192
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	4f 4f       	sbci	r20, 0xFF	; 255
     8aa:	5f 4f       	sbci	r21, 0xFF	; 255
     8ac:	20 78       	andi	r18, 0x80	; 128
     8ae:	2d 87       	std	Y+13, r18	; 0x0d
     8b0:	3e 87       	std	Y+14, r19	; 0x0e
     8b2:	4f 87       	std	Y+15, r20	; 0x0f
     8b4:	58 8b       	std	Y+16, r21	; 0x10
     8b6:	be 01       	movw	r22, r28
     8b8:	67 5f       	subi	r22, 0xF7	; 247
     8ba:	7f 4f       	sbci	r23, 0xFF	; 255
     8bc:	cb 01       	movw	r24, r22
     8be:	0e 94 ee 06 	call	0xddc	; 0xddc <__pack_f>
     8c2:	68 96       	adiw	r28, 0x18	; 24
     8c4:	ea e0       	ldi	r30, 0x0A	; 10
     8c6:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__+0x10>

000008ca <__gtsf2>:
     8ca:	a8 e1       	ldi	r26, 0x18	; 24
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	eb e6       	ldi	r30, 0x6B	; 107
     8d0:	f4 e0       	ldi	r31, 0x04	; 4
     8d2:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x18>
     8d6:	69 83       	std	Y+1, r22	; 0x01
     8d8:	7a 83       	std	Y+2, r23	; 0x02
     8da:	8b 83       	std	Y+3, r24	; 0x03
     8dc:	9c 83       	std	Y+4, r25	; 0x04
     8de:	2d 83       	std	Y+5, r18	; 0x05
     8e0:	3e 83       	std	Y+6, r19	; 0x06
     8e2:	4f 83       	std	Y+7, r20	; 0x07
     8e4:	58 87       	std	Y+8, r21	; 0x08
     8e6:	89 e0       	ldi	r24, 0x09	; 9
     8e8:	e8 2e       	mov	r14, r24
     8ea:	f1 2c       	mov	r15, r1
     8ec:	ec 0e       	add	r14, r28
     8ee:	fd 1e       	adc	r15, r29
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	b7 01       	movw	r22, r14
     8f6:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     8fa:	8e 01       	movw	r16, r28
     8fc:	0f 5e       	subi	r16, 0xEF	; 239
     8fe:	1f 4f       	sbci	r17, 0xFF	; 255
     900:	ce 01       	movw	r24, r28
     902:	05 96       	adiw	r24, 0x05	; 5
     904:	b8 01       	movw	r22, r16
     906:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     90a:	89 85       	ldd	r24, Y+9	; 0x09
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	40 f0       	brcs	.+16     	; 0x920 <__gtsf2+0x56>
     910:	89 89       	ldd	r24, Y+17	; 0x11
     912:	82 30       	cpi	r24, 0x02	; 2
     914:	28 f0       	brcs	.+10     	; 0x920 <__gtsf2+0x56>
     916:	c7 01       	movw	r24, r14
     918:	b8 01       	movw	r22, r16
     91a:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fpcmp_parts_f>
     91e:	01 c0       	rjmp	.+2      	; 0x922 <__gtsf2+0x58>
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	68 96       	adiw	r28, 0x18	; 24
     924:	e6 e0       	ldi	r30, 0x06	; 6
     926:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x18>

0000092a <__gesf2>:
     92a:	a8 e1       	ldi	r26, 0x18	; 24
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	eb e9       	ldi	r30, 0x9B	; 155
     930:	f4 e0       	ldi	r31, 0x04	; 4
     932:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x18>
     936:	69 83       	std	Y+1, r22	; 0x01
     938:	7a 83       	std	Y+2, r23	; 0x02
     93a:	8b 83       	std	Y+3, r24	; 0x03
     93c:	9c 83       	std	Y+4, r25	; 0x04
     93e:	2d 83       	std	Y+5, r18	; 0x05
     940:	3e 83       	std	Y+6, r19	; 0x06
     942:	4f 83       	std	Y+7, r20	; 0x07
     944:	58 87       	std	Y+8, r21	; 0x08
     946:	89 e0       	ldi	r24, 0x09	; 9
     948:	e8 2e       	mov	r14, r24
     94a:	f1 2c       	mov	r15, r1
     94c:	ec 0e       	add	r14, r28
     94e:	fd 1e       	adc	r15, r29
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	b7 01       	movw	r22, r14
     956:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     95a:	8e 01       	movw	r16, r28
     95c:	0f 5e       	subi	r16, 0xEF	; 239
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
     960:	ce 01       	movw	r24, r28
     962:	05 96       	adiw	r24, 0x05	; 5
     964:	b8 01       	movw	r22, r16
     966:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     96a:	89 85       	ldd	r24, Y+9	; 0x09
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	40 f0       	brcs	.+16     	; 0x980 <__gesf2+0x56>
     970:	89 89       	ldd	r24, Y+17	; 0x11
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	28 f0       	brcs	.+10     	; 0x980 <__gesf2+0x56>
     976:	c7 01       	movw	r24, r14
     978:	b8 01       	movw	r22, r16
     97a:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fpcmp_parts_f>
     97e:	01 c0       	rjmp	.+2      	; 0x982 <__gesf2+0x58>
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	68 96       	adiw	r28, 0x18	; 24
     984:	e6 e0       	ldi	r30, 0x06	; 6
     986:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x18>

0000098a <__ltsf2>:
     98a:	a8 e1       	ldi	r26, 0x18	; 24
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	eb ec       	ldi	r30, 0xCB	; 203
     990:	f4 e0       	ldi	r31, 0x04	; 4
     992:	0c 94 85 16 	jmp	0x2d0a	; 0x2d0a <__prologue_saves__+0x18>
     996:	69 83       	std	Y+1, r22	; 0x01
     998:	7a 83       	std	Y+2, r23	; 0x02
     99a:	8b 83       	std	Y+3, r24	; 0x03
     99c:	9c 83       	std	Y+4, r25	; 0x04
     99e:	2d 83       	std	Y+5, r18	; 0x05
     9a0:	3e 83       	std	Y+6, r19	; 0x06
     9a2:	4f 83       	std	Y+7, r20	; 0x07
     9a4:	58 87       	std	Y+8, r21	; 0x08
     9a6:	89 e0       	ldi	r24, 0x09	; 9
     9a8:	e8 2e       	mov	r14, r24
     9aa:	f1 2c       	mov	r15, r1
     9ac:	ec 0e       	add	r14, r28
     9ae:	fd 1e       	adc	r15, r29
     9b0:	ce 01       	movw	r24, r28
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	b7 01       	movw	r22, r14
     9b6:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     9ba:	8e 01       	movw	r16, r28
     9bc:	0f 5e       	subi	r16, 0xEF	; 239
     9be:	1f 4f       	sbci	r17, 0xFF	; 255
     9c0:	ce 01       	movw	r24, r28
     9c2:	05 96       	adiw	r24, 0x05	; 5
     9c4:	b8 01       	movw	r22, r16
     9c6:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     9ca:	89 85       	ldd	r24, Y+9	; 0x09
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	40 f0       	brcs	.+16     	; 0x9e0 <__ltsf2+0x56>
     9d0:	89 89       	ldd	r24, Y+17	; 0x11
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__ltsf2+0x56>
     9d6:	c7 01       	movw	r24, r14
     9d8:	b8 01       	movw	r22, r16
     9da:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fpcmp_parts_f>
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <__ltsf2+0x58>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	68 96       	adiw	r28, 0x18	; 24
     9e4:	e6 e0       	ldi	r30, 0x06	; 6
     9e6:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__epilogue_restores__+0x18>

000009ea <__floatsisf>:
     9ea:	a8 e0       	ldi	r26, 0x08	; 8
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	eb ef       	ldi	r30, 0xFB	; 251
     9f0:	f4 e0       	ldi	r31, 0x04	; 4
     9f2:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x12>
     9f6:	9b 01       	movw	r18, r22
     9f8:	ac 01       	movw	r20, r24
     9fa:	83 e0       	ldi	r24, 0x03	; 3
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	da 01       	movw	r26, r20
     a00:	c9 01       	movw	r24, r18
     a02:	88 27       	eor	r24, r24
     a04:	b7 fd       	sbrc	r27, 7
     a06:	83 95       	inc	r24
     a08:	99 27       	eor	r25, r25
     a0a:	aa 27       	eor	r26, r26
     a0c:	bb 27       	eor	r27, r27
     a0e:	b8 2e       	mov	r11, r24
     a10:	21 15       	cp	r18, r1
     a12:	31 05       	cpc	r19, r1
     a14:	41 05       	cpc	r20, r1
     a16:	51 05       	cpc	r21, r1
     a18:	19 f4       	brne	.+6      	; 0xa20 <__floatsisf+0x36>
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	89 83       	std	Y+1, r24	; 0x01
     a1e:	3a c0       	rjmp	.+116    	; 0xa94 <__floatsisf+0xaa>
     a20:	88 23       	and	r24, r24
     a22:	a9 f0       	breq	.+42     	; 0xa4e <__floatsisf+0x64>
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e8       	ldi	r24, 0x80	; 128
     a30:	58 07       	cpc	r21, r24
     a32:	29 f4       	brne	.+10     	; 0xa3e <__floatsisf+0x54>
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	9f ec       	ldi	r25, 0xCF	; 207
     a3c:	30 c0       	rjmp	.+96     	; 0xa9e <__floatsisf+0xb4>
     a3e:	ee 24       	eor	r14, r14
     a40:	ff 24       	eor	r15, r15
     a42:	87 01       	movw	r16, r14
     a44:	e2 1a       	sub	r14, r18
     a46:	f3 0a       	sbc	r15, r19
     a48:	04 0b       	sbc	r16, r20
     a4a:	15 0b       	sbc	r17, r21
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <__floatsisf+0x68>
     a4e:	79 01       	movw	r14, r18
     a50:	8a 01       	movw	r16, r20
     a52:	8e e1       	ldi	r24, 0x1E	; 30
     a54:	c8 2e       	mov	r12, r24
     a56:	d1 2c       	mov	r13, r1
     a58:	dc 82       	std	Y+4, r13	; 0x04
     a5a:	cb 82       	std	Y+3, r12	; 0x03
     a5c:	ed 82       	std	Y+5, r14	; 0x05
     a5e:	fe 82       	std	Y+6, r15	; 0x06
     a60:	0f 83       	std	Y+7, r16	; 0x07
     a62:	18 87       	std	Y+8, r17	; 0x08
     a64:	c8 01       	movw	r24, r16
     a66:	b7 01       	movw	r22, r14
     a68:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__clzsi2>
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	18 16       	cp	r1, r24
     a70:	19 06       	cpc	r1, r25
     a72:	84 f4       	brge	.+32     	; 0xa94 <__floatsisf+0xaa>
     a74:	08 2e       	mov	r0, r24
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__floatsisf+0x96>
     a78:	ee 0c       	add	r14, r14
     a7a:	ff 1c       	adc	r15, r15
     a7c:	00 1f       	adc	r16, r16
     a7e:	11 1f       	adc	r17, r17
     a80:	0a 94       	dec	r0
     a82:	d2 f7       	brpl	.-12     	; 0xa78 <__floatsisf+0x8e>
     a84:	ed 82       	std	Y+5, r14	; 0x05
     a86:	fe 82       	std	Y+6, r15	; 0x06
     a88:	0f 83       	std	Y+7, r16	; 0x07
     a8a:	18 87       	std	Y+8, r17	; 0x08
     a8c:	c8 1a       	sub	r12, r24
     a8e:	d9 0a       	sbc	r13, r25
     a90:	dc 82       	std	Y+4, r13	; 0x04
     a92:	cb 82       	std	Y+3, r12	; 0x03
     a94:	ba 82       	std	Y+2, r11	; 0x02
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	0e 94 ee 06 	call	0xddc	; 0xddc <__pack_f>
     a9e:	28 96       	adiw	r28, 0x08	; 8
     aa0:	e9 e0       	ldi	r30, 0x09	; 9
     aa2:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x12>

00000aa6 <__fixsfsi>:
     aa6:	ac e0       	ldi	r26, 0x0C	; 12
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	e9 e5       	ldi	r30, 0x59	; 89
     aac:	f5 e0       	ldi	r31, 0x05	; 5
     aae:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__prologue_saves__+0x20>
     ab2:	69 83       	std	Y+1, r22	; 0x01
     ab4:	7a 83       	std	Y+2, r23	; 0x02
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	9c 83       	std	Y+4, r25	; 0x04
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	be 01       	movw	r22, r28
     ac0:	6b 5f       	subi	r22, 0xFB	; 251
     ac2:	7f 4f       	sbci	r23, 0xFF	; 255
     ac4:	0e 94 c3 07 	call	0xf86	; 0xf86 <__unpack_f>
     ac8:	8d 81       	ldd	r24, Y+5	; 0x05
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	61 f1       	breq	.+88     	; 0xb26 <__fixsfsi+0x80>
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	50 f1       	brcs	.+84     	; 0xb26 <__fixsfsi+0x80>
     ad2:	84 30       	cpi	r24, 0x04	; 4
     ad4:	21 f4       	brne	.+8      	; 0xade <__fixsfsi+0x38>
     ad6:	8e 81       	ldd	r24, Y+6	; 0x06
     ad8:	88 23       	and	r24, r24
     ada:	51 f1       	breq	.+84     	; 0xb30 <__fixsfsi+0x8a>
     adc:	2e c0       	rjmp	.+92     	; 0xb3a <__fixsfsi+0x94>
     ade:	2f 81       	ldd	r18, Y+7	; 0x07
     ae0:	38 85       	ldd	r19, Y+8	; 0x08
     ae2:	37 fd       	sbrc	r19, 7
     ae4:	20 c0       	rjmp	.+64     	; 0xb26 <__fixsfsi+0x80>
     ae6:	6e 81       	ldd	r22, Y+6	; 0x06
     ae8:	2f 31       	cpi	r18, 0x1F	; 31
     aea:	31 05       	cpc	r19, r1
     aec:	1c f0       	brlt	.+6      	; 0xaf4 <__fixsfsi+0x4e>
     aee:	66 23       	and	r22, r22
     af0:	f9 f0       	breq	.+62     	; 0xb30 <__fixsfsi+0x8a>
     af2:	23 c0       	rjmp	.+70     	; 0xb3a <__fixsfsi+0x94>
     af4:	8e e1       	ldi	r24, 0x1E	; 30
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	82 1b       	sub	r24, r18
     afa:	93 0b       	sbc	r25, r19
     afc:	29 85       	ldd	r18, Y+9	; 0x09
     afe:	3a 85       	ldd	r19, Y+10	; 0x0a
     b00:	4b 85       	ldd	r20, Y+11	; 0x0b
     b02:	5c 85       	ldd	r21, Y+12	; 0x0c
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <__fixsfsi+0x68>
     b06:	56 95       	lsr	r21
     b08:	47 95       	ror	r20
     b0a:	37 95       	ror	r19
     b0c:	27 95       	ror	r18
     b0e:	8a 95       	dec	r24
     b10:	d2 f7       	brpl	.-12     	; 0xb06 <__fixsfsi+0x60>
     b12:	66 23       	and	r22, r22
     b14:	b1 f0       	breq	.+44     	; 0xb42 <__fixsfsi+0x9c>
     b16:	50 95       	com	r21
     b18:	40 95       	com	r20
     b1a:	30 95       	com	r19
     b1c:	21 95       	neg	r18
     b1e:	3f 4f       	sbci	r19, 0xFF	; 255
     b20:	4f 4f       	sbci	r20, 0xFF	; 255
     b22:	5f 4f       	sbci	r21, 0xFF	; 255
     b24:	0e c0       	rjmp	.+28     	; 0xb42 <__fixsfsi+0x9c>
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	09 c0       	rjmp	.+18     	; 0xb42 <__fixsfsi+0x9c>
     b30:	2f ef       	ldi	r18, 0xFF	; 255
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	4f ef       	ldi	r20, 0xFF	; 255
     b36:	5f e7       	ldi	r21, 0x7F	; 127
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__fixsfsi+0x9c>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e8       	ldi	r21, 0x80	; 128
     b42:	b9 01       	movw	r22, r18
     b44:	ca 01       	movw	r24, r20
     b46:	2c 96       	adiw	r28, 0x0c	; 12
     b48:	e2 e0       	ldi	r30, 0x02	; 2
     b4a:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <__epilogue_restores__+0x20>

00000b4e <__floatunsisf>:
     b4e:	a8 e0       	ldi	r26, 0x08	; 8
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ed ea       	ldi	r30, 0xAD	; 173
     b54:	f5 e0       	ldi	r31, 0x05	; 5
     b56:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__prologue_saves__+0x10>
     b5a:	7b 01       	movw	r14, r22
     b5c:	8c 01       	movw	r16, r24
     b5e:	61 15       	cp	r22, r1
     b60:	71 05       	cpc	r23, r1
     b62:	81 05       	cpc	r24, r1
     b64:	91 05       	cpc	r25, r1
     b66:	19 f4       	brne	.+6      	; 0xb6e <__floatunsisf+0x20>
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	89 83       	std	Y+1, r24	; 0x01
     b6c:	60 c0       	rjmp	.+192    	; 0xc2e <__floatunsisf+0xe0>
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	89 83       	std	Y+1, r24	; 0x01
     b72:	8e e1       	ldi	r24, 0x1E	; 30
     b74:	c8 2e       	mov	r12, r24
     b76:	d1 2c       	mov	r13, r1
     b78:	dc 82       	std	Y+4, r13	; 0x04
     b7a:	cb 82       	std	Y+3, r12	; 0x03
     b7c:	ed 82       	std	Y+5, r14	; 0x05
     b7e:	fe 82       	std	Y+6, r15	; 0x06
     b80:	0f 83       	std	Y+7, r16	; 0x07
     b82:	18 87       	std	Y+8, r17	; 0x08
     b84:	c8 01       	movw	r24, r16
     b86:	b7 01       	movw	r22, r14
     b88:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__clzsi2>
     b8c:	fc 01       	movw	r30, r24
     b8e:	31 97       	sbiw	r30, 0x01	; 1
     b90:	f7 ff       	sbrs	r31, 7
     b92:	3b c0       	rjmp	.+118    	; 0xc0a <__floatunsisf+0xbc>
     b94:	22 27       	eor	r18, r18
     b96:	33 27       	eor	r19, r19
     b98:	2e 1b       	sub	r18, r30
     b9a:	3f 0b       	sbc	r19, r31
     b9c:	57 01       	movw	r10, r14
     b9e:	68 01       	movw	r12, r16
     ba0:	02 2e       	mov	r0, r18
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <__floatunsisf+0x5e>
     ba4:	d6 94       	lsr	r13
     ba6:	c7 94       	ror	r12
     ba8:	b7 94       	ror	r11
     baa:	a7 94       	ror	r10
     bac:	0a 94       	dec	r0
     bae:	d2 f7       	brpl	.-12     	; 0xba4 <__floatunsisf+0x56>
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <__floatunsisf+0x7c>
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	aa 1f       	adc	r26, r26
     bc8:	bb 1f       	adc	r27, r27
     bca:	2a 95       	dec	r18
     bcc:	d2 f7       	brpl	.-12     	; 0xbc2 <__floatunsisf+0x74>
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	a1 09       	sbc	r26, r1
     bd2:	b1 09       	sbc	r27, r1
     bd4:	8e 21       	and	r24, r14
     bd6:	9f 21       	and	r25, r15
     bd8:	a0 23       	and	r26, r16
     bda:	b1 23       	and	r27, r17
     bdc:	00 97       	sbiw	r24, 0x00	; 0
     bde:	a1 05       	cpc	r26, r1
     be0:	b1 05       	cpc	r27, r1
     be2:	21 f0       	breq	.+8      	; 0xbec <__floatunsisf+0x9e>
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	4a 29       	or	r20, r10
     bee:	5b 29       	or	r21, r11
     bf0:	6c 29       	or	r22, r12
     bf2:	7d 29       	or	r23, r13
     bf4:	4d 83       	std	Y+5, r20	; 0x05
     bf6:	5e 83       	std	Y+6, r21	; 0x06
     bf8:	6f 83       	std	Y+7, r22	; 0x07
     bfa:	78 87       	std	Y+8, r23	; 0x08
     bfc:	8e e1       	ldi	r24, 0x1E	; 30
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	8e 1b       	sub	r24, r30
     c02:	9f 0b       	sbc	r25, r31
     c04:	9c 83       	std	Y+4, r25	; 0x04
     c06:	8b 83       	std	Y+3, r24	; 0x03
     c08:	12 c0       	rjmp	.+36     	; 0xc2e <__floatunsisf+0xe0>
     c0a:	30 97       	sbiw	r30, 0x00	; 0
     c0c:	81 f0       	breq	.+32     	; 0xc2e <__floatunsisf+0xe0>
     c0e:	0e 2e       	mov	r0, r30
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <__floatunsisf+0xcc>
     c12:	ee 0c       	add	r14, r14
     c14:	ff 1c       	adc	r15, r15
     c16:	00 1f       	adc	r16, r16
     c18:	11 1f       	adc	r17, r17
     c1a:	0a 94       	dec	r0
     c1c:	d2 f7       	brpl	.-12     	; 0xc12 <__floatunsisf+0xc4>
     c1e:	ed 82       	std	Y+5, r14	; 0x05
     c20:	fe 82       	std	Y+6, r15	; 0x06
     c22:	0f 83       	std	Y+7, r16	; 0x07
     c24:	18 87       	std	Y+8, r17	; 0x08
     c26:	ce 1a       	sub	r12, r30
     c28:	df 0a       	sbc	r13, r31
     c2a:	dc 82       	std	Y+4, r13	; 0x04
     c2c:	cb 82       	std	Y+3, r12	; 0x03
     c2e:	1a 82       	std	Y+2, r1	; 0x02
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	0e 94 ee 06 	call	0xddc	; 0xddc <__pack_f>
     c38:	28 96       	adiw	r28, 0x08	; 8
     c3a:	ea e0       	ldi	r30, 0x0A	; 10
     c3c:	0c 94 9d 16 	jmp	0x2d3a	; 0x2d3a <__epilogue_restores__+0x10>

00000c40 <__ashldi3>:
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	0f 93       	push	r16
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	60 97       	sbiw	r28, 0x10	; 16
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	a8 2f       	mov	r26, r24
     c5c:	00 23       	and	r16, r16
     c5e:	09 f4       	brne	.+2      	; 0xc62 <__ashldi3+0x22>
     c60:	61 c0       	rjmp	.+194    	; 0xd24 <__ashldi3+0xe4>
     c62:	7e 01       	movw	r14, r28
     c64:	08 94       	sec
     c66:	e1 1c       	adc	r14, r1
     c68:	f1 1c       	adc	r15, r1
     c6a:	88 e0       	ldi	r24, 0x08	; 8
     c6c:	f7 01       	movw	r30, r14
     c6e:	11 92       	st	Z+, r1
     c70:	8a 95       	dec	r24
     c72:	e9 f7       	brne	.-6      	; 0xc6e <__ashldi3+0x2e>
     c74:	29 83       	std	Y+1, r18	; 0x01
     c76:	3a 83       	std	Y+2, r19	; 0x02
     c78:	4b 83       	std	Y+3, r20	; 0x03
     c7a:	5c 83       	std	Y+4, r21	; 0x04
     c7c:	6d 83       	std	Y+5, r22	; 0x05
     c7e:	7e 83       	std	Y+6, r23	; 0x06
     c80:	af 83       	std	Y+7, r26	; 0x07
     c82:	98 87       	std	Y+8, r25	; 0x08
     c84:	80 e2       	ldi	r24, 0x20	; 32
     c86:	80 1b       	sub	r24, r16
     c88:	e8 2f       	mov	r30, r24
     c8a:	ff 27       	eor	r31, r31
     c8c:	e7 fd       	sbrc	r30, 7
     c8e:	f0 95       	com	r31
     c90:	49 81       	ldd	r20, Y+1	; 0x01
     c92:	5a 81       	ldd	r21, Y+2	; 0x02
     c94:	6b 81       	ldd	r22, Y+3	; 0x03
     c96:	7c 81       	ldd	r23, Y+4	; 0x04
     c98:	18 16       	cp	r1, r24
     c9a:	84 f0       	brlt	.+32     	; 0xcbc <__ashldi3+0x7c>
     c9c:	19 86       	std	Y+9, r1	; 0x09
     c9e:	1a 86       	std	Y+10, r1	; 0x0a
     ca0:	1b 86       	std	Y+11, r1	; 0x0b
     ca2:	1c 86       	std	Y+12, r1	; 0x0c
     ca4:	88 27       	eor	r24, r24
     ca6:	99 27       	eor	r25, r25
     ca8:	8e 1b       	sub	r24, r30
     caa:	9f 0b       	sbc	r25, r31
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <__ashldi3+0x76>
     cae:	44 0f       	add	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	66 1f       	adc	r22, r22
     cb4:	77 1f       	adc	r23, r23
     cb6:	8a 95       	dec	r24
     cb8:	d2 f7       	brpl	.-12     	; 0xcae <__ashldi3+0x6e>
     cba:	28 c0       	rjmp	.+80     	; 0xd0c <__ashldi3+0xcc>
     cbc:	20 2f       	mov	r18, r16
     cbe:	33 27       	eor	r19, r19
     cc0:	27 fd       	sbrc	r18, 7
     cc2:	30 95       	com	r19
     cc4:	db 01       	movw	r26, r22
     cc6:	ca 01       	movw	r24, r20
     cc8:	02 2e       	mov	r0, r18
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <__ashldi3+0x94>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	aa 1f       	adc	r26, r26
     cd2:	bb 1f       	adc	r27, r27
     cd4:	0a 94       	dec	r0
     cd6:	d2 f7       	brpl	.-12     	; 0xccc <__ashldi3+0x8c>
     cd8:	89 87       	std	Y+9, r24	; 0x09
     cda:	9a 87       	std	Y+10, r25	; 0x0a
     cdc:	ab 87       	std	Y+11, r26	; 0x0b
     cde:	bc 87       	std	Y+12, r27	; 0x0c
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__ashldi3+0xaa>
     ce2:	76 95       	lsr	r23
     ce4:	67 95       	ror	r22
     ce6:	57 95       	ror	r21
     ce8:	47 95       	ror	r20
     cea:	ea 95       	dec	r30
     cec:	d2 f7       	brpl	.-12     	; 0xce2 <__ashldi3+0xa2>
     cee:	8d 81       	ldd	r24, Y+5	; 0x05
     cf0:	9e 81       	ldd	r25, Y+6	; 0x06
     cf2:	af 81       	ldd	r26, Y+7	; 0x07
     cf4:	b8 85       	ldd	r27, Y+8	; 0x08
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <__ashldi3+0xc0>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	aa 1f       	adc	r26, r26
     cfe:	bb 1f       	adc	r27, r27
     d00:	2a 95       	dec	r18
     d02:	d2 f7       	brpl	.-12     	; 0xcf8 <__ashldi3+0xb8>
     d04:	48 2b       	or	r20, r24
     d06:	59 2b       	or	r21, r25
     d08:	6a 2b       	or	r22, r26
     d0a:	7b 2b       	or	r23, r27
     d0c:	4d 87       	std	Y+13, r20	; 0x0d
     d0e:	5e 87       	std	Y+14, r21	; 0x0e
     d10:	6f 87       	std	Y+15, r22	; 0x0f
     d12:	78 8b       	std	Y+16, r23	; 0x10
     d14:	29 85       	ldd	r18, Y+9	; 0x09
     d16:	3a 85       	ldd	r19, Y+10	; 0x0a
     d18:	4b 85       	ldd	r20, Y+11	; 0x0b
     d1a:	5c 85       	ldd	r21, Y+12	; 0x0c
     d1c:	6d 85       	ldd	r22, Y+13	; 0x0d
     d1e:	7e 85       	ldd	r23, Y+14	; 0x0e
     d20:	af 85       	ldd	r26, Y+15	; 0x0f
     d22:	98 89       	ldd	r25, Y+16	; 0x10
     d24:	8a 2f       	mov	r24, r26
     d26:	60 96       	adiw	r28, 0x10	; 16
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	08 95       	ret

00000d3e <__clzsi2>:
     d3e:	ef 92       	push	r14
     d40:	ff 92       	push	r15
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	7b 01       	movw	r14, r22
     d48:	8c 01       	movw	r16, r24
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	e8 16       	cp	r14, r24
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	f8 06       	cpc	r15, r24
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	08 07       	cpc	r16, r24
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	18 07       	cpc	r17, r24
     d5a:	88 f4       	brcc	.+34     	; 0xd7e <__clzsi2+0x40>
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	e8 16       	cp	r14, r24
     d60:	f1 04       	cpc	r15, r1
     d62:	01 05       	cpc	r16, r1
     d64:	11 05       	cpc	r17, r1
     d66:	31 f0       	breq	.+12     	; 0xd74 <__clzsi2+0x36>
     d68:	28 f0       	brcs	.+10     	; 0xd74 <__clzsi2+0x36>
     d6a:	88 e0       	ldi	r24, 0x08	; 8
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	a0 e0       	ldi	r26, 0x00	; 0
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	17 c0       	rjmp	.+46     	; 0xda2 <__clzsi2+0x64>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	12 c0       	rjmp	.+36     	; 0xda2 <__clzsi2+0x64>
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	e8 16       	cp	r14, r24
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	f8 06       	cpc	r15, r24
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	08 07       	cpc	r16, r24
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	18 07       	cpc	r17, r24
     d8e:	28 f0       	brcs	.+10     	; 0xd9a <__clzsi2+0x5c>
     d90:	88 e1       	ldi	r24, 0x18	; 24
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	04 c0       	rjmp	.+8      	; 0xda2 <__clzsi2+0x64>
     d9a:	80 e1       	ldi	r24, 0x10	; 16
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	a0 e0       	ldi	r26, 0x00	; 0
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	20 e2       	ldi	r18, 0x20	; 32
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	28 1b       	sub	r18, r24
     dac:	39 0b       	sbc	r19, r25
     dae:	4a 0b       	sbc	r20, r26
     db0:	5b 0b       	sbc	r21, r27
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <__clzsi2+0x7e>
     db4:	16 95       	lsr	r17
     db6:	07 95       	ror	r16
     db8:	f7 94       	ror	r15
     dba:	e7 94       	ror	r14
     dbc:	8a 95       	dec	r24
     dbe:	d2 f7       	brpl	.-12     	; 0xdb4 <__clzsi2+0x76>
     dc0:	f7 01       	movw	r30, r14
     dc2:	ed 57       	subi	r30, 0x7D	; 125
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 81       	ld	r24, Z
     dc8:	28 1b       	sub	r18, r24
     dca:	31 09       	sbc	r19, r1
     dcc:	41 09       	sbc	r20, r1
     dce:	51 09       	sbc	r21, r1
     dd0:	c9 01       	movw	r24, r18
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	08 95       	ret

00000ddc <__pack_f>:
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	fc 01       	movw	r30, r24
     de8:	e4 80       	ldd	r14, Z+4	; 0x04
     dea:	f5 80       	ldd	r15, Z+5	; 0x05
     dec:	06 81       	ldd	r16, Z+6	; 0x06
     dee:	17 81       	ldd	r17, Z+7	; 0x07
     df0:	d1 80       	ldd	r13, Z+1	; 0x01
     df2:	80 81       	ld	r24, Z
     df4:	82 30       	cpi	r24, 0x02	; 2
     df6:	48 f4       	brcc	.+18     	; 0xe0a <__pack_f+0x2e>
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	a0 e1       	ldi	r26, 0x10	; 16
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e8 2a       	or	r14, r24
     e02:	f9 2a       	or	r15, r25
     e04:	0a 2b       	or	r16, r26
     e06:	1b 2b       	or	r17, r27
     e08:	a5 c0       	rjmp	.+330    	; 0xf54 <__pack_f+0x178>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	09 f4       	brne	.+2      	; 0xe10 <__pack_f+0x34>
     e0e:	9f c0       	rjmp	.+318    	; 0xf4e <__pack_f+0x172>
     e10:	82 30       	cpi	r24, 0x02	; 2
     e12:	21 f4       	brne	.+8      	; 0xe1c <__pack_f+0x40>
     e14:	ee 24       	eor	r14, r14
     e16:	ff 24       	eor	r15, r15
     e18:	87 01       	movw	r16, r14
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <__pack_f+0x4a>
     e1c:	e1 14       	cp	r14, r1
     e1e:	f1 04       	cpc	r15, r1
     e20:	01 05       	cpc	r16, r1
     e22:	11 05       	cpc	r17, r1
     e24:	19 f4       	brne	.+6      	; 0xe2c <__pack_f+0x50>
     e26:	e0 e0       	ldi	r30, 0x00	; 0
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	96 c0       	rjmp	.+300    	; 0xf58 <__pack_f+0x17c>
     e2c:	62 81       	ldd	r22, Z+2	; 0x02
     e2e:	73 81       	ldd	r23, Z+3	; 0x03
     e30:	9f ef       	ldi	r25, 0xFF	; 255
     e32:	62 38       	cpi	r22, 0x82	; 130
     e34:	79 07       	cpc	r23, r25
     e36:	0c f0       	brlt	.+2      	; 0xe3a <__pack_f+0x5e>
     e38:	5b c0       	rjmp	.+182    	; 0xef0 <__pack_f+0x114>
     e3a:	22 e8       	ldi	r18, 0x82	; 130
     e3c:	3f ef       	ldi	r19, 0xFF	; 255
     e3e:	26 1b       	sub	r18, r22
     e40:	37 0b       	sbc	r19, r23
     e42:	2a 31       	cpi	r18, 0x1A	; 26
     e44:	31 05       	cpc	r19, r1
     e46:	2c f0       	brlt	.+10     	; 0xe52 <__pack_f+0x76>
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	2a c0       	rjmp	.+84     	; 0xea6 <__pack_f+0xca>
     e52:	b8 01       	movw	r22, r16
     e54:	a7 01       	movw	r20, r14
     e56:	02 2e       	mov	r0, r18
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <__pack_f+0x86>
     e5a:	76 95       	lsr	r23
     e5c:	67 95       	ror	r22
     e5e:	57 95       	ror	r21
     e60:	47 95       	ror	r20
     e62:	0a 94       	dec	r0
     e64:	d2 f7       	brpl	.-12     	; 0xe5a <__pack_f+0x7e>
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a0 e0       	ldi	r26, 0x00	; 0
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	04 c0       	rjmp	.+8      	; 0xe78 <__pack_f+0x9c>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	aa 1f       	adc	r26, r26
     e76:	bb 1f       	adc	r27, r27
     e78:	2a 95       	dec	r18
     e7a:	d2 f7       	brpl	.-12     	; 0xe70 <__pack_f+0x94>
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	a1 09       	sbc	r26, r1
     e80:	b1 09       	sbc	r27, r1
     e82:	8e 21       	and	r24, r14
     e84:	9f 21       	and	r25, r15
     e86:	a0 23       	and	r26, r16
     e88:	b1 23       	and	r27, r17
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	a1 05       	cpc	r26, r1
     e8e:	b1 05       	cpc	r27, r1
     e90:	21 f0       	breq	.+8      	; 0xe9a <__pack_f+0xbe>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	9a 01       	movw	r18, r20
     e9c:	ab 01       	movw	r20, r22
     e9e:	28 2b       	or	r18, r24
     ea0:	39 2b       	or	r19, r25
     ea2:	4a 2b       	or	r20, r26
     ea4:	5b 2b       	or	r21, r27
     ea6:	da 01       	movw	r26, r20
     ea8:	c9 01       	movw	r24, r18
     eaa:	8f 77       	andi	r24, 0x7F	; 127
     eac:	90 70       	andi	r25, 0x00	; 0
     eae:	a0 70       	andi	r26, 0x00	; 0
     eb0:	b0 70       	andi	r27, 0x00	; 0
     eb2:	80 34       	cpi	r24, 0x40	; 64
     eb4:	91 05       	cpc	r25, r1
     eb6:	a1 05       	cpc	r26, r1
     eb8:	b1 05       	cpc	r27, r1
     eba:	39 f4       	brne	.+14     	; 0xeca <__pack_f+0xee>
     ebc:	27 ff       	sbrs	r18, 7
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <__pack_f+0xf6>
     ec0:	20 5c       	subi	r18, 0xC0	; 192
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	4f 4f       	sbci	r20, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	04 c0       	rjmp	.+8      	; 0xed2 <__pack_f+0xf6>
     eca:	21 5c       	subi	r18, 0xC1	; 193
     ecc:	3f 4f       	sbci	r19, 0xFF	; 255
     ece:	4f 4f       	sbci	r20, 0xFF	; 255
     ed0:	5f 4f       	sbci	r21, 0xFF	; 255
     ed2:	e0 e0       	ldi	r30, 0x00	; 0
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	20 30       	cpi	r18, 0x00	; 0
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	3a 07       	cpc	r19, r26
     edc:	a0 e0       	ldi	r26, 0x00	; 0
     ede:	4a 07       	cpc	r20, r26
     ee0:	a0 e4       	ldi	r26, 0x40	; 64
     ee2:	5a 07       	cpc	r21, r26
     ee4:	10 f0       	brcs	.+4      	; 0xeea <__pack_f+0x10e>
     ee6:	e1 e0       	ldi	r30, 0x01	; 1
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	79 01       	movw	r14, r18
     eec:	8a 01       	movw	r16, r20
     eee:	27 c0       	rjmp	.+78     	; 0xf3e <__pack_f+0x162>
     ef0:	60 38       	cpi	r22, 0x80	; 128
     ef2:	71 05       	cpc	r23, r1
     ef4:	64 f5       	brge	.+88     	; 0xf4e <__pack_f+0x172>
     ef6:	fb 01       	movw	r30, r22
     ef8:	e1 58       	subi	r30, 0x81	; 129
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	d8 01       	movw	r26, r16
     efe:	c7 01       	movw	r24, r14
     f00:	8f 77       	andi	r24, 0x7F	; 127
     f02:	90 70       	andi	r25, 0x00	; 0
     f04:	a0 70       	andi	r26, 0x00	; 0
     f06:	b0 70       	andi	r27, 0x00	; 0
     f08:	80 34       	cpi	r24, 0x40	; 64
     f0a:	91 05       	cpc	r25, r1
     f0c:	a1 05       	cpc	r26, r1
     f0e:	b1 05       	cpc	r27, r1
     f10:	39 f4       	brne	.+14     	; 0xf20 <__pack_f+0x144>
     f12:	e7 fe       	sbrs	r14, 7
     f14:	0d c0       	rjmp	.+26     	; 0xf30 <__pack_f+0x154>
     f16:	80 e4       	ldi	r24, 0x40	; 64
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 e0       	ldi	r26, 0x00	; 0
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <__pack_f+0x14c>
     f20:	8f e3       	ldi	r24, 0x3F	; 63
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a0 e0       	ldi	r26, 0x00	; 0
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 0e       	add	r14, r24
     f2a:	f9 1e       	adc	r15, r25
     f2c:	0a 1f       	adc	r16, r26
     f2e:	1b 1f       	adc	r17, r27
     f30:	17 ff       	sbrs	r17, 7
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <__pack_f+0x162>
     f34:	16 95       	lsr	r17
     f36:	07 95       	ror	r16
     f38:	f7 94       	ror	r15
     f3a:	e7 94       	ror	r14
     f3c:	31 96       	adiw	r30, 0x01	; 1
     f3e:	87 e0       	ldi	r24, 0x07	; 7
     f40:	16 95       	lsr	r17
     f42:	07 95       	ror	r16
     f44:	f7 94       	ror	r15
     f46:	e7 94       	ror	r14
     f48:	8a 95       	dec	r24
     f4a:	d1 f7       	brne	.-12     	; 0xf40 <__pack_f+0x164>
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <__pack_f+0x17c>
     f4e:	ee 24       	eor	r14, r14
     f50:	ff 24       	eor	r15, r15
     f52:	87 01       	movw	r16, r14
     f54:	ef ef       	ldi	r30, 0xFF	; 255
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	6e 2f       	mov	r22, r30
     f5a:	67 95       	ror	r22
     f5c:	66 27       	eor	r22, r22
     f5e:	67 95       	ror	r22
     f60:	90 2f       	mov	r25, r16
     f62:	9f 77       	andi	r25, 0x7F	; 127
     f64:	d7 94       	ror	r13
     f66:	dd 24       	eor	r13, r13
     f68:	d7 94       	ror	r13
     f6a:	8e 2f       	mov	r24, r30
     f6c:	86 95       	lsr	r24
     f6e:	49 2f       	mov	r20, r25
     f70:	46 2b       	or	r20, r22
     f72:	58 2f       	mov	r21, r24
     f74:	5d 29       	or	r21, r13
     f76:	b7 01       	movw	r22, r14
     f78:	ca 01       	movw	r24, r20
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	ff 90       	pop	r15
     f80:	ef 90       	pop	r14
     f82:	df 90       	pop	r13
     f84:	08 95       	ret

00000f86 <__unpack_f>:
     f86:	fc 01       	movw	r30, r24
     f88:	db 01       	movw	r26, r22
     f8a:	40 81       	ld	r20, Z
     f8c:	51 81       	ldd	r21, Z+1	; 0x01
     f8e:	22 81       	ldd	r18, Z+2	; 0x02
     f90:	62 2f       	mov	r22, r18
     f92:	6f 77       	andi	r22, 0x7F	; 127
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	22 1f       	adc	r18, r18
     f98:	22 27       	eor	r18, r18
     f9a:	22 1f       	adc	r18, r18
     f9c:	93 81       	ldd	r25, Z+3	; 0x03
     f9e:	89 2f       	mov	r24, r25
     fa0:	88 0f       	add	r24, r24
     fa2:	82 2b       	or	r24, r18
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	99 1f       	adc	r25, r25
     faa:	99 27       	eor	r25, r25
     fac:	99 1f       	adc	r25, r25
     fae:	11 96       	adiw	r26, 0x01	; 1
     fb0:	9c 93       	st	X, r25
     fb2:	11 97       	sbiw	r26, 0x01	; 1
     fb4:	21 15       	cp	r18, r1
     fb6:	31 05       	cpc	r19, r1
     fb8:	a9 f5       	brne	.+106    	; 0x1024 <__unpack_f+0x9e>
     fba:	41 15       	cp	r20, r1
     fbc:	51 05       	cpc	r21, r1
     fbe:	61 05       	cpc	r22, r1
     fc0:	71 05       	cpc	r23, r1
     fc2:	11 f4       	brne	.+4      	; 0xfc8 <__unpack_f+0x42>
     fc4:	82 e0       	ldi	r24, 0x02	; 2
     fc6:	37 c0       	rjmp	.+110    	; 0x1036 <__unpack_f+0xb0>
     fc8:	82 e8       	ldi	r24, 0x82	; 130
     fca:	9f ef       	ldi	r25, 0xFF	; 255
     fcc:	13 96       	adiw	r26, 0x03	; 3
     fce:	9c 93       	st	X, r25
     fd0:	8e 93       	st	-X, r24
     fd2:	12 97       	sbiw	r26, 0x02	; 2
     fd4:	9a 01       	movw	r18, r20
     fd6:	ab 01       	movw	r20, r22
     fd8:	67 e0       	ldi	r22, 0x07	; 7
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	44 1f       	adc	r20, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	6a 95       	dec	r22
     fe4:	d1 f7       	brne	.-12     	; 0xfda <__unpack_f+0x54>
     fe6:	83 e0       	ldi	r24, 0x03	; 3
     fe8:	8c 93       	st	X, r24
     fea:	0d c0       	rjmp	.+26     	; 0x1006 <__unpack_f+0x80>
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	44 1f       	adc	r20, r20
     ff2:	55 1f       	adc	r21, r21
     ff4:	12 96       	adiw	r26, 0x02	; 2
     ff6:	8d 91       	ld	r24, X+
     ff8:	9c 91       	ld	r25, X
     ffa:	13 97       	sbiw	r26, 0x03	; 3
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	13 96       	adiw	r26, 0x03	; 3
    1000:	9c 93       	st	X, r25
    1002:	8e 93       	st	-X, r24
    1004:	12 97       	sbiw	r26, 0x02	; 2
    1006:	20 30       	cpi	r18, 0x00	; 0
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	38 07       	cpc	r19, r24
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	48 07       	cpc	r20, r24
    1010:	80 e4       	ldi	r24, 0x40	; 64
    1012:	58 07       	cpc	r21, r24
    1014:	58 f3       	brcs	.-42     	; 0xfec <__unpack_f+0x66>
    1016:	14 96       	adiw	r26, 0x04	; 4
    1018:	2d 93       	st	X+, r18
    101a:	3d 93       	st	X+, r19
    101c:	4d 93       	st	X+, r20
    101e:	5c 93       	st	X, r21
    1020:	17 97       	sbiw	r26, 0x07	; 7
    1022:	08 95       	ret
    1024:	2f 3f       	cpi	r18, 0xFF	; 255
    1026:	31 05       	cpc	r19, r1
    1028:	79 f4       	brne	.+30     	; 0x1048 <__unpack_f+0xc2>
    102a:	41 15       	cp	r20, r1
    102c:	51 05       	cpc	r21, r1
    102e:	61 05       	cpc	r22, r1
    1030:	71 05       	cpc	r23, r1
    1032:	19 f4       	brne	.+6      	; 0x103a <__unpack_f+0xb4>
    1034:	84 e0       	ldi	r24, 0x04	; 4
    1036:	8c 93       	st	X, r24
    1038:	08 95       	ret
    103a:	64 ff       	sbrs	r22, 4
    103c:	03 c0       	rjmp	.+6      	; 0x1044 <__unpack_f+0xbe>
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	8c 93       	st	X, r24
    1042:	12 c0       	rjmp	.+36     	; 0x1068 <__unpack_f+0xe2>
    1044:	1c 92       	st	X, r1
    1046:	10 c0       	rjmp	.+32     	; 0x1068 <__unpack_f+0xe2>
    1048:	2f 57       	subi	r18, 0x7F	; 127
    104a:	30 40       	sbci	r19, 0x00	; 0
    104c:	13 96       	adiw	r26, 0x03	; 3
    104e:	3c 93       	st	X, r19
    1050:	2e 93       	st	-X, r18
    1052:	12 97       	sbiw	r26, 0x02	; 2
    1054:	83 e0       	ldi	r24, 0x03	; 3
    1056:	8c 93       	st	X, r24
    1058:	87 e0       	ldi	r24, 0x07	; 7
    105a:	44 0f       	add	r20, r20
    105c:	55 1f       	adc	r21, r21
    105e:	66 1f       	adc	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	8a 95       	dec	r24
    1064:	d1 f7       	brne	.-12     	; 0x105a <__unpack_f+0xd4>
    1066:	70 64       	ori	r23, 0x40	; 64
    1068:	14 96       	adiw	r26, 0x04	; 4
    106a:	4d 93       	st	X+, r20
    106c:	5d 93       	st	X+, r21
    106e:	6d 93       	st	X+, r22
    1070:	7c 93       	st	X, r23
    1072:	17 97       	sbiw	r26, 0x07	; 7
    1074:	08 95       	ret

00001076 <__fpcmp_parts_f>:
    1076:	1f 93       	push	r17
    1078:	dc 01       	movw	r26, r24
    107a:	fb 01       	movw	r30, r22
    107c:	9c 91       	ld	r25, X
    107e:	92 30       	cpi	r25, 0x02	; 2
    1080:	08 f4       	brcc	.+2      	; 0x1084 <__fpcmp_parts_f+0xe>
    1082:	47 c0       	rjmp	.+142    	; 0x1112 <__fpcmp_parts_f+0x9c>
    1084:	80 81       	ld	r24, Z
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	08 f4       	brcc	.+2      	; 0x108c <__fpcmp_parts_f+0x16>
    108a:	43 c0       	rjmp	.+134    	; 0x1112 <__fpcmp_parts_f+0x9c>
    108c:	94 30       	cpi	r25, 0x04	; 4
    108e:	51 f4       	brne	.+20     	; 0x10a4 <__fpcmp_parts_f+0x2e>
    1090:	11 96       	adiw	r26, 0x01	; 1
    1092:	1c 91       	ld	r17, X
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	99 f5       	brne	.+102    	; 0x10fe <__fpcmp_parts_f+0x88>
    1098:	81 81       	ldd	r24, Z+1	; 0x01
    109a:	68 2f       	mov	r22, r24
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	61 1b       	sub	r22, r17
    10a0:	71 09       	sbc	r23, r1
    10a2:	3f c0       	rjmp	.+126    	; 0x1122 <__fpcmp_parts_f+0xac>
    10a4:	84 30       	cpi	r24, 0x04	; 4
    10a6:	21 f0       	breq	.+8      	; 0x10b0 <__fpcmp_parts_f+0x3a>
    10a8:	92 30       	cpi	r25, 0x02	; 2
    10aa:	31 f4       	brne	.+12     	; 0x10b8 <__fpcmp_parts_f+0x42>
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	b9 f1       	breq	.+110    	; 0x111e <__fpcmp_parts_f+0xa8>
    10b0:	81 81       	ldd	r24, Z+1	; 0x01
    10b2:	88 23       	and	r24, r24
    10b4:	89 f1       	breq	.+98     	; 0x1118 <__fpcmp_parts_f+0xa2>
    10b6:	2d c0       	rjmp	.+90     	; 0x1112 <__fpcmp_parts_f+0x9c>
    10b8:	11 96       	adiw	r26, 0x01	; 1
    10ba:	1c 91       	ld	r17, X
    10bc:	11 97       	sbiw	r26, 0x01	; 1
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	f1 f0       	breq	.+60     	; 0x10fe <__fpcmp_parts_f+0x88>
    10c2:	81 81       	ldd	r24, Z+1	; 0x01
    10c4:	18 17       	cp	r17, r24
    10c6:	d9 f4       	brne	.+54     	; 0x10fe <__fpcmp_parts_f+0x88>
    10c8:	12 96       	adiw	r26, 0x02	; 2
    10ca:	2d 91       	ld	r18, X+
    10cc:	3c 91       	ld	r19, X
    10ce:	13 97       	sbiw	r26, 0x03	; 3
    10d0:	82 81       	ldd	r24, Z+2	; 0x02
    10d2:	93 81       	ldd	r25, Z+3	; 0x03
    10d4:	82 17       	cp	r24, r18
    10d6:	93 07       	cpc	r25, r19
    10d8:	94 f0       	brlt	.+36     	; 0x10fe <__fpcmp_parts_f+0x88>
    10da:	28 17       	cp	r18, r24
    10dc:	39 07       	cpc	r19, r25
    10de:	bc f0       	brlt	.+46     	; 0x110e <__fpcmp_parts_f+0x98>
    10e0:	14 96       	adiw	r26, 0x04	; 4
    10e2:	8d 91       	ld	r24, X+
    10e4:	9d 91       	ld	r25, X+
    10e6:	0d 90       	ld	r0, X+
    10e8:	bc 91       	ld	r27, X
    10ea:	a0 2d       	mov	r26, r0
    10ec:	24 81       	ldd	r18, Z+4	; 0x04
    10ee:	35 81       	ldd	r19, Z+5	; 0x05
    10f0:	46 81       	ldd	r20, Z+6	; 0x06
    10f2:	57 81       	ldd	r21, Z+7	; 0x07
    10f4:	28 17       	cp	r18, r24
    10f6:	39 07       	cpc	r19, r25
    10f8:	4a 07       	cpc	r20, r26
    10fa:	5b 07       	cpc	r21, r27
    10fc:	18 f4       	brcc	.+6      	; 0x1104 <__fpcmp_parts_f+0x8e>
    10fe:	11 23       	and	r17, r17
    1100:	41 f0       	breq	.+16     	; 0x1112 <__fpcmp_parts_f+0x9c>
    1102:	0a c0       	rjmp	.+20     	; 0x1118 <__fpcmp_parts_f+0xa2>
    1104:	82 17       	cp	r24, r18
    1106:	93 07       	cpc	r25, r19
    1108:	a4 07       	cpc	r26, r20
    110a:	b5 07       	cpc	r27, r21
    110c:	40 f4       	brcc	.+16     	; 0x111e <__fpcmp_parts_f+0xa8>
    110e:	11 23       	and	r17, r17
    1110:	19 f0       	breq	.+6      	; 0x1118 <__fpcmp_parts_f+0xa2>
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	05 c0       	rjmp	.+10     	; 0x1122 <__fpcmp_parts_f+0xac>
    1118:	6f ef       	ldi	r22, 0xFF	; 255
    111a:	7f ef       	ldi	r23, 0xFF	; 255
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <__fpcmp_parts_f+0xac>
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	cb 01       	movw	r24, r22
    1124:	1f 91       	pop	r17
    1126:	08 95       	ret

00001128 <HLCD_voidInit>:
#include "HLCD_private.h"
#include "HLCD_config.h"



void HLCD_voidInit(){
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	2e 97       	sbiw	r28, 0x0e	; 14
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a0 e2       	ldi	r26, 0x20	; 32
    1142:	b2 e4       	ldi	r27, 0x42	; 66
    1144:	8b 87       	std	Y+11, r24	; 0x0b
    1146:	9c 87       	std	Y+12, r25	; 0x0c
    1148:	ad 87       	std	Y+13, r26	; 0x0d
    114a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114c:	6b 85       	ldd	r22, Y+11	; 0x0b
    114e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1150:	8d 85       	ldd	r24, Y+13	; 0x0d
    1152:	9e 85       	ldd	r25, Y+14	; 0x0e
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a ef       	ldi	r20, 0xFA	; 250
    115a:	54 e4       	ldi	r21, 0x44	; 68
    115c:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	8f 83       	std	Y+7, r24	; 0x07
    1166:	98 87       	std	Y+8, r25	; 0x08
    1168:	a9 87       	std	Y+9, r26	; 0x09
    116a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    116c:	6f 81       	ldd	r22, Y+7	; 0x07
    116e:	78 85       	ldd	r23, Y+8	; 0x08
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	9a 85       	ldd	r25, Y+10	; 0x0a
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e8       	ldi	r20, 0x80	; 128
    117a:	5f e3       	ldi	r21, 0x3F	; 63
    117c:	0e 94 c5 04 	call	0x98a	; 0x98a <__ltsf2>
    1180:	88 23       	and	r24, r24
    1182:	2c f4       	brge	.+10     	; 0x118e <HLCD_voidInit+0x66>
		__ticks = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	3f c0       	rjmp	.+126    	; 0x120c <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    118e:	6f 81       	ldd	r22, Y+7	; 0x07
    1190:	78 85       	ldd	r23, Y+8	; 0x08
    1192:	89 85       	ldd	r24, Y+9	; 0x09
    1194:	9a 85       	ldd	r25, Y+10	; 0x0a
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	3f ef       	ldi	r19, 0xFF	; 255
    119a:	4f e7       	ldi	r20, 0x7F	; 127
    119c:	57 e4       	ldi	r21, 0x47	; 71
    119e:	0e 94 65 04 	call	0x8ca	; 0x8ca <__gtsf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	4c f5       	brge	.+82     	; 0x11f8 <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
    11ce:	0f c0       	rjmp	.+30     	; 0x11ee <HLCD_voidInit+0xc6>
    11d0:	88 ec       	ldi	r24, 0xC8	; 200
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <HLCD_voidInit+0xb4>
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	9e 83       	std	Y+6, r25	; 0x06
    11ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <HLCD_voidInit+0xa8>
    11f6:	14 c0       	rjmp	.+40     	; 0x1220 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f8:	6f 81       	ldd	r22, Y+7	; 0x07
    11fa:	78 85       	ldd	r23, Y+8	; 0x08
    11fc:	89 85       	ldd	r24, Y+9	; 0x09
    11fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	9a 83       	std	Y+2, r25	; 0x02
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <HLCD_voidInit+0xf0>
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	HLCD_voidSendCommand(0b00111100); 		// function set
    1220:	8c e3       	ldi	r24, 0x3C	; 60
    1222:	0e 94 c0 09 	call	0x1380	; 0x1380 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0b00001100); 		// display on/off control
    1226:	8c e0       	ldi	r24, 0x0C	; 12
    1228:	0e 94 c0 09 	call	0x1380	; 0x1380 <HLCD_voidSendCommand>
	HLCD_voidSendCommand(0b00000001); 		// clear display
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	0e 94 c0 09 	call	0x1380	; 0x1380 <HLCD_voidSendCommand>

}
    1232:	2e 96       	adiw	r28, 0x0e	; 14
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <HLCD_voidSendData>:
void HLCD_voidSendData(u8 Copy_u8Data){
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	2f 97       	sbiw	r28, 0x0f	; 15
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	8f 87       	std	Y+15, r24	; 0x0f
	/*	SET RS to send data */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_HIGH);
    125a:	84 e0       	ldi	r24, 0x04	; 4
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	0e 94 16 10 	call	0x202c	; 0x202c <MDIO_ErrorS_SetPinValue>
	/*	CLR RS to Enable write */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);
    1264:	84 e0       	ldi	r24, 0x04	; 4
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	0e 94 16 10 	call	0x202c	; 0x202c <MDIO_ErrorS_SetPinValue>
	/*Send Data */
	MDIO_ErrorS_SetPortValue(LCD_PORT_DATA,Copy_u8Data);
    126e:	83 e0       	ldi	r24, 0x03	; 3
    1270:	6f 85       	ldd	r22, Y+15	; 0x0f
    1272:	0e 94 b6 11 	call	0x236c	; 0x236c <MDIO_ErrorS_SetPortValue>
	/* set EN for 2ms to make LCD CPU reads the data  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    1276:	84 e0       	ldi	r24, 0x04	; 4
    1278:	62 e0       	ldi	r22, 0x02	; 2
    127a:	41 e0       	ldi	r20, 0x01	; 1
    127c:	0e 94 16 10 	call	0x202c	; 0x202c <MDIO_ErrorS_SetPinValue>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a0 e0       	ldi	r26, 0x00	; 0
    1286:	b0 e4       	ldi	r27, 0x40	; 64
    1288:	8b 87       	std	Y+11, r24	; 0x0b
    128a:	9c 87       	std	Y+12, r25	; 0x0c
    128c:	ad 87       	std	Y+13, r26	; 0x0d
    128e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1290:	6b 85       	ldd	r22, Y+11	; 0x0b
    1292:	7c 85       	ldd	r23, Y+12	; 0x0c
    1294:	8d 85       	ldd	r24, Y+13	; 0x0d
    1296:	9e 85       	ldd	r25, Y+14	; 0x0e
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	4a ef       	ldi	r20, 0xFA	; 250
    129e:	54 e4       	ldi	r21, 0x44	; 68
    12a0:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	8f 83       	std	Y+7, r24	; 0x07
    12aa:	98 87       	std	Y+8, r25	; 0x08
    12ac:	a9 87       	std	Y+9, r26	; 0x09
    12ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b0:	6f 81       	ldd	r22, Y+7	; 0x07
    12b2:	78 85       	ldd	r23, Y+8	; 0x08
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e8       	ldi	r20, 0x80	; 128
    12be:	5f e3       	ldi	r21, 0x3F	; 63
    12c0:	0e 94 c5 04 	call	0x98a	; 0x98a <__ltsf2>
    12c4:	88 23       	and	r24, r24
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
    12d0:	3f c0       	rjmp	.+126    	; 0x1350 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    12d2:	6f 81       	ldd	r22, Y+7	; 0x07
    12d4:	78 85       	ldd	r23, Y+8	; 0x08
    12d6:	89 85       	ldd	r24, Y+9	; 0x09
    12d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	3f ef       	ldi	r19, 0xFF	; 255
    12de:	4f e7       	ldi	r20, 0x7F	; 127
    12e0:	57 e4       	ldi	r21, 0x47	; 71
    12e2:	0e 94 65 04 	call	0x8ca	; 0x8ca <__gtsf2>
    12e6:	18 16       	cp	r1, r24
    12e8:	4c f5       	brge	.+82     	; 0x133c <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e2       	ldi	r20, 0x20	; 32
    12f8:	51 e4       	ldi	r21, 0x41	; 65
    12fa:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	0f c0       	rjmp	.+30     	; 0x1332 <HLCD_voidSendData+0xee>
    1314:	88 ec       	ldi	r24, 0xC8	; 200
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <HLCD_voidSendData+0xdc>
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	69 f7       	brne	.-38     	; 0x1314 <HLCD_voidSendData+0xd0>
    133a:	14 c0       	rjmp	.+40     	; 0x1364 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133c:	6f 81       	ldd	r22, Y+7	; 0x07
    133e:	78 85       	ldd	r23, Y+8	; 0x08
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	9e 83       	std	Y+6, r25	; 0x06
    134e:	8d 83       	std	Y+5, r24	; 0x05
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <HLCD_voidSendData+0x118>
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    1364:	84 e0       	ldi	r24, 0x04	; 4
    1366:	62 e0       	ldi	r22, 0x02	; 2
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	0e 94 16 10 	call	0x202c	; 0x202c <MDIO_ErrorS_SetPinValue>



}
    136e:	2f 96       	adiw	r28, 0x0f	; 15
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	08 95       	ret

00001380 <HLCD_voidSendCommand>:
void HLCD_voidSendCommand(u8 Copy_u8Command){
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	2f 97       	sbiw	r28, 0x0f	; 15
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	8f 87       	std	Y+15, r24	; 0x0f

	/*	CLR RS to send command */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RS,DIO_LOW);
    1396:	84 e0       	ldi	r24, 0x04	; 4
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	40 e0       	ldi	r20, 0x00	; 0
    139c:	0e 94 16 10 	call	0x202c	; 0x202c <MDIO_ErrorS_SetPinValue>

	/*	CLR RS to Enable write */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_RW,DIO_LOW);
    13a0:	84 e0       	ldi	r24, 0x04	; 4
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	40 e0       	ldi	r20, 0x00	; 0
    13a6:	0e 94 16 10 	call	0x202c	; 0x202c <MDIO_ErrorS_SetPinValue>

	/*Send Command */
	MDIO_ErrorS_SetPortValue(LCD_PORT_DATA,Copy_u8Command);
    13aa:	83 e0       	ldi	r24, 0x03	; 3
    13ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    13ae:	0e 94 b6 11 	call	0x236c	; 0x236c <MDIO_ErrorS_SetPortValue>

	/* set EN for 2ms to make LCD CPU reads the command  */
	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_HIGH);
    13b2:	84 e0       	ldi	r24, 0x04	; 4
    13b4:	62 e0       	ldi	r22, 0x02	; 2
    13b6:	41 e0       	ldi	r20, 0x01	; 1
    13b8:	0e 94 16 10 	call	0x202c	; 0x202c <MDIO_ErrorS_SetPinValue>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a0 e0       	ldi	r26, 0x00	; 0
    13c2:	b0 e4       	ldi	r27, 0x40	; 64
    13c4:	8b 87       	std	Y+11, r24	; 0x0b
    13c6:	9c 87       	std	Y+12, r25	; 0x0c
    13c8:	ad 87       	std	Y+13, r26	; 0x0d
    13ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	4a ef       	ldi	r20, 0xFA	; 250
    13da:	54 e4       	ldi	r21, 0x44	; 68
    13dc:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	8f 83       	std	Y+7, r24	; 0x07
    13e6:	98 87       	std	Y+8, r25	; 0x08
    13e8:	a9 87       	std	Y+9, r26	; 0x09
    13ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ec:	6f 81       	ldd	r22, Y+7	; 0x07
    13ee:	78 85       	ldd	r23, Y+8	; 0x08
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e8       	ldi	r20, 0x80	; 128
    13fa:	5f e3       	ldi	r21, 0x3F	; 63
    13fc:	0e 94 c5 04 	call	0x98a	; 0x98a <__ltsf2>
    1400:	88 23       	and	r24, r24
    1402:	2c f4       	brge	.+10     	; 0x140e <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9e 83       	std	Y+6, r25	; 0x06
    140a:	8d 83       	std	Y+5, r24	; 0x05
    140c:	3f c0       	rjmp	.+126    	; 0x148c <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    140e:	6f 81       	ldd	r22, Y+7	; 0x07
    1410:	78 85       	ldd	r23, Y+8	; 0x08
    1412:	89 85       	ldd	r24, Y+9	; 0x09
    1414:	9a 85       	ldd	r25, Y+10	; 0x0a
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	3f ef       	ldi	r19, 0xFF	; 255
    141a:	4f e7       	ldi	r20, 0x7F	; 127
    141c:	57 e4       	ldi	r21, 0x47	; 71
    141e:	0e 94 65 04 	call	0x8ca	; 0x8ca <__gtsf2>
    1422:	18 16       	cp	r1, r24
    1424:	4c f5       	brge	.+82     	; 0x1478 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1426:	6b 85       	ldd	r22, Y+11	; 0x0b
    1428:	7c 85       	ldd	r23, Y+12	; 0x0c
    142a:	8d 85       	ldd	r24, Y+13	; 0x0d
    142c:	9e 85       	ldd	r25, Y+14	; 0x0e
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	51 e4       	ldi	r21, 0x41	; 65
    1436:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	9e 83       	std	Y+6, r25	; 0x06
    144c:	8d 83       	std	Y+5, r24	; 0x05
    144e:	0f c0       	rjmp	.+30     	; 0x146e <HLCD_voidSendCommand+0xee>
    1450:	88 ec       	ldi	r24, 0xC8	; 200
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9c 83       	std	Y+4, r25	; 0x04
    1456:	8b 83       	std	Y+3, r24	; 0x03
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <HLCD_voidSendCommand+0xdc>
    1460:	9c 83       	std	Y+4, r25	; 0x04
    1462:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	69 f7       	brne	.-38     	; 0x1450 <HLCD_voidSendCommand+0xd0>
    1476:	14 c0       	rjmp	.+40     	; 0x14a0 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1478:	6f 81       	ldd	r22, Y+7	; 0x07
    147a:	78 85       	ldd	r23, Y+8	; 0x08
    147c:	89 85       	ldd	r24, Y+9	; 0x09
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <HLCD_voidSendCommand+0x118>
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	MDIO_ErrorS_SetPinValue(LCD_PORT_CTRL,LCD_EN,DIO_LOW);
    14a0:	84 e0       	ldi	r24, 0x04	; 4
    14a2:	62 e0       	ldi	r22, 0x02	; 2
    14a4:	40 e0       	ldi	r20, 0x00	; 0
    14a6:	0e 94 16 10 	call	0x202c	; 0x202c <MDIO_ErrorS_SetPinValue>

}
    14aa:	2f 96       	adiw	r28, 0x0f	; 15
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <HLCD_voidSendString>:


void HLCD_voidSendString(s8 Copy_u8Data[]){
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <HLCD_voidSendString+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <HLCD_voidSendString+0x8>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	9c 83       	std	Y+4, r25	; 0x04
    14ca:	8b 83       	std	Y+3, r24	; 0x03
	int i = 0 ;
    14cc:	1a 82       	std	Y+2, r1	; 0x02
    14ce:	19 82       	std	Y+1, r1	; 0x01
    14d0:	0f c0       	rjmp	.+30     	; 0x14f0 <HLCD_voidSendString+0x34>
	while (Copy_u8Data[i]!='\0'){
		HLCD_voidSendData(Copy_u8Data[i]);
    14d2:	29 81       	ldd	r18, Y+1	; 0x01
    14d4:	3a 81       	ldd	r19, Y+2	; 0x02
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	fc 01       	movw	r30, r24
    14dc:	e2 0f       	add	r30, r18
    14de:	f3 1f       	adc	r31, r19
    14e0:	80 81       	ld	r24, Z
    14e2:	0e 94 22 09 	call	0x1244	; 0x1244 <HLCD_voidSendData>
		i++;
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	9a 83       	std	Y+2, r25	; 0x02
    14ee:	89 83       	std	Y+1, r24	; 0x01
}


void HLCD_voidSendString(s8 Copy_u8Data[]){
	int i = 0 ;
	while (Copy_u8Data[i]!='\0'){
    14f0:	29 81       	ldd	r18, Y+1	; 0x01
    14f2:	3a 81       	ldd	r19, Y+2	; 0x02
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	fc 01       	movw	r30, r24
    14fa:	e2 0f       	add	r30, r18
    14fc:	f3 1f       	adc	r31, r19
    14fe:	80 81       	ld	r24, Z
    1500:	88 23       	and	r24, r24
    1502:	39 f7       	brne	.-50     	; 0x14d2 <HLCD_voidSendString+0x16>
		HLCD_voidSendData(Copy_u8Data[i]);
		i++;
	}
}
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <HLCD_voidSendInt>:

void HLCD_voidSendInt(s32 Copy_u32Data){
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	68 97       	sbiw	r28, 0x18	; 24
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	de bf       	out	0x3e, r29	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	cd bf       	out	0x3d, r28	; 61
    1526:	6d 8b       	std	Y+21, r22	; 0x15
    1528:	7e 8b       	std	Y+22, r23	; 0x16
    152a:	8f 8b       	std	Y+23, r24	; 0x17
    152c:	98 8f       	std	Y+24, r25	; 0x18
	s8 s[20];
		itoa(Copy_u32Data, s, 10);
    152e:	8d 89       	ldd	r24, Y+21	; 0x15
    1530:	9e 89       	ldd	r25, Y+22	; 0x16
    1532:	9e 01       	movw	r18, r28
    1534:	2f 5f       	subi	r18, 0xFF	; 255
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	b9 01       	movw	r22, r18
    153a:	4a e0       	ldi	r20, 0x0A	; 10
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <itoa>
		HLCD_voidSendString(s);
    1542:	ce 01       	movw	r24, r28
    1544:	01 96       	adiw	r24, 0x01	; 1
    1546:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <HLCD_voidSendString>
}
    154a:	68 96       	adiw	r28, 0x18	; 24
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay(){
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000001);
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	0e 94 c0 09 	call	0x1380	; 0x1380 <HLCD_voidSendCommand>
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <HLCD_voidReturnHome>:

void HLCD_voidReturnHome(){
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(0b00000010);
    1578:	82 e0       	ldi	r24, 0x02	; 2
    157a:	0e 94 c0 09 	call	0x1380	; 0x1380 <HLCD_voidSendCommand>
}
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <HLCD_voidSetCursorPosition>:

void HLCD_voidSetCursorPosition(u8 x , u8 y){
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <HLCD_voidSetCursorPosition+0x6>
    158a:	0f 92       	push	r0
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	8a 83       	std	Y+2, r24	; 0x02
    1592:	6b 83       	std	Y+3, r22	; 0x03
	u8 command = 0b10000000;
    1594:	80 e8       	ldi	r24, 0x80	; 128
    1596:	89 83       	std	Y+1, r24	; 0x01
	if (x == 2) command  |=0x40 ;
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	82 30       	cpi	r24, 0x02	; 2
    159c:	19 f4       	brne	.+6      	; 0x15a4 <HLCD_voidSetCursorPosition+0x20>
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	80 64       	ori	r24, 0x40	; 64
    15a2:	89 83       	std	Y+1, r24	; 0x01
	command  +=y ;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9b 81       	ldd	r25, Y+3	; 0x03
    15a8:	89 0f       	add	r24, r25
    15aa:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand(command);
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	0e 94 c0 09 	call	0x1380	; 0x1380 <HLCD_voidSendCommand>
}
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <HLDR_u16GetRead>:
#include "MADC_interface.h"
#include "HLDR_interface.h"
#include "HLDR_private.h"
#include "HLDR_config.h"

u16 HLDR_u16GetRead(void){
    15be:	cf 92       	push	r12
    15c0:	df 92       	push	r13
    15c2:	ef 92       	push	r14
    15c4:	ff 92       	push	r15
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	df 93       	push	r29
    15cc:	cf 93       	push	r28
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <HLDR_u16GetRead+0x12>
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62

	u16 Lux = MADC_u16GetValue(HLDR_ADC_ChANNEL);
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <MADC_u16GetValue>
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	89 83       	std	Y+1, r24	; 0x01
    Lux		= MADC_s32Mapping(HLDR_MAX_LUX,HLDR_MINI_LUX,HLDR_MAX_DIGIT_VAL,HLDR_MINI_DIGIT_VAL,Lux);
    15de:	e9 81       	ldd	r30, Y+1	; 0x01
    15e0:	fa 81       	ldd	r31, Y+2	; 0x02
    15e2:	60 e1       	ldi	r22, 0x10	; 16
    15e4:	77 e2       	ldi	r23, 0x27	; 39
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	0f ef       	ldi	r16, 0xFF	; 255
    15f4:	13 e0       	ldi	r17, 0x03	; 3
    15f6:	ee 24       	eor	r14, r14
    15f8:	ff 24       	eor	r15, r15
    15fa:	6f 01       	movw	r12, r30
    15fc:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <MADC_s32Mapping>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
	return Lux;
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	ff 90       	pop	r15
    161a:	ef 90       	pop	r14
    161c:	df 90       	pop	r13
    161e:	cf 90       	pop	r12
    1620:	08 95       	ret

00001622 <HServo_voidSetAngle>:
 * sonfig this part as
 * simulation: DUTY: 2000:1000 while ADC_s32Mapped_Servo and HServo_voidSetAngleSimulation takes from 90:90-
 * real      : DUTY: 2550:450  while ADC_s32Mapped_Servo and HServo_voidSetAngle			 takes from 180:0
 * */

void HServo_voidSetAngle(u32 Copy_u8Angle){
    1622:	af 92       	push	r10
    1624:	bf 92       	push	r11
    1626:	cf 92       	push	r12
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	2c 97       	sbiw	r28, 0x0c	; 12
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	69 87       	std	Y+9, r22	; 0x09
    1648:	7a 87       	std	Y+10, r23	; 0x0a
    164a:	8b 87       	std	Y+11, r24	; 0x0b
    164c:	9c 87       	std	Y+12, r25	; 0x0c

	u64 duty = MAX_DUTY - ((f64)((MAX_DUTY - MINI_DUTY)*(MAX_ANGLE - Copy_u8Angle))/(f64)(MAX_ANGLE - MINI_ANGLE));
    164e:	24 eb       	ldi	r18, 0xB4	; 180
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	ab 85       	ldd	r26, Y+11	; 0x0b
    165c:	bc 85       	ldd	r27, Y+12	; 0x0c
    165e:	79 01       	movw	r14, r18
    1660:	8a 01       	movw	r16, r20
    1662:	e8 1a       	sub	r14, r24
    1664:	f9 0a       	sbc	r15, r25
    1666:	0a 0b       	sbc	r16, r26
    1668:	1b 0b       	sbc	r17, r27
    166a:	d8 01       	movw	r26, r16
    166c:	c7 01       	movw	r24, r14
    166e:	28 ee       	ldi	r18, 0xE8	; 232
    1670:	33 e0       	ldi	r19, 0x03	; 3
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	bc 01       	movw	r22, r24
    1678:	cd 01       	movw	r24, r26
    167a:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__mulsi3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__floatunsisf>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	44 e3       	ldi	r20, 0x34	; 52
    1698:	53 ec       	ldi	r21, 0xC3	; 195
    169a:	0e 94 b9 03 	call	0x772	; 0x772 <__divsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a ef       	ldi	r20, 0xFA	; 250
    16ac:	54 e4       	ldi	r21, 0x44	; 68
    16ae:	0e 94 92 02 	call	0x524	; 0x524 <__addsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 6d 00 	call	0xda	; 0xda <__fixunssfdi>
    16be:	a2 2e       	mov	r10, r18
    16c0:	b3 2e       	mov	r11, r19
    16c2:	c4 2e       	mov	r12, r20
    16c4:	d5 2e       	mov	r13, r21
    16c6:	e6 2e       	mov	r14, r22
    16c8:	f7 2e       	mov	r15, r23
    16ca:	08 2f       	mov	r16, r24
    16cc:	19 2f       	mov	r17, r25
    16ce:	a9 82       	std	Y+1, r10	; 0x01
    16d0:	ba 82       	std	Y+2, r11	; 0x02
    16d2:	cb 82       	std	Y+3, r12	; 0x03
    16d4:	dc 82       	std	Y+4, r13	; 0x04
    16d6:	ed 82       	std	Y+5, r14	; 0x05
    16d8:	fe 82       	std	Y+6, r15	; 0x06
    16da:	0f 83       	std	Y+7, r16	; 0x07
    16dc:	18 87       	std	Y+8, r17	; 0x08

#if SERVO_PIN == PD5_OC1A
	MTIMER1_voidSetDutyCycle(duty);
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <MTIMER1_voidSetDutyCycle>
#elif SERVO_PIN == PD4_OC1B
#elif SERVO_PIN == PD7_OC2
#elif SERVO_PIN == PB3_OC0
#endif
}
    16e6:	2c 96       	adiw	r28, 0x0c	; 12
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	ff 90       	pop	r15
    16fc:	ef 90       	pop	r14
    16fe:	df 90       	pop	r13
    1700:	cf 90       	pop	r12
    1702:	bf 90       	pop	r11
    1704:	af 90       	pop	r10
    1706:	08 95       	ret

00001708 <HServo_voidSetAngleSimulation>:


void HServo_voidSetAngleSimulation(s32 Copy_u8Angle){
    1708:	af 92       	push	r10
    170a:	bf 92       	push	r11
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	2c 97       	sbiw	r28, 0x0c	; 12
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	69 87       	std	Y+9, r22	; 0x09
    172e:	7a 87       	std	Y+10, r23	; 0x0a
    1730:	8b 87       	std	Y+11, r24	; 0x0b
    1732:	9c 87       	std	Y+12, r25	; 0x0c
	Copy_u8Angle+= 90;
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	ab 85       	ldd	r26, Y+11	; 0x0b
    173a:	bc 85       	ldd	r27, Y+12	; 0x0c
    173c:	86 5a       	subi	r24, 0xA6	; 166
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	af 4f       	sbci	r26, 0xFF	; 255
    1742:	bf 4f       	sbci	r27, 0xFF	; 255
    1744:	89 87       	std	Y+9, r24	; 0x09
    1746:	9a 87       	std	Y+10, r25	; 0x0a
    1748:	ab 87       	std	Y+11, r26	; 0x0b
    174a:	bc 87       	std	Y+12, r27	; 0x0c

	u64 duty = MAX_DUTY - ((f64)((MAX_DUTY - MINI_DUTY)*(MAX_ANGLE - Copy_u8Angle))/(f64)(MAX_ANGLE - MINI_ANGLE));
    174c:	24 eb       	ldi	r18, 0xB4	; 180
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	89 85       	ldd	r24, Y+9	; 0x09
    1756:	9a 85       	ldd	r25, Y+10	; 0x0a
    1758:	ab 85       	ldd	r26, Y+11	; 0x0b
    175a:	bc 85       	ldd	r27, Y+12	; 0x0c
    175c:	79 01       	movw	r14, r18
    175e:	8a 01       	movw	r16, r20
    1760:	e8 1a       	sub	r14, r24
    1762:	f9 0a       	sbc	r15, r25
    1764:	0a 0b       	sbc	r16, r26
    1766:	1b 0b       	sbc	r17, r27
    1768:	d8 01       	movw	r26, r16
    176a:	c7 01       	movw	r24, r14
    176c:	28 ee       	ldi	r18, 0xE8	; 232
    176e:	33 e0       	ldi	r19, 0x03	; 3
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	50 e0       	ldi	r21, 0x00	; 0
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	0e 94 5a 16 	call	0x2cb4	; 0x2cb4 <__mulsi3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatsisf>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	bc 01       	movw	r22, r24
    178e:	cd 01       	movw	r24, r26
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	44 e3       	ldi	r20, 0x34	; 52
    1796:	53 ec       	ldi	r21, 0xC3	; 195
    1798:	0e 94 b9 03 	call	0x772	; 0x772 <__divsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4a ef       	ldi	r20, 0xFA	; 250
    17aa:	54 e4       	ldi	r21, 0x44	; 68
    17ac:	0e 94 92 02 	call	0x524	; 0x524 <__addsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 6d 00 	call	0xda	; 0xda <__fixunssfdi>
    17bc:	a2 2e       	mov	r10, r18
    17be:	b3 2e       	mov	r11, r19
    17c0:	c4 2e       	mov	r12, r20
    17c2:	d5 2e       	mov	r13, r21
    17c4:	e6 2e       	mov	r14, r22
    17c6:	f7 2e       	mov	r15, r23
    17c8:	08 2f       	mov	r16, r24
    17ca:	19 2f       	mov	r17, r25
    17cc:	a9 82       	std	Y+1, r10	; 0x01
    17ce:	ba 82       	std	Y+2, r11	; 0x02
    17d0:	cb 82       	std	Y+3, r12	; 0x03
    17d2:	dc 82       	std	Y+4, r13	; 0x04
    17d4:	ed 82       	std	Y+5, r14	; 0x05
    17d6:	fe 82       	std	Y+6, r15	; 0x06
    17d8:	0f 83       	std	Y+7, r16	; 0x07
    17da:	18 87       	std	Y+8, r17	; 0x08

#if SERVO_PIN == PD5_OC1A
	MTIMER1_voidSetDutyCycle(duty);
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <MTIMER1_voidSetDutyCycle>
#elif SERVO_PIN == PD4_OC1B
#elif SERVO_PIN == PD7_OC2
#elif SERVO_PIN == PB3_OC0
#endif
}
    17e4:	2c 96       	adiw	r28, 0x0c	; 12
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	cf 90       	pop	r12
    1800:	bf 90       	pop	r11
    1802:	af 90       	pop	r10
    1804:	08 95       	ret

00001806 <MADC_ErrorStateInit>:
#include "util/delay.h"
#include "MADC_interface.h"
#include "MADC_register.h"
#include "MADC_private.h"
#include "MADC_config.h"
Error_State_t MADC_ErrorStateInit(u8 Copy_u8VReferencetype,u8 Copy_u8Prescale, u8 Copy_u8Adjastment){
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	2a 97       	sbiw	r28, 0x0a	; 10
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	8a 83       	std	Y+2, r24	; 0x02
    181c:	6b 83       	std	Y+3, r22	; 0x03
    181e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    1820:	19 82       	std	Y+1, r1	; 0x01
	//setting refrence volt
	switch (Copy_u8VReferencetype) {
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	3a 87       	std	Y+10, r19	; 0x0a
    182a:	29 87       	std	Y+9, r18	; 0x09
    182c:	89 85       	ldd	r24, Y+9	; 0x09
    182e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	c1 f0       	breq	.+48     	; 0x1866 <MADC_ErrorStateInit+0x60>
    1836:	29 85       	ldd	r18, Y+9	; 0x09
    1838:	3a 85       	ldd	r19, Y+10	; 0x0a
    183a:	23 30       	cpi	r18, 0x03	; 3
    183c:	31 05       	cpc	r19, r1
    183e:	11 f1       	breq	.+68     	; 0x1884 <MADC_ErrorStateInit+0x7e>
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	9a 85       	ldd	r25, Y+10	; 0x0a
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	69 f5       	brne	.+90     	; 0x18a2 <MADC_ErrorStateInit+0x9c>
	case ADC_AREF :
			//AREF and turned off Internal Vref
			CLR_BIT(ADMUX,ADMUX_REFS1);
    1848:	a7 e2       	ldi	r26, 0x27	; 39
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e7 e2       	ldi	r30, 0x27	; 39
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	8f 77       	andi	r24, 0x7F	; 127
    1854:	8c 93       	st	X, r24
			CLR_BIT(ADMUX,ADMUX_REFS0);
    1856:	a7 e2       	ldi	r26, 0x27	; 39
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e7 e2       	ldi	r30, 0x27	; 39
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8f 7b       	andi	r24, 0xBF	; 191
    1862:	8c 93       	st	X, r24
    1864:	20 c0       	rjmp	.+64     	; 0x18a6 <MADC_ErrorStateInit+0xa0>
			break;
	case ADC_VREF_VCC :
			// AVCC with capacitor at AREF pin
	 		CLR_BIT(ADMUX,ADMUX_REFS1);
    1866:	a7 e2       	ldi	r26, 0x27	; 39
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e7 e2       	ldi	r30, 0x27	; 39
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8f 77       	andi	r24, 0x7F	; 127
    1872:	8c 93       	st	X, r24
			SET_BIT(ADMUX,ADMUX_REFS0);
    1874:	a7 e2       	ldi	r26, 0x27	; 39
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e7 e2       	ldi	r30, 0x27	; 39
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	80 64       	ori	r24, 0x40	; 64
    1880:	8c 93       	st	X, r24
    1882:	11 c0       	rjmp	.+34     	; 0x18a6 <MADC_ErrorStateInit+0xa0>
			break;
	case ADC_INTERNAL_256mv :
			// Internal 2.56V Voltage Reference with external capacitor at AREF pin
			SET_BIT(ADMUX,ADMUX_REFS1);
    1884:	a7 e2       	ldi	r26, 0x27	; 39
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e7 e2       	ldi	r30, 0x27	; 39
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 68       	ori	r24, 0x80	; 128
    1890:	8c 93       	st	X, r24
			SET_BIT(ADMUX,ADMUX_REFS0);
    1892:	a7 e2       	ldi	r26, 0x27	; 39
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e7 e2       	ldi	r30, 0x27	; 39
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	80 64       	ori	r24, 0x40	; 64
    189e:	8c 93       	st	X, r24
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <MADC_ErrorStateInit+0xa0>
			break;
	default : errorState = return_Nok;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
		switch (Copy_u8Adjastment) {
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	38 87       	std	Y+8, r19	; 0x08
    18ae:	2f 83       	std	Y+7, r18	; 0x07
    18b0:	8f 81       	ldd	r24, Y+7	; 0x07
    18b2:	98 85       	ldd	r25, Y+8	; 0x08
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	31 f0       	breq	.+12     	; 0x18c4 <MADC_ErrorStateInit+0xbe>
    18b8:	2f 81       	ldd	r18, Y+7	; 0x07
    18ba:	38 85       	ldd	r19, Y+8	; 0x08
    18bc:	21 30       	cpi	r18, 0x01	; 1
    18be:	31 05       	cpc	r19, r1
    18c0:	49 f0       	breq	.+18     	; 0x18d4 <MADC_ErrorStateInit+0xce>
    18c2:	10 c0       	rjmp	.+32     	; 0x18e4 <MADC_ErrorStateInit+0xde>
		case ADC_RIGHT_ADJUSTMENT : 	CLR_BIT(ADMUX,ADMUX_ADLAR);	break;
    18c4:	a7 e2       	ldi	r26, 0x27	; 39
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e7 e2       	ldi	r30, 0x27	; 39
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8f 7d       	andi	r24, 0xDF	; 223
    18d0:	8c 93       	st	X, r24
    18d2:	0a c0       	rjmp	.+20     	; 0x18e8 <MADC_ErrorStateInit+0xe2>
		case ADC_LEFT_ADJUSTMENT  :		SET_BIT(ADMUX,ADMUX_ADLAR);	break;
    18d4:	a7 e2       	ldi	r26, 0x27	; 39
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e7 e2       	ldi	r30, 0x27	; 39
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	80 62       	ori	r24, 0x20	; 32
    18e0:	8c 93       	st	X, r24
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <MADC_ErrorStateInit+0xe2>
		default: errorState = return_Nok;							break;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	89 83       	std	Y+1, r24	; 0x01
			ADC_PRESCALER_DIV32		5
			ADC_PRESCALER_DIV64		6
			ADC_PRESCALER_DIV128	7
		 * */
		//prescaler devetion by 32
		switch(Copy_u8Prescale){
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	3e 83       	std	Y+6, r19	; 0x06
    18f0:	2d 83       	std	Y+5, r18	; 0x05
    18f2:	8d 81       	ldd	r24, Y+5	; 0x05
    18f4:	9e 81       	ldd	r25, Y+6	; 0x06
    18f6:	84 30       	cpi	r24, 0x04	; 4
    18f8:	91 05       	cpc	r25, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <MADC_ErrorStateInit+0xf8>
    18fc:	6b c0       	rjmp	.+214    	; 0x19d4 <MADC_ErrorStateInit+0x1ce>
    18fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1900:	3e 81       	ldd	r19, Y+6	; 0x06
    1902:	25 30       	cpi	r18, 0x05	; 5
    1904:	31 05       	cpc	r19, r1
    1906:	8c f4       	brge	.+34     	; 0x192a <MADC_ErrorStateInit+0x124>
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	82 30       	cpi	r24, 0x02	; 2
    190e:	91 05       	cpc	r25, r1
    1910:	a9 f1       	breq	.+106    	; 0x197c <MADC_ErrorStateInit+0x176>
    1912:	2d 81       	ldd	r18, Y+5	; 0x05
    1914:	3e 81       	ldd	r19, Y+6	; 0x06
    1916:	23 30       	cpi	r18, 0x03	; 3
    1918:	31 05       	cpc	r19, r1
    191a:	0c f0       	brlt	.+2      	; 0x191e <MADC_ErrorStateInit+0x118>
    191c:	45 c0       	rjmp	.+138    	; 0x19a8 <MADC_ErrorStateInit+0x1a2>
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	9e 81       	ldd	r25, Y+6	; 0x06
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	91 05       	cpc	r25, r1
    1926:	a1 f0       	breq	.+40     	; 0x1950 <MADC_ErrorStateInit+0x14a>
    1928:	ad c0       	rjmp	.+346    	; 0x1a84 <MADC_ErrorStateInit+0x27e>
    192a:	2d 81       	ldd	r18, Y+5	; 0x05
    192c:	3e 81       	ldd	r19, Y+6	; 0x06
    192e:	26 30       	cpi	r18, 0x06	; 6
    1930:	31 05       	cpc	r19, r1
    1932:	09 f4       	brne	.+2      	; 0x1936 <MADC_ErrorStateInit+0x130>
    1934:	7b c0       	rjmp	.+246    	; 0x1a2c <MADC_ErrorStateInit+0x226>
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	9e 81       	ldd	r25, Y+6	; 0x06
    193a:	86 30       	cpi	r24, 0x06	; 6
    193c:	91 05       	cpc	r25, r1
    193e:	0c f4       	brge	.+2      	; 0x1942 <MADC_ErrorStateInit+0x13c>
    1940:	5f c0       	rjmp	.+190    	; 0x1a00 <MADC_ErrorStateInit+0x1fa>
    1942:	2d 81       	ldd	r18, Y+5	; 0x05
    1944:	3e 81       	ldd	r19, Y+6	; 0x06
    1946:	27 30       	cpi	r18, 0x07	; 7
    1948:	31 05       	cpc	r19, r1
    194a:	09 f4       	brne	.+2      	; 0x194e <MADC_ErrorStateInit+0x148>
    194c:	85 c0       	rjmp	.+266    	; 0x1a58 <MADC_ErrorStateInit+0x252>
    194e:	9a c0       	rjmp	.+308    	; 0x1a84 <MADC_ErrorStateInit+0x27e>
		case ADC_PRESCALER_DIV2:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    1950:	a6 e2       	ldi	r26, 0x26	; 38
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	e6 e2       	ldi	r30, 0x26	; 38
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	81 60       	ori	r24, 0x01	; 1
    195c:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    195e:	a6 e2       	ldi	r26, 0x26	; 38
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e6 e2       	ldi	r30, 0x26	; 38
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8d 7f       	andi	r24, 0xFD	; 253
    196a:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    196c:	a6 e2       	ldi	r26, 0x26	; 38
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e6 e2       	ldi	r30, 0x26	; 38
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8b 7f       	andi	r24, 0xFB	; 251
    1978:	8c 93       	st	X, r24
    197a:	86 c0       	rjmp	.+268    	; 0x1a88 <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV4:
			CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    197c:	a6 e2       	ldi	r26, 0x26	; 38
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e6 e2       	ldi	r30, 0x26	; 38
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8e 7f       	andi	r24, 0xFE	; 254
    1988:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    198a:	a6 e2       	ldi	r26, 0x26	; 38
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e6 e2       	ldi	r30, 0x26	; 38
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	82 60       	ori	r24, 0x02	; 2
    1996:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    1998:	a6 e2       	ldi	r26, 0x26	; 38
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e6 e2       	ldi	r30, 0x26	; 38
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8b 7f       	andi	r24, 0xFB	; 251
    19a4:	8c 93       	st	X, r24
    19a6:	70 c0       	rjmp	.+224    	; 0x1a88 <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV8:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    19a8:	a6 e2       	ldi	r26, 0x26	; 38
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e6 e2       	ldi	r30, 0x26	; 38
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	81 60       	ori	r24, 0x01	; 1
    19b4:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    19b6:	a6 e2       	ldi	r26, 0x26	; 38
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e6 e2       	ldi	r30, 0x26	; 38
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	82 60       	ori	r24, 0x02	; 2
    19c2:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS2);
    19c4:	a6 e2       	ldi	r26, 0x26	; 38
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e6 e2       	ldi	r30, 0x26	; 38
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	8b 7f       	andi	r24, 0xFB	; 251
    19d0:	8c 93       	st	X, r24
    19d2:	5a c0       	rjmp	.+180    	; 0x1a88 <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV16:
			CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    19d4:	a6 e2       	ldi	r26, 0x26	; 38
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e6 e2       	ldi	r30, 0x26	; 38
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8e 7f       	andi	r24, 0xFE	; 254
    19e0:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    19e2:	a6 e2       	ldi	r26, 0x26	; 38
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e6 e2       	ldi	r30, 0x26	; 38
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	8d 7f       	andi	r24, 0xFD	; 253
    19ee:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    19f0:	a6 e2       	ldi	r26, 0x26	; 38
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e6 e2       	ldi	r30, 0x26	; 38
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	84 60       	ori	r24, 0x04	; 4
    19fc:	8c 93       	st	X, r24
    19fe:	44 c0       	rjmp	.+136    	; 0x1a88 <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV32:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    1a00:	a6 e2       	ldi	r26, 0x26	; 38
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e6 e2       	ldi	r30, 0x26	; 38
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	81 60       	ori	r24, 0x01	; 1
    1a0c:	8c 93       	st	X, r24
			CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    1a0e:	a6 e2       	ldi	r26, 0x26	; 38
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e6 e2       	ldi	r30, 0x26	; 38
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8d 7f       	andi	r24, 0xFD	; 253
    1a1a:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    1a1c:	a6 e2       	ldi	r26, 0x26	; 38
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e6 e2       	ldi	r30, 0x26	; 38
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	84 60       	ori	r24, 0x04	; 4
    1a28:	8c 93       	st	X, r24
    1a2a:	2e c0       	rjmp	.+92     	; 0x1a88 <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV64:
			CLR_BIT(ADCSRA,ADCSRA_ADPS0);
    1a2c:	a6 e2       	ldi	r26, 0x26	; 38
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e6 e2       	ldi	r30, 0x26	; 38
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	8e 7f       	andi	r24, 0xFE	; 254
    1a38:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    1a3a:	a6 e2       	ldi	r26, 0x26	; 38
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e6 e2       	ldi	r30, 0x26	; 38
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	82 60       	ori	r24, 0x02	; 2
    1a46:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    1a48:	a6 e2       	ldi	r26, 0x26	; 38
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e6 e2       	ldi	r30, 0x26	; 38
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	84 60       	ori	r24, 0x04	; 4
    1a54:	8c 93       	st	X, r24
    1a56:	18 c0       	rjmp	.+48     	; 0x1a88 <MADC_ErrorStateInit+0x282>
			break;
		case ADC_PRESCALER_DIV128:
			SET_BIT(ADCSRA,ADCSRA_ADPS0);
    1a58:	a6 e2       	ldi	r26, 0x26	; 38
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e6 e2       	ldi	r30, 0x26	; 38
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	81 60       	ori	r24, 0x01	; 1
    1a64:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS1);
    1a66:	a6 e2       	ldi	r26, 0x26	; 38
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e6 e2       	ldi	r30, 0x26	; 38
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	82 60       	ori	r24, 0x02	; 2
    1a72:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADPS2);
    1a74:	a6 e2       	ldi	r26, 0x26	; 38
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e6 e2       	ldi	r30, 0x26	; 38
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	84 60       	ori	r24, 0x04	; 4
    1a80:	8c 93       	st	X, r24
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <MADC_ErrorStateInit+0x282>
			break;
		default: errorState = return_Nok;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	89 83       	std	Y+1, r24	; 0x01
		}

		//enable ADC
		SET_BIT(ADCSRA,ADCSRA_ADEN);
    1a88:	a6 e2       	ldi	r26, 0x26	; 38
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	e6 e2       	ldi	r30, 0x26	; 38
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	80 68       	ori	r24, 0x80	; 128
    1a94:	8c 93       	st	X, r24
		return errorState;
    1a96:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a98:	2a 96       	adiw	r28, 0x0a	; 10
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <MADC_voidInitDefault>:
void MADC_voidInitDefault(void){
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62

	//setting refrence volt internal
	CLR_BIT(ADMUX,ADMUX_REFS1);
    1ab2:	a7 e2       	ldi	r26, 0x27	; 39
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e7 e2       	ldi	r30, 0x27	; 39
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	8f 77       	andi	r24, 0x7F	; 127
    1abe:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    1ac0:	a7 e2       	ldi	r26, 0x27	; 39
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e7 e2       	ldi	r30, 0x27	; 39
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	80 64       	ori	r24, 0x40	; 64
    1acc:	8c 93       	st	X, r24

	//setting adjust right
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    1ace:	a7 e2       	ldi	r26, 0x27	; 39
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e7 e2       	ldi	r30, 0x27	; 39
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8f 7d       	andi	r24, 0xDF	; 223
    1ada:	8c 93       	st	X, r24

	//prescaler devetion by 32
	SET_BIT(ADCSRA,ADCSRA_ADPS0);
    1adc:	a6 e2       	ldi	r26, 0x26	; 38
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e6 e2       	ldi	r30, 0x26	; 38
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	81 60       	ori	r24, 0x01	; 1
    1ae8:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADCSRA_ADPS1);
    1aea:	a6 e2       	ldi	r26, 0x26	; 38
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e6 e2       	ldi	r30, 0x26	; 38
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	8d 7f       	andi	r24, 0xFD	; 253
    1af6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
    1af8:	a6 e2       	ldi	r26, 0x26	; 38
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e6 e2       	ldi	r30, 0x26	; 38
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	84 60       	ori	r24, 0x04	; 4
    1b04:	8c 93       	st	X, r24

	//enable ADC
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1b06:	a6 e2       	ldi	r26, 0x26	; 38
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	e6 e2       	ldi	r30, 0x26	; 38
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	80 68       	ori	r24, 0x80	; 128
    1b12:	8c 93       	st	X, r24

}
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <MADC_u16GetValue>:
u16 MADC_u16GetValue(u8 Copy_u8AdcChannel){
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	0f 92       	push	r0
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	89 83       	std	Y+1, r24	; 0x01
	//clearing selection bits in order to choose
	ADMUX &= 0b11100000 ;
    1b26:	a7 e2       	ldi	r26, 0x27	; 39
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e7 e2       	ldi	r30, 0x27	; 39
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	80 7e       	andi	r24, 0xE0	; 224
    1b32:	8c 93       	st	X, r24
	// selceting chunnle
	ADMUX |= Copy_u8AdcChannel;
    1b34:	a7 e2       	ldi	r26, 0x27	; 39
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e7 e2       	ldi	r30, 0x27	; 39
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	90 81       	ld	r25, Z
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	89 2b       	or	r24, r25
    1b42:	8c 93       	st	X, r24
	// ADC start convertion
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1b44:	a6 e2       	ldi	r26, 0x26	; 38
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e6 e2       	ldi	r30, 0x26	; 38
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	80 64       	ori	r24, 0x40	; 64
    1b50:	8c 93       	st	X, r24

	// busy wait until finish
	while ((GET_BIT(ADCSRA,ADCSRA_ADIF) == 0));
    1b52:	e6 e2       	ldi	r30, 0x26	; 38
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	82 95       	swap	r24
    1b5a:	8f 70       	andi	r24, 0x0F	; 15
    1b5c:	88 2f       	mov	r24, r24
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	81 70       	andi	r24, 0x01	; 1
    1b62:	90 70       	andi	r25, 0x00	; 0
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	a9 f3       	breq	.-22     	; 0x1b52 <MADC_u16GetValue+0x38>
		// clear flag
		SET_BIT(ADCSRA,ADCSRA_ADIF);
    1b68:	a6 e2       	ldi	r26, 0x26	; 38
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e6 e2       	ldi	r30, 0x26	; 38
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	80 61       	ori	r24, 0x10	; 16
    1b74:	8c 93       	st	X, r24

	return ADC_DATA_REG;
    1b76:	e4 e2       	ldi	r30, 0x24	; 36
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	91 81       	ldd	r25, Z+1	; 0x01

}
    1b7e:	0f 90       	pop	r0
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

00001b86 <MADC_s32Mapping>:

s32 MADC_s32Mapping(s32 Copy_s32MaxOut ,s32 Copy_s32MiniOut,u16 Copy_u16MaxDigitalSensorRead , u16 Copy_u16MiniDigitalSensorRead ,u16 Copy_u16DigitalSensorRead)
{
    1b86:	cf 92       	push	r12
    1b88:	df 92       	push	r13
    1b8a:	ef 92       	push	r14
    1b8c:	ff 92       	push	r15
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	62 97       	sbiw	r28, 0x12	; 18
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	6d 83       	std	Y+5, r22	; 0x05
    1ba8:	7e 83       	std	Y+6, r23	; 0x06
    1baa:	8f 83       	std	Y+7, r24	; 0x07
    1bac:	98 87       	std	Y+8, r25	; 0x08
    1bae:	29 87       	std	Y+9, r18	; 0x09
    1bb0:	3a 87       	std	Y+10, r19	; 0x0a
    1bb2:	4b 87       	std	Y+11, r20	; 0x0b
    1bb4:	5c 87       	std	Y+12, r21	; 0x0c
    1bb6:	1e 87       	std	Y+14, r17	; 0x0e
    1bb8:	0d 87       	std	Y+13, r16	; 0x0d
    1bba:	f8 8a       	std	Y+16, r15	; 0x10
    1bbc:	ef 86       	std	Y+15, r14	; 0x0f
    1bbe:	da 8a       	std	Y+18, r13	; 0x12
    1bc0:	c9 8a       	std	Y+17, r12	; 0x11
	s32 X;
	X =(s32) (( (f64) (  (f64) (Copy_s32MaxOut - Copy_s32MiniOut) * ((Copy_u16DigitalSensorRead-Copy_u16MiniDigitalSensorRead) )/ (f64)( Copy_u16MaxDigitalSensorRead -Copy_u16MiniDigitalSensorRead)) + Copy_s32MiniOut) + 1);
    1bc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1bc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1bc6:	4f 81       	ldd	r20, Y+7	; 0x07
    1bc8:	58 85       	ldd	r21, Y+8	; 0x08
    1bca:	89 85       	ldd	r24, Y+9	; 0x09
    1bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bce:	ab 85       	ldd	r26, Y+11	; 0x0b
    1bd0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1bd2:	79 01       	movw	r14, r18
    1bd4:	8a 01       	movw	r16, r20
    1bd6:	e8 1a       	sub	r14, r24
    1bd8:	f9 0a       	sbc	r15, r25
    1bda:	0a 0b       	sbc	r16, r26
    1bdc:	1b 0b       	sbc	r17, r27
    1bde:	d8 01       	movw	r26, r16
    1be0:	c7 01       	movw	r24, r14
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatsisf>
    1bea:	7b 01       	movw	r14, r22
    1bec:	8c 01       	movw	r16, r24
    1bee:	29 89       	ldd	r18, Y+17	; 0x11
    1bf0:	3a 89       	ldd	r19, Y+18	; 0x12
    1bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf4:	98 89       	ldd	r25, Y+16	; 0x10
    1bf6:	a9 01       	movw	r20, r18
    1bf8:	48 1b       	sub	r20, r24
    1bfa:	59 0b       	sbc	r21, r25
    1bfc:	ca 01       	movw	r24, r20
    1bfe:	cc 01       	movw	r24, r24
    1c00:	a0 e0       	ldi	r26, 0x00	; 0
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__floatunsisf>
    1c0c:	9b 01       	movw	r18, r22
    1c0e:	ac 01       	movw	r20, r24
    1c10:	c8 01       	movw	r24, r16
    1c12:	b7 01       	movw	r22, r14
    1c14:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	7c 01       	movw	r14, r24
    1c1e:	8d 01       	movw	r16, r26
    1c20:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c22:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c26:	98 89       	ldd	r25, Y+16	; 0x10
    1c28:	a9 01       	movw	r20, r18
    1c2a:	48 1b       	sub	r20, r24
    1c2c:	59 0b       	sbc	r21, r25
    1c2e:	ca 01       	movw	r24, r20
    1c30:	cc 01       	movw	r24, r24
    1c32:	a0 e0       	ldi	r26, 0x00	; 0
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__floatunsisf>
    1c3e:	9b 01       	movw	r18, r22
    1c40:	ac 01       	movw	r20, r24
    1c42:	c8 01       	movw	r24, r16
    1c44:	b7 01       	movw	r22, r14
    1c46:	0e 94 b9 03 	call	0x772	; 0x772 <__divsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	7c 01       	movw	r14, r24
    1c50:	8d 01       	movw	r16, r26
    1c52:	69 85       	ldd	r22, Y+9	; 0x09
    1c54:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c56:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c58:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c5a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatsisf>
    1c5e:	9b 01       	movw	r18, r22
    1c60:	ac 01       	movw	r20, r24
    1c62:	c8 01       	movw	r24, r16
    1c64:	b7 01       	movw	r22, r14
    1c66:	0e 94 92 02 	call	0x524	; 0x524 <__addsf3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 92 02 	call	0x524	; 0x524 <__addsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fixsfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	ab 83       	std	Y+3, r26	; 0x03
    1c94:	bc 83       	std	Y+4, r27	; 0x04
	return X ;
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	ab 81       	ldd	r26, Y+3	; 0x03
    1c9c:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	62 96       	adiw	r28, 0x12	; 18
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	df 90       	pop	r13
    1cbc:	cf 90       	pop	r12
    1cbe:	08 95       	ret

00001cc0 <Port_voidInit>:
#include "MDIO_interface.h"
#include "MDIO_registers.h"
#include "MDIO_private.h"
#include "MDIO_config.h"

void Port_voidInit(void){
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62

	DDRA = PORTA_DIR;
    1cc8:	ea e3       	ldi	r30, 0x3A	; 58
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	87 ef       	ldi	r24, 0xF7	; 247
    1cce:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1cd0:	e7 e3       	ldi	r30, 0x37	; 55
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1cd8:	e4 e3       	ldi	r30, 0x34	; 52
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8f ef       	ldi	r24, 0xFF	; 255
    1cde:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1ce0:	e1 e3       	ldi	r30, 0x31	; 49
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	8f ef       	ldi	r24, 0xFF	; 255
    1ce6:	80 83       	st	Z, r24
	PORTA = PORTA_INITAL_VAL;
    1ce8:	eb e3       	ldi	r30, 0x3B	; 59
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	10 82       	st	Z, r1
	PORTB = PORTB_INITAL_VAL;
    1cee:	e8 e3       	ldi	r30, 0x38	; 56
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	10 82       	st	Z, r1
	PORTC = PORTC_INITAL_VAL;
    1cf4:	e5 e3       	ldi	r30, 0x35	; 53
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	10 82       	st	Z, r1
	PORTD = PORTD_INITAL_VAL;
    1cfa:	e2 e3       	ldi	r30, 0x32	; 50
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	10 82       	st	Z, r1





}
    1d00:	cf 91       	pop	r28
    1d02:	df 91       	pop	r29
    1d04:	08 95       	ret

00001d06 <MDIO_ErrorS_EnablePinPullUp>:
Error_State_t MDIO_ErrorS_EnablePinPullUp( u8 Copy_u8Port , u8 Copy_u8Pin){
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <MDIO_ErrorS_EnablePinPullUp+0x6>
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <MDIO_ErrorS_EnablePinPullUp+0x8>
    1d0e:	0f 92       	push	r0
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	8a 83       	std	Y+2, r24	; 0x02
    1d16:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    1d18:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin > 7){
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	88 30       	cpi	r24, 0x08	; 8
    1d1e:	10 f0       	brcs	.+4      	; 0x1d24 <MDIO_ErrorS_EnablePinPullUp+0x1e>
		errorState = return_Nok;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	89 83       	std	Y+1, r24	; 0x01
	}

	SFIOR &= ~(1<<2);
    1d24:	a0 e5       	ldi	r26, 0x50	; 80
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e0 e5       	ldi	r30, 0x50	; 80
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8b 7f       	andi	r24, 0xFB	; 251
    1d30:	8c 93       	st	X, r24
	switch (Copy_u8Port){
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	3d 83       	std	Y+5, r19	; 0x05
    1d3a:	2c 83       	std	Y+4, r18	; 0x04
    1d3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d40:	82 30       	cpi	r24, 0x02	; 2
    1d42:	91 05       	cpc	r25, r1
    1d44:	51 f1       	breq	.+84     	; 0x1d9a <MDIO_ErrorS_EnablePinPullUp+0x94>
    1d46:	2c 81       	ldd	r18, Y+4	; 0x04
    1d48:	3d 81       	ldd	r19, Y+5	; 0x05
    1d4a:	23 30       	cpi	r18, 0x03	; 3
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	34 f4       	brge	.+12     	; 0x1d5c <MDIO_ErrorS_EnablePinPullUp+0x56>
    1d50:	8c 81       	ldd	r24, Y+4	; 0x04
    1d52:	9d 81       	ldd	r25, Y+5	; 0x05
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	91 05       	cpc	r25, r1
    1d58:	61 f0       	breq	.+24     	; 0x1d72 <MDIO_ErrorS_EnablePinPullUp+0x6c>
    1d5a:	5b c0       	rjmp	.+182    	; 0x1e12 <MDIO_ErrorS_EnablePinPullUp+0x10c>
    1d5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1d60:	23 30       	cpi	r18, 0x03	; 3
    1d62:	31 05       	cpc	r19, r1
    1d64:	71 f1       	breq	.+92     	; 0x1dc2 <MDIO_ErrorS_EnablePinPullUp+0xbc>
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6a:	84 30       	cpi	r24, 0x04	; 4
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	e9 f1       	breq	.+122    	; 0x1dea <MDIO_ErrorS_EnablePinPullUp+0xe4>
    1d70:	50 c0       	rjmp	.+160    	; 0x1e12 <MDIO_ErrorS_EnablePinPullUp+0x10c>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    1d72:	ab e3       	ldi	r26, 0x3B	; 59
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	eb e3       	ldi	r30, 0x3B	; 59
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <MDIO_ErrorS_EnablePinPullUp+0x8a>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <MDIO_ErrorS_EnablePinPullUp+0x86>
    1d94:	84 2b       	or	r24, r20
    1d96:	8c 93       	st	X, r24
    1d98:	3e c0       	rjmp	.+124    	; 0x1e16 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    1d9a:	a8 e3       	ldi	r26, 0x38	; 56
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e8 e3       	ldi	r30, 0x38	; 56
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <MDIO_ErrorS_EnablePinPullUp+0xb2>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <MDIO_ErrorS_EnablePinPullUp+0xae>
    1dbc:	84 2b       	or	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	2a c0       	rjmp	.+84     	; 0x1e16 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    1dc2:	a5 e3       	ldi	r26, 0x35	; 53
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e3       	ldi	r30, 0x35	; 53
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 2e       	mov	r0, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <MDIO_ErrorS_EnablePinPullUp+0xda>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <MDIO_ErrorS_EnablePinPullUp+0xd6>
    1de4:	84 2b       	or	r24, r20
    1de6:	8c 93       	st	X, r24
    1de8:	16 c0       	rjmp	.+44     	; 0x1e16 <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    1dea:	a2 e3       	ldi	r26, 0x32	; 50
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e2 e3       	ldi	r30, 0x32	; 50
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	48 2f       	mov	r20, r24
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	02 2e       	mov	r0, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <MDIO_ErrorS_EnablePinPullUp+0x102>
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	0a 94       	dec	r0
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <MDIO_ErrorS_EnablePinPullUp+0xfe>
    1e0c:	84 2b       	or	r24, r20
    1e0e:	8c 93       	st	X, r24
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <MDIO_ErrorS_EnablePinPullUp+0x110>
					default: errorState = return_Nok; break;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	89 83       	std	Y+1, r24	; 0x01
				}
	return errorState;
    1e16:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	27 97       	sbiw	r28, 0x07	; 7
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	6a 83       	std	Y+2, r22	; 0x02
    1e40:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_U8Mode == DIO_INPUT){
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	88 23       	and	r24, r24
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <MDIO_voidSetPinDirection+0x22>
    1e48:	75 c0       	rjmp	.+234    	; 0x1f34 <MDIO_voidSetPinDirection+0x10c>
			switch (Copy_u8Port){
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	3f 83       	std	Y+7, r19	; 0x07
    1e52:	2e 83       	std	Y+6, r18	; 0x06
    1e54:	8e 81       	ldd	r24, Y+6	; 0x06
    1e56:	9f 81       	ldd	r25, Y+7	; 0x07
    1e58:	82 30       	cpi	r24, 0x02	; 2
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	61 f1       	breq	.+88     	; 0x1eb6 <MDIO_voidSetPinDirection+0x8e>
    1e5e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e60:	3f 81       	ldd	r19, Y+7	; 0x07
    1e62:	23 30       	cpi	r18, 0x03	; 3
    1e64:	31 05       	cpc	r19, r1
    1e66:	34 f4       	brge	.+12     	; 0x1e74 <MDIO_voidSetPinDirection+0x4c>
    1e68:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	91 05       	cpc	r25, r1
    1e70:	69 f0       	breq	.+26     	; 0x1e8c <MDIO_voidSetPinDirection+0x64>
    1e72:	d3 c0       	rjmp	.+422    	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
    1e74:	2e 81       	ldd	r18, Y+6	; 0x06
    1e76:	3f 81       	ldd	r19, Y+7	; 0x07
    1e78:	23 30       	cpi	r18, 0x03	; 3
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	89 f1       	breq	.+98     	; 0x1ee0 <MDIO_voidSetPinDirection+0xb8>
    1e7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e80:	9f 81       	ldd	r25, Y+7	; 0x07
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	91 05       	cpc	r25, r1
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <MDIO_voidSetPinDirection+0x62>
    1e88:	40 c0       	rjmp	.+128    	; 0x1f0a <MDIO_voidSetPinDirection+0xe2>
    1e8a:	c7 c0       	rjmp	.+398    	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin);break;
    1e8c:	aa e3       	ldi	r26, 0x3A	; 58
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	ea e3       	ldi	r30, 0x3A	; 58
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	48 2f       	mov	r20, r24
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	02 2e       	mov	r0, r18
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <MDIO_voidSetPinDirection+0x82>
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	0a 94       	dec	r0
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <MDIO_voidSetPinDirection+0x7e>
    1eae:	80 95       	com	r24
    1eb0:	84 23       	and	r24, r20
    1eb2:	8c 93       	st	X, r24
    1eb4:	b2 c0       	rjmp	.+356    	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin);break;
    1eb6:	a7 e3       	ldi	r26, 0x37	; 55
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e7 e3       	ldi	r30, 0x37	; 55
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	48 2f       	mov	r20, r24
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	02 2e       	mov	r0, r18
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <MDIO_voidSetPinDirection+0xac>
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	0a 94       	dec	r0
    1ed6:	e2 f7       	brpl	.-8      	; 0x1ed0 <MDIO_voidSetPinDirection+0xa8>
    1ed8:	80 95       	com	r24
    1eda:	84 23       	and	r24, r20
    1edc:	8c 93       	st	X, r24
    1ede:	9d c0       	rjmp	.+314    	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin);break;
    1ee0:	a4 e3       	ldi	r26, 0x34	; 52
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	e4 e3       	ldi	r30, 0x34	; 52
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	48 2f       	mov	r20, r24
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	02 2e       	mov	r0, r18
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <MDIO_voidSetPinDirection+0xd6>
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	0a 94       	dec	r0
    1f00:	e2 f7       	brpl	.-8      	; 0x1efa <MDIO_voidSetPinDirection+0xd2>
    1f02:	80 95       	com	r24
    1f04:	84 23       	and	r24, r20
    1f06:	8c 93       	st	X, r24
    1f08:	88 c0       	rjmp	.+272    	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin);break;
    1f0a:	a1 e3       	ldi	r26, 0x31	; 49
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e1 e3       	ldi	r30, 0x31	; 49
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	48 2f       	mov	r20, r24
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	02 2e       	mov	r0, r18
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <MDIO_voidSetPinDirection+0x100>
    1f24:	88 0f       	add	r24, r24
    1f26:	99 1f       	adc	r25, r25
    1f28:	0a 94       	dec	r0
    1f2a:	e2 f7       	brpl	.-8      	; 0x1f24 <MDIO_voidSetPinDirection+0xfc>
    1f2c:	80 95       	com	r24
    1f2e:	84 23       	and	r24, r20
    1f30:	8c 93       	st	X, r24
    1f32:	73 c0       	rjmp	.+230    	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
				default: break;
			}

	}
	else if(Copy_U8Mode == DIO_OUTPUT){
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <MDIO_voidSetPinDirection+0x114>
    1f3a:	6f c0       	rjmp	.+222    	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
			switch (Copy_u8Port){
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	3d 83       	std	Y+5, r19	; 0x05
    1f44:	2c 83       	std	Y+4, r18	; 0x04
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4a:	82 30       	cpi	r24, 0x02	; 2
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	51 f1       	breq	.+84     	; 0x1fa4 <MDIO_voidSetPinDirection+0x17c>
    1f50:	2c 81       	ldd	r18, Y+4	; 0x04
    1f52:	3d 81       	ldd	r19, Y+5	; 0x05
    1f54:	23 30       	cpi	r18, 0x03	; 3
    1f56:	31 05       	cpc	r19, r1
    1f58:	34 f4       	brge	.+12     	; 0x1f66 <MDIO_voidSetPinDirection+0x13e>
    1f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	91 05       	cpc	r25, r1
    1f62:	61 f0       	breq	.+24     	; 0x1f7c <MDIO_voidSetPinDirection+0x154>
    1f64:	5a c0       	rjmp	.+180    	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
    1f66:	2c 81       	ldd	r18, Y+4	; 0x04
    1f68:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6a:	23 30       	cpi	r18, 0x03	; 3
    1f6c:	31 05       	cpc	r19, r1
    1f6e:	71 f1       	breq	.+92     	; 0x1fcc <MDIO_voidSetPinDirection+0x1a4>
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	9d 81       	ldd	r25, Y+5	; 0x05
    1f74:	84 30       	cpi	r24, 0x04	; 4
    1f76:	91 05       	cpc	r25, r1
    1f78:	e9 f1       	breq	.+122    	; 0x1ff4 <MDIO_voidSetPinDirection+0x1cc>
    1f7a:	4f c0       	rjmp	.+158    	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin);break;
    1f7c:	aa e3       	ldi	r26, 0x3A	; 58
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	ea e3       	ldi	r30, 0x3A	; 58
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	48 2f       	mov	r20, r24
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	02 2e       	mov	r0, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <MDIO_voidSetPinDirection+0x172>
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	0a 94       	dec	r0
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <MDIO_voidSetPinDirection+0x16e>
    1f9e:	84 2b       	or	r24, r20
    1fa0:	8c 93       	st	X, r24
    1fa2:	3b c0       	rjmp	.+118    	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin);break;
    1fa4:	a7 e3       	ldi	r26, 0x37	; 55
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e7 e3       	ldi	r30, 0x37	; 55
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <MDIO_voidSetPinDirection+0x19a>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <MDIO_voidSetPinDirection+0x196>
    1fc6:	84 2b       	or	r24, r20
    1fc8:	8c 93       	st	X, r24
    1fca:	27 c0       	rjmp	.+78     	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin);break;
    1fcc:	a4 e3       	ldi	r26, 0x34	; 52
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e4 e3       	ldi	r30, 0x34	; 52
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <MDIO_voidSetPinDirection+0x1c2>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <MDIO_voidSetPinDirection+0x1be>
    1fee:	84 2b       	or	r24, r20
    1ff0:	8c 93       	st	X, r24
    1ff2:	13 c0       	rjmp	.+38     	; 0x201a <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin);break;
    1ff4:	a1 e3       	ldi	r26, 0x31	; 49
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e1 e3       	ldi	r30, 0x31	; 49
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	48 2f       	mov	r20, r24
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	02 2e       	mov	r0, r18
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <MDIO_voidSetPinDirection+0x1ea>
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	0a 94       	dec	r0
    2014:	e2 f7       	brpl	.-8      	; 0x200e <MDIO_voidSetPinDirection+0x1e6>
    2016:	84 2b       	or	r24, r20
    2018:	8c 93       	st	X, r24
				default: break;
			}
	}

}
    201a:	27 96       	adiw	r28, 0x07	; 7
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <MDIO_ErrorS_SetPinValue>:
Error_State_t MDIO_ErrorS_SetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    202c:	df 93       	push	r29
    202e:	cf 93       	push	r28
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	28 97       	sbiw	r28, 0x08	; 8
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	de bf       	out	0x3e, r29	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	cd bf       	out	0x3d, r28	; 61
    2040:	8a 83       	std	Y+2, r24	; 0x02
    2042:	6b 83       	std	Y+3, r22	; 0x03
    2044:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    2046:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	88 30       	cpi	r24, 0x08	; 8
    204c:	10 f0       	brcs	.+4      	; 0x2052 <MDIO_ErrorS_SetPinValue+0x26>
		errorState = return_Nok;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	89 83       	std	Y+1, r24	; 0x01
	}

	if(Copy_U8Mode == DIO_LOW){
    2052:	8c 81       	ldd	r24, Y+4	; 0x04
    2054:	88 23       	and	r24, r24
    2056:	09 f0       	breq	.+2      	; 0x205a <MDIO_ErrorS_SetPinValue+0x2e>
    2058:	78 c0       	rjmp	.+240    	; 0x214a <MDIO_ErrorS_SetPinValue+0x11e>
				switch (Copy_u8Port){
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	38 87       	std	Y+8, r19	; 0x08
    2062:	2f 83       	std	Y+7, r18	; 0x07
    2064:	8f 81       	ldd	r24, Y+7	; 0x07
    2066:	98 85       	ldd	r25, Y+8	; 0x08
    2068:	82 30       	cpi	r24, 0x02	; 2
    206a:	91 05       	cpc	r25, r1
    206c:	61 f1       	breq	.+88     	; 0x20c6 <MDIO_ErrorS_SetPinValue+0x9a>
    206e:	2f 81       	ldd	r18, Y+7	; 0x07
    2070:	38 85       	ldd	r19, Y+8	; 0x08
    2072:	23 30       	cpi	r18, 0x03	; 3
    2074:	31 05       	cpc	r19, r1
    2076:	34 f4       	brge	.+12     	; 0x2084 <MDIO_ErrorS_SetPinValue+0x58>
    2078:	8f 81       	ldd	r24, Y+7	; 0x07
    207a:	98 85       	ldd	r25, Y+8	; 0x08
    207c:	81 30       	cpi	r24, 0x01	; 1
    207e:	91 05       	cpc	r25, r1
    2080:	69 f0       	breq	.+26     	; 0x209c <MDIO_ErrorS_SetPinValue+0x70>
    2082:	60 c0       	rjmp	.+192    	; 0x2144 <MDIO_ErrorS_SetPinValue+0x118>
    2084:	2f 81       	ldd	r18, Y+7	; 0x07
    2086:	38 85       	ldd	r19, Y+8	; 0x08
    2088:	23 30       	cpi	r18, 0x03	; 3
    208a:	31 05       	cpc	r19, r1
    208c:	89 f1       	breq	.+98     	; 0x20f0 <MDIO_ErrorS_SetPinValue+0xc4>
    208e:	8f 81       	ldd	r24, Y+7	; 0x07
    2090:	98 85       	ldd	r25, Y+8	; 0x08
    2092:	84 30       	cpi	r24, 0x04	; 4
    2094:	91 05       	cpc	r25, r1
    2096:	09 f4       	brne	.+2      	; 0x209a <MDIO_ErrorS_SetPinValue+0x6e>
    2098:	40 c0       	rjmp	.+128    	; 0x211a <MDIO_ErrorS_SetPinValue+0xee>
    209a:	54 c0       	rjmp	.+168    	; 0x2144 <MDIO_ErrorS_SetPinValue+0x118>
					case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin);break;
    209c:	ab e3       	ldi	r26, 0x3B	; 59
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	eb e3       	ldi	r30, 0x3B	; 59
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	48 2f       	mov	r20, r24
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 2e       	mov	r0, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <MDIO_ErrorS_SetPinValue+0x8e>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0a 94       	dec	r0
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <MDIO_ErrorS_SetPinValue+0x8a>
    20be:	80 95       	com	r24
    20c0:	84 23       	and	r24, r20
    20c2:	8c 93       	st	X, r24
    20c4:	b8 c0       	rjmp	.+368    	; 0x2236 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin);break;
    20c6:	a8 e3       	ldi	r26, 0x38	; 56
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e8 e3       	ldi	r30, 0x38	; 56
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	48 2f       	mov	r20, r24
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	02 2e       	mov	r0, r18
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <MDIO_ErrorS_SetPinValue+0xb8>
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	0a 94       	dec	r0
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <MDIO_ErrorS_SetPinValue+0xb4>
    20e8:	80 95       	com	r24
    20ea:	84 23       	and	r24, r20
    20ec:	8c 93       	st	X, r24
    20ee:	a3 c0       	rjmp	.+326    	; 0x2236 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin);break;
    20f0:	a5 e3       	ldi	r26, 0x35	; 53
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e5 e3       	ldi	r30, 0x35	; 53
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	48 2f       	mov	r20, r24
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	02 2e       	mov	r0, r18
    2108:	02 c0       	rjmp	.+4      	; 0x210e <MDIO_ErrorS_SetPinValue+0xe2>
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	0a 94       	dec	r0
    2110:	e2 f7       	brpl	.-8      	; 0x210a <MDIO_ErrorS_SetPinValue+0xde>
    2112:	80 95       	com	r24
    2114:	84 23       	and	r24, r20
    2116:	8c 93       	st	X, r24
    2118:	8e c0       	rjmp	.+284    	; 0x2236 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin);break;
    211a:	a2 e3       	ldi	r26, 0x32	; 50
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e2 e3       	ldi	r30, 0x32	; 50
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	48 2f       	mov	r20, r24
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	02 2e       	mov	r0, r18
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <MDIO_ErrorS_SetPinValue+0x10c>
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	0a 94       	dec	r0
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <MDIO_ErrorS_SetPinValue+0x108>
    213c:	80 95       	com	r24
    213e:	84 23       	and	r24, r20
    2140:	8c 93       	st	X, r24
    2142:	79 c0       	rjmp	.+242    	; 0x2236 <MDIO_ErrorS_SetPinValue+0x20a>
					default: errorState = return_Nok; break;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	76 c0       	rjmp	.+236    	; 0x2236 <MDIO_ErrorS_SetPinValue+0x20a>
				}

		}
		else if(Copy_U8Mode == DIO_HIGH){
    214a:	8c 81       	ldd	r24, Y+4	; 0x04
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	09 f0       	breq	.+2      	; 0x2152 <MDIO_ErrorS_SetPinValue+0x126>
    2150:	72 c0       	rjmp	.+228    	; 0x2236 <MDIO_ErrorS_SetPinValue+0x20a>
				switch (Copy_u8Port){
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	28 2f       	mov	r18, r24
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	3e 83       	std	Y+6, r19	; 0x06
    215a:	2d 83       	std	Y+5, r18	; 0x05
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	82 30       	cpi	r24, 0x02	; 2
    2162:	91 05       	cpc	r25, r1
    2164:	51 f1       	breq	.+84     	; 0x21ba <MDIO_ErrorS_SetPinValue+0x18e>
    2166:	2d 81       	ldd	r18, Y+5	; 0x05
    2168:	3e 81       	ldd	r19, Y+6	; 0x06
    216a:	23 30       	cpi	r18, 0x03	; 3
    216c:	31 05       	cpc	r19, r1
    216e:	34 f4       	brge	.+12     	; 0x217c <MDIO_ErrorS_SetPinValue+0x150>
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	81 30       	cpi	r24, 0x01	; 1
    2176:	91 05       	cpc	r25, r1
    2178:	61 f0       	breq	.+24     	; 0x2192 <MDIO_ErrorS_SetPinValue+0x166>
    217a:	5b c0       	rjmp	.+182    	; 0x2232 <MDIO_ErrorS_SetPinValue+0x206>
    217c:	2d 81       	ldd	r18, Y+5	; 0x05
    217e:	3e 81       	ldd	r19, Y+6	; 0x06
    2180:	23 30       	cpi	r18, 0x03	; 3
    2182:	31 05       	cpc	r19, r1
    2184:	71 f1       	breq	.+92     	; 0x21e2 <MDIO_ErrorS_SetPinValue+0x1b6>
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	84 30       	cpi	r24, 0x04	; 4
    218c:	91 05       	cpc	r25, r1
    218e:	e9 f1       	breq	.+122    	; 0x220a <MDIO_ErrorS_SetPinValue+0x1de>
    2190:	50 c0       	rjmp	.+160    	; 0x2232 <MDIO_ErrorS_SetPinValue+0x206>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    2192:	ab e3       	ldi	r26, 0x3B	; 59
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	eb e3       	ldi	r30, 0x3B	; 59
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	48 2f       	mov	r20, r24
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	02 2e       	mov	r0, r18
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <MDIO_ErrorS_SetPinValue+0x184>
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	0a 94       	dec	r0
    21b2:	e2 f7       	brpl	.-8      	; 0x21ac <MDIO_ErrorS_SetPinValue+0x180>
    21b4:	84 2b       	or	r24, r20
    21b6:	8c 93       	st	X, r24
    21b8:	3e c0       	rjmp	.+124    	; 0x2236 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    21ba:	a8 e3       	ldi	r26, 0x38	; 56
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e8 e3       	ldi	r30, 0x38	; 56
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	48 2f       	mov	r20, r24
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	02 2e       	mov	r0, r18
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <MDIO_ErrorS_SetPinValue+0x1ac>
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	0a 94       	dec	r0
    21da:	e2 f7       	brpl	.-8      	; 0x21d4 <MDIO_ErrorS_SetPinValue+0x1a8>
    21dc:	84 2b       	or	r24, r20
    21de:	8c 93       	st	X, r24
    21e0:	2a c0       	rjmp	.+84     	; 0x2236 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    21e2:	a5 e3       	ldi	r26, 0x35	; 53
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e5 e3       	ldi	r30, 0x35	; 53
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	48 2f       	mov	r20, r24
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	02 2e       	mov	r0, r18
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <MDIO_ErrorS_SetPinValue+0x1d4>
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	0a 94       	dec	r0
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <MDIO_ErrorS_SetPinValue+0x1d0>
    2204:	84 2b       	or	r24, r20
    2206:	8c 93       	st	X, r24
    2208:	16 c0       	rjmp	.+44     	; 0x2236 <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    220a:	a2 e3       	ldi	r26, 0x32	; 50
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e2 e3       	ldi	r30, 0x32	; 50
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	48 2f       	mov	r20, r24
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	02 2e       	mov	r0, r18
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <MDIO_ErrorS_SetPinValue+0x1fc>
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	0a 94       	dec	r0
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <MDIO_ErrorS_SetPinValue+0x1f8>
    222c:	84 2b       	or	r24, r20
    222e:	8c 93       	st	X, r24
    2230:	02 c0       	rjmp	.+4      	; 0x2236 <MDIO_ErrorS_SetPinValue+0x20a>
					default:errorState = return_Nok; break;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	89 83       	std	Y+1, r24	; 0x01
				}
		}
	return errorState;
    2236:	89 81       	ldd	r24, Y+1	; 0x01
}
    2238:	28 96       	adiw	r28, 0x08	; 8
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <MDIO_ErrorS_GetPinValue>:

Error_State_t MDIO_ErrorS_GetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8* P_u8Value ){
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	27 97       	sbiw	r28, 0x07	; 7
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	8a 83       	std	Y+2, r24	; 0x02
    2260:	6b 83       	std	Y+3, r22	; 0x03
    2262:	5d 83       	std	Y+5, r21	; 0x05
    2264:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    2266:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	88 30       	cpi	r24, 0x08	; 8
    226c:	10 f0       	brcs	.+4      	; 0x2272 <MDIO_ErrorS_GetPinValue+0x28>
			errorState = return_Nok;
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	89 83       	std	Y+1, r24	; 0x01
		}

	switch (Copy_u8Port){
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	3f 83       	std	Y+7, r19	; 0x07
    227a:	2e 83       	std	Y+6, r18	; 0x06
    227c:	4e 81       	ldd	r20, Y+6	; 0x06
    227e:	5f 81       	ldd	r21, Y+7	; 0x07
    2280:	42 30       	cpi	r20, 0x02	; 2
    2282:	51 05       	cpc	r21, r1
    2284:	59 f1       	breq	.+86     	; 0x22dc <MDIO_ErrorS_GetPinValue+0x92>
    2286:	8e 81       	ldd	r24, Y+6	; 0x06
    2288:	9f 81       	ldd	r25, Y+7	; 0x07
    228a:	83 30       	cpi	r24, 0x03	; 3
    228c:	91 05       	cpc	r25, r1
    228e:	34 f4       	brge	.+12     	; 0x229c <MDIO_ErrorS_GetPinValue+0x52>
    2290:	2e 81       	ldd	r18, Y+6	; 0x06
    2292:	3f 81       	ldd	r19, Y+7	; 0x07
    2294:	21 30       	cpi	r18, 0x01	; 1
    2296:	31 05       	cpc	r19, r1
    2298:	69 f0       	breq	.+26     	; 0x22b4 <MDIO_ErrorS_GetPinValue+0x6a>
    229a:	5c c0       	rjmp	.+184    	; 0x2354 <MDIO_ErrorS_GetPinValue+0x10a>
    229c:	4e 81       	ldd	r20, Y+6	; 0x06
    229e:	5f 81       	ldd	r21, Y+7	; 0x07
    22a0:	43 30       	cpi	r20, 0x03	; 3
    22a2:	51 05       	cpc	r21, r1
    22a4:	79 f1       	breq	.+94     	; 0x2304 <MDIO_ErrorS_GetPinValue+0xba>
    22a6:	8e 81       	ldd	r24, Y+6	; 0x06
    22a8:	9f 81       	ldd	r25, Y+7	; 0x07
    22aa:	84 30       	cpi	r24, 0x04	; 4
    22ac:	91 05       	cpc	r25, r1
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <MDIO_ErrorS_GetPinValue+0x68>
    22b0:	3d c0       	rjmp	.+122    	; 0x232c <MDIO_ErrorS_GetPinValue+0xe2>
    22b2:	50 c0       	rjmp	.+160    	; 0x2354 <MDIO_ErrorS_GetPinValue+0x10a>
						case DIO_PORTA : *P_u8Value = GET_BIT(PINA,Copy_u8Pin);break;
    22b4:	e9 e3       	ldi	r30, 0x39	; 57
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a9 01       	movw	r20, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <MDIO_ErrorS_GetPinValue+0x82>
    22c8:	55 95       	asr	r21
    22ca:	47 95       	ror	r20
    22cc:	8a 95       	dec	r24
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <MDIO_ErrorS_GetPinValue+0x7e>
    22d0:	ca 01       	movw	r24, r20
    22d2:	81 70       	andi	r24, 0x01	; 1
    22d4:	ec 81       	ldd	r30, Y+4	; 0x04
    22d6:	fd 81       	ldd	r31, Y+5	; 0x05
    22d8:	80 83       	st	Z, r24
    22da:	3e c0       	rjmp	.+124    	; 0x2358 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTB : *P_u8Value = GET_BIT(PINB,Copy_u8Pin);break;
    22dc:	e6 e3       	ldi	r30, 0x36	; 54
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a9 01       	movw	r20, r18
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <MDIO_ErrorS_GetPinValue+0xaa>
    22f0:	55 95       	asr	r21
    22f2:	47 95       	ror	r20
    22f4:	8a 95       	dec	r24
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <MDIO_ErrorS_GetPinValue+0xa6>
    22f8:	ca 01       	movw	r24, r20
    22fa:	81 70       	andi	r24, 0x01	; 1
    22fc:	ec 81       	ldd	r30, Y+4	; 0x04
    22fe:	fd 81       	ldd	r31, Y+5	; 0x05
    2300:	80 83       	st	Z, r24
    2302:	2a c0       	rjmp	.+84     	; 0x2358 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTC : *P_u8Value = GET_BIT(PINC,Copy_u8Pin);break;
    2304:	e3 e3       	ldi	r30, 0x33	; 51
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a9 01       	movw	r20, r18
    2316:	02 c0       	rjmp	.+4      	; 0x231c <MDIO_ErrorS_GetPinValue+0xd2>
    2318:	55 95       	asr	r21
    231a:	47 95       	ror	r20
    231c:	8a 95       	dec	r24
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <MDIO_ErrorS_GetPinValue+0xce>
    2320:	ca 01       	movw	r24, r20
    2322:	81 70       	andi	r24, 0x01	; 1
    2324:	ec 81       	ldd	r30, Y+4	; 0x04
    2326:	fd 81       	ldd	r31, Y+5	; 0x05
    2328:	80 83       	st	Z, r24
    232a:	16 c0       	rjmp	.+44     	; 0x2358 <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTD : *P_u8Value = GET_BIT(PIND,Copy_u8Pin);break;
    232c:	e0 e3       	ldi	r30, 0x30	; 48
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <MDIO_ErrorS_GetPinValue+0xfa>
    2340:	55 95       	asr	r21
    2342:	47 95       	ror	r20
    2344:	8a 95       	dec	r24
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <MDIO_ErrorS_GetPinValue+0xf6>
    2348:	ca 01       	movw	r24, r20
    234a:	81 70       	andi	r24, 0x01	; 1
    234c:	ec 81       	ldd	r30, Y+4	; 0x04
    234e:	fd 81       	ldd	r31, Y+5	; 0x05
    2350:	80 83       	st	Z, r24
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <MDIO_ErrorS_GetPinValue+0x10e>
						default: errorState = return_Nok; break;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	89 83       	std	Y+1, r24	; 0x01
					}
	return errorState;
    2358:	89 81       	ldd	r24, Y+1	; 0x01

}
    235a:	27 96       	adiw	r28, 0x07	; 7
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <MDIO_ErrorS_SetPortValue>:

Error_State_t MDIO_ErrorS_SetPortValue( u8 Copy_u8Port , u8  Copy_U8Value ){
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	00 d0       	rcall	.+0      	; 0x2372 <MDIO_ErrorS_SetPortValue+0x6>
    2372:	00 d0       	rcall	.+0      	; 0x2374 <MDIO_ErrorS_SetPortValue+0x8>
    2374:	0f 92       	push	r0
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	8a 83       	std	Y+2, r24	; 0x02
    237c:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    237e:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	3d 83       	std	Y+5, r19	; 0x05
    2388:	2c 83       	std	Y+4, r18	; 0x04
    238a:	8c 81       	ldd	r24, Y+4	; 0x04
    238c:	9d 81       	ldd	r25, Y+5	; 0x05
    238e:	82 30       	cpi	r24, 0x02	; 2
    2390:	91 05       	cpc	r25, r1
    2392:	d9 f0       	breq	.+54     	; 0x23ca <MDIO_ErrorS_SetPortValue+0x5e>
    2394:	2c 81       	ldd	r18, Y+4	; 0x04
    2396:	3d 81       	ldd	r19, Y+5	; 0x05
    2398:	23 30       	cpi	r18, 0x03	; 3
    239a:	31 05       	cpc	r19, r1
    239c:	34 f4       	brge	.+12     	; 0x23aa <MDIO_ErrorS_SetPortValue+0x3e>
    239e:	8c 81       	ldd	r24, Y+4	; 0x04
    23a0:	9d 81       	ldd	r25, Y+5	; 0x05
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	91 05       	cpc	r25, r1
    23a6:	61 f0       	breq	.+24     	; 0x23c0 <MDIO_ErrorS_SetPortValue+0x54>
    23a8:	1f c0       	rjmp	.+62     	; 0x23e8 <MDIO_ErrorS_SetPortValue+0x7c>
    23aa:	2c 81       	ldd	r18, Y+4	; 0x04
    23ac:	3d 81       	ldd	r19, Y+5	; 0x05
    23ae:	23 30       	cpi	r18, 0x03	; 3
    23b0:	31 05       	cpc	r19, r1
    23b2:	81 f0       	breq	.+32     	; 0x23d4 <MDIO_ErrorS_SetPortValue+0x68>
    23b4:	8c 81       	ldd	r24, Y+4	; 0x04
    23b6:	9d 81       	ldd	r25, Y+5	; 0x05
    23b8:	84 30       	cpi	r24, 0x04	; 4
    23ba:	91 05       	cpc	r25, r1
    23bc:	81 f0       	breq	.+32     	; 0x23de <MDIO_ErrorS_SetPortValue+0x72>
    23be:	14 c0       	rjmp	.+40     	; 0x23e8 <MDIO_ErrorS_SetPortValue+0x7c>
		case DIO_PORTA : PORTA = Copy_U8Value ;break;
    23c0:	eb e3       	ldi	r30, 0x3B	; 59
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	80 83       	st	Z, r24
    23c8:	11 c0       	rjmp	.+34     	; 0x23ec <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTB : PORTB = Copy_U8Value ;break;
    23ca:	e8 e3       	ldi	r30, 0x38	; 56
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	80 83       	st	Z, r24
    23d2:	0c c0       	rjmp	.+24     	; 0x23ec <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTC : PORTC = Copy_U8Value ;break;
    23d4:	e5 e3       	ldi	r30, 0x35	; 53
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	80 83       	st	Z, r24
    23dc:	07 c0       	rjmp	.+14     	; 0x23ec <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTD : PORTD = Copy_U8Value ;break;
    23de:	e2 e3       	ldi	r30, 0x32	; 50
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	80 83       	st	Z, r24
    23e6:	02 c0       	rjmp	.+4      	; 0x23ec <MDIO_ErrorS_SetPortValue+0x80>
		default:errorState = return_Nok; break;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	89 83       	std	Y+1, r24	; 0x01
	}

		return errorState;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01


}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <MDIO_ErrorS_GetPortValue>:
Error_State_t MDIO_ErrorS_GetPortValue( u8 Copy_u8Port , u8* P_u8Value ){
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <MDIO_ErrorS_GetPortValue+0x6>
    2404:	00 d0       	rcall	.+0      	; 0x2406 <MDIO_ErrorS_GetPortValue+0x8>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <MDIO_ErrorS_GetPortValue+0xa>
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	8a 83       	std	Y+2, r24	; 0x02
    240e:	7c 83       	std	Y+4, r23	; 0x04
    2410:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    2412:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	3e 83       	std	Y+6, r19	; 0x06
    241c:	2d 83       	std	Y+5, r18	; 0x05
    241e:	8d 81       	ldd	r24, Y+5	; 0x05
    2420:	9e 81       	ldd	r25, Y+6	; 0x06
    2422:	82 30       	cpi	r24, 0x02	; 2
    2424:	91 05       	cpc	r25, r1
    2426:	e9 f0       	breq	.+58     	; 0x2462 <MDIO_ErrorS_GetPortValue+0x64>
    2428:	2d 81       	ldd	r18, Y+5	; 0x05
    242a:	3e 81       	ldd	r19, Y+6	; 0x06
    242c:	23 30       	cpi	r18, 0x03	; 3
    242e:	31 05       	cpc	r19, r1
    2430:	34 f4       	brge	.+12     	; 0x243e <MDIO_ErrorS_GetPortValue+0x40>
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	91 05       	cpc	r25, r1
    243a:	61 f0       	breq	.+24     	; 0x2454 <MDIO_ErrorS_GetPortValue+0x56>
    243c:	27 c0       	rjmp	.+78     	; 0x248c <MDIO_ErrorS_GetPortValue+0x8e>
    243e:	2d 81       	ldd	r18, Y+5	; 0x05
    2440:	3e 81       	ldd	r19, Y+6	; 0x06
    2442:	23 30       	cpi	r18, 0x03	; 3
    2444:	31 05       	cpc	r19, r1
    2446:	a1 f0       	breq	.+40     	; 0x2470 <MDIO_ErrorS_GetPortValue+0x72>
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	9e 81       	ldd	r25, Y+6	; 0x06
    244c:	84 30       	cpi	r24, 0x04	; 4
    244e:	91 05       	cpc	r25, r1
    2450:	b1 f0       	breq	.+44     	; 0x247e <MDIO_ErrorS_GetPortValue+0x80>
    2452:	1c c0       	rjmp	.+56     	; 0x248c <MDIO_ErrorS_GetPortValue+0x8e>
		case DIO_PORTA : *P_u8Value = PINA ;break;
    2454:	e9 e3       	ldi	r30, 0x39	; 57
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	eb 81       	ldd	r30, Y+3	; 0x03
    245c:	fc 81       	ldd	r31, Y+4	; 0x04
    245e:	80 83       	st	Z, r24
    2460:	17 c0       	rjmp	.+46     	; 0x2490 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTB : *P_u8Value = PINB ;break;
    2462:	e6 e3       	ldi	r30, 0x36	; 54
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	eb 81       	ldd	r30, Y+3	; 0x03
    246a:	fc 81       	ldd	r31, Y+4	; 0x04
    246c:	80 83       	st	Z, r24
    246e:	10 c0       	rjmp	.+32     	; 0x2490 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTC : *P_u8Value = PINC ;break;
    2470:	e3 e3       	ldi	r30, 0x33	; 51
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	eb 81       	ldd	r30, Y+3	; 0x03
    2478:	fc 81       	ldd	r31, Y+4	; 0x04
    247a:	80 83       	st	Z, r24
    247c:	09 c0       	rjmp	.+18     	; 0x2490 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTD : *P_u8Value = PIND ;break;
    247e:	e0 e3       	ldi	r30, 0x30	; 48
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	eb 81       	ldd	r30, Y+3	; 0x03
    2486:	fc 81       	ldd	r31, Y+4	; 0x04
    2488:	80 83       	st	Z, r24
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <MDIO_ErrorS_GetPortValue+0x92>
		default: errorState = return_Nok; break;
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorState;
    2490:	89 81       	ldd	r24, Y+1	; 0x01

}
    2492:	26 96       	adiw	r28, 0x06	; 6
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <MDIO_ErrorS_TogPinValue>:

Error_State_t MDIO_ErrorS_TogPinValue( u8 Copy_u8Port , u8 Copy_u8Pin ){
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <MDIO_ErrorS_TogPinValue+0x6>
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <MDIO_ErrorS_TogPinValue+0x8>
    24ac:	0f 92       	push	r0
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	8a 83       	std	Y+2, r24	; 0x02
    24b4:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    24b6:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8Port){
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	28 2f       	mov	r18, r24
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	3d 83       	std	Y+5, r19	; 0x05
    24c0:	2c 83       	std	Y+4, r18	; 0x04
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	9d 81       	ldd	r25, Y+5	; 0x05
    24c6:	82 30       	cpi	r24, 0x02	; 2
    24c8:	91 05       	cpc	r25, r1
    24ca:	51 f1       	breq	.+84     	; 0x2520 <MDIO_ErrorS_TogPinValue+0x7c>
    24cc:	2c 81       	ldd	r18, Y+4	; 0x04
    24ce:	3d 81       	ldd	r19, Y+5	; 0x05
    24d0:	23 30       	cpi	r18, 0x03	; 3
    24d2:	31 05       	cpc	r19, r1
    24d4:	34 f4       	brge	.+12     	; 0x24e2 <MDIO_ErrorS_TogPinValue+0x3e>
    24d6:	8c 81       	ldd	r24, Y+4	; 0x04
    24d8:	9d 81       	ldd	r25, Y+5	; 0x05
    24da:	81 30       	cpi	r24, 0x01	; 1
    24dc:	91 05       	cpc	r25, r1
    24de:	61 f0       	breq	.+24     	; 0x24f8 <MDIO_ErrorS_TogPinValue+0x54>
    24e0:	5b c0       	rjmp	.+182    	; 0x2598 <MDIO_ErrorS_TogPinValue+0xf4>
    24e2:	2c 81       	ldd	r18, Y+4	; 0x04
    24e4:	3d 81       	ldd	r19, Y+5	; 0x05
    24e6:	23 30       	cpi	r18, 0x03	; 3
    24e8:	31 05       	cpc	r19, r1
    24ea:	71 f1       	breq	.+92     	; 0x2548 <MDIO_ErrorS_TogPinValue+0xa4>
    24ec:	8c 81       	ldd	r24, Y+4	; 0x04
    24ee:	9d 81       	ldd	r25, Y+5	; 0x05
    24f0:	84 30       	cpi	r24, 0x04	; 4
    24f2:	91 05       	cpc	r25, r1
    24f4:	e9 f1       	breq	.+122    	; 0x2570 <MDIO_ErrorS_TogPinValue+0xcc>
    24f6:	50 c0       	rjmp	.+160    	; 0x2598 <MDIO_ErrorS_TogPinValue+0xf4>
			case DIO_PORTA :  TOGGLE_BIT(PORTA,Copy_u8Pin) ; break;
    24f8:	ab e3       	ldi	r26, 0x3B	; 59
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	eb e3       	ldi	r30, 0x3B	; 59
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	48 2f       	mov	r20, r24
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	02 2e       	mov	r0, r18
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <MDIO_ErrorS_TogPinValue+0x72>
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	0a 94       	dec	r0
    2518:	e2 f7       	brpl	.-8      	; 0x2512 <MDIO_ErrorS_TogPinValue+0x6e>
    251a:	84 27       	eor	r24, r20
    251c:	8c 93       	st	X, r24
    251e:	3e c0       	rjmp	.+124    	; 0x259c <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTB :  TOGGLE_BIT(PORTB,Copy_u8Pin) ;break;
    2520:	a8 e3       	ldi	r26, 0x38	; 56
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e8 e3       	ldi	r30, 0x38	; 56
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	48 2f       	mov	r20, r24
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	02 2e       	mov	r0, r18
    2538:	02 c0       	rjmp	.+4      	; 0x253e <MDIO_ErrorS_TogPinValue+0x9a>
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	0a 94       	dec	r0
    2540:	e2 f7       	brpl	.-8      	; 0x253a <MDIO_ErrorS_TogPinValue+0x96>
    2542:	84 27       	eor	r24, r20
    2544:	8c 93       	st	X, r24
    2546:	2a c0       	rjmp	.+84     	; 0x259c <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTC :  TOGGLE_BIT(PORTC,Copy_u8Pin) ;break;
    2548:	a5 e3       	ldi	r26, 0x35	; 53
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	e5 e3       	ldi	r30, 0x35	; 53
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	80 81       	ld	r24, Z
    2552:	48 2f       	mov	r20, r24
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	02 2e       	mov	r0, r18
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <MDIO_ErrorS_TogPinValue+0xc2>
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	0a 94       	dec	r0
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <MDIO_ErrorS_TogPinValue+0xbe>
    256a:	84 27       	eor	r24, r20
    256c:	8c 93       	st	X, r24
    256e:	16 c0       	rjmp	.+44     	; 0x259c <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTD :  TOGGLE_BIT(PORTD,Copy_u8Pin) ;break;
    2570:	a2 e3       	ldi	r26, 0x32	; 50
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	e2 e3       	ldi	r30, 0x32	; 50
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	48 2f       	mov	r20, r24
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	02 2e       	mov	r0, r18
    2588:	02 c0       	rjmp	.+4      	; 0x258e <MDIO_ErrorS_TogPinValue+0xea>
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	0a 94       	dec	r0
    2590:	e2 f7       	brpl	.-8      	; 0x258a <MDIO_ErrorS_TogPinValue+0xe6>
    2592:	84 27       	eor	r24, r20
    2594:	8c 93       	st	X, r24
    2596:	02 c0       	rjmp	.+4      	; 0x259c <MDIO_ErrorS_TogPinValue+0xf8>
			default: errorState = return_Nok; break;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	89 83       	std	Y+1, r24	; 0x01
		}
		return errorState;
    259c:	89 81       	ldd	r24, Y+1	; 0x01
}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <MTIMER0_voidInit>:
#include "MTIMER_regesters.h"
#include "MTimer_config.h"
#include "MTIMER_private.h"


void MTIMER0_voidInit(void){
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
	OCR0 = COMPARE_MATCH_VALUE;
	/* Enable ctc ISR */
	SET_BIT(TIMSK , TIMSK_OCIE0);
#elif TIMER0_MODE == FAST_PWM
	/* selecting  wave generation mode as FAST_PWM mode */
	SET_BIT(TCCR0,TCCR0_WGM00);
    25b6:	a3 e5       	ldi	r26, 0x53	; 83
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	e3 e5       	ldi	r30, 0x53	; 83
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	80 64       	ori	r24, 0x40	; 64
    25c2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    25c4:	a3 e5       	ldi	r26, 0x53	; 83
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e3 e5       	ldi	r30, 0x53	; 83
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	88 60       	ori	r24, 0x08	; 8
    25d0:	8c 93       	st	X, r24
	/* selecting non inverting mode */
	CLR_BIT(TCCR0,TCCR0_COM00);
    25d2:	a3 e5       	ldi	r26, 0x53	; 83
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	e3 e5       	ldi	r30, 0x53	; 83
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	8f 7e       	andi	r24, 0xEF	; 239
    25de:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    25e0:	a3 e5       	ldi	r26, 0x53	; 83
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e3 e5       	ldi	r30, 0x53	; 83
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	80 62       	ori	r24, 0x20	; 32
    25ec:	8c 93       	st	X, r24
#endif

	/* selecting timer 0 prescaler as dev by 8*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    25ee:	a3 e5       	ldi	r26, 0x53	; 83
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e3 e5       	ldi	r30, 0x53	; 83
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	8e 7f       	andi	r24, 0xFE	; 254
    25fa:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    25fc:	a3 e5       	ldi	r26, 0x53	; 83
    25fe:	b0 e0       	ldi	r27, 0x00	; 0
    2600:	e3 e5       	ldi	r30, 0x53	; 83
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	80 81       	ld	r24, Z
    2606:	82 60       	ori	r24, 0x02	; 2
    2608:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    260a:	a3 e5       	ldi	r26, 0x53	; 83
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e3 e5       	ldi	r30, 0x53	; 83
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	8b 7f       	andi	r24, 0xFB	; 251
    2616:	8c 93       	st	X, r24





}
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <MTIMER0_voidDisable>:
void MTIMER0_voidDisable(void){
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
	/*No clock source */
	CLR_BIT(TCCR0,TCCR0_CS00);
    2626:	a3 e5       	ldi	r26, 0x53	; 83
    2628:	b0 e0       	ldi	r27, 0x00	; 0
    262a:	e3 e5       	ldi	r30, 0x53	; 83
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	80 81       	ld	r24, Z
    2630:	8e 7f       	andi	r24, 0xFE	; 254
    2632:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    2634:	a3 e5       	ldi	r26, 0x53	; 83
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	e3 e5       	ldi	r30, 0x53	; 83
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	8d 7f       	andi	r24, 0xFD	; 253
    2640:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    2642:	a3 e5       	ldi	r26, 0x53	; 83
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	e3 e5       	ldi	r30, 0x53	; 83
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	8b 7f       	andi	r24, 0xFB	; 251
    264e:	8c 93       	st	X, r24


}
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <MTIMER0_voidSetPreload>:
void MTIMER0_voidSetPreload(u8 Copy_u8Preload){
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	0f 92       	push	r0
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
    2662:	e2 e5       	ldi	r30, 0x52	; 82
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	80 83       	st	Z, r24

}
    266a:	0f 90       	pop	r0
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <MTIMER0_voidSetDutyCycle>:
void MTIMER0_voidSetDutyCycle(u8 Copy_u8DutyCycle){
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	0f 92       	push	r0
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8DutyCycle;
    267e:	ec e5       	ldi	r30, 0x5C	; 92
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	80 83       	st	Z, r24
}
    2686:	0f 90       	pop	r0
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	08 95       	ret

0000268e <MTIMER1_voidInit>:

void MTIMER1_voidInit( Timer1Modes_t Copy_Timer1_Mode , Top_t Copy_Timer1TopMode , Prescaler_t Copy_enuPrescalerValue ){
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	29 97       	sbiw	r28, 0x09	; 9
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	f8 94       	cli
    269c:	de bf       	out	0x3e, r29	; 62
    269e:	0f be       	out	0x3f, r0	; 63
    26a0:	cd bf       	out	0x3d, r28	; 61
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	6a 83       	std	Y+2, r22	; 0x02
    26a6:	4b 83       	std	Y+3, r20	; 0x03
	switch (Copy_Timer1_Mode) {
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	28 2f       	mov	r18, r24
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	39 87       	std	Y+9, r19	; 0x09
    26b0:	28 87       	std	Y+8, r18	; 0x08
    26b2:	88 85       	ldd	r24, Y+8	; 0x08
    26b4:	99 85       	ldd	r25, Y+9	; 0x09
    26b6:	82 30       	cpi	r24, 0x02	; 2
    26b8:	91 05       	cpc	r25, r1
    26ba:	09 f4       	brne	.+2      	; 0x26be <MTIMER1_voidInit+0x30>
    26bc:	5c c0       	rjmp	.+184    	; 0x2776 <MTIMER1_voidInit+0xe8>
    26be:	28 85       	ldd	r18, Y+8	; 0x08
    26c0:	39 85       	ldd	r19, Y+9	; 0x09
    26c2:	23 30       	cpi	r18, 0x03	; 3
    26c4:	31 05       	cpc	r19, r1
    26c6:	54 f4       	brge	.+20     	; 0x26dc <MTIMER1_voidInit+0x4e>
    26c8:	88 85       	ldd	r24, Y+8	; 0x08
    26ca:	99 85       	ldd	r25, Y+9	; 0x09
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	c9 f0       	breq	.+50     	; 0x2702 <MTIMER1_voidInit+0x74>
    26d0:	28 85       	ldd	r18, Y+8	; 0x08
    26d2:	39 85       	ldd	r19, Y+9	; 0x09
    26d4:	21 30       	cpi	r18, 0x01	; 1
    26d6:	31 05       	cpc	r19, r1
    26d8:	89 f1       	breq	.+98     	; 0x273c <MTIMER1_voidInit+0xae>
    26da:	c0 c0       	rjmp	.+384    	; 0x285c <MTIMER1_voidInit+0x1ce>
    26dc:	88 85       	ldd	r24, Y+8	; 0x08
    26de:	99 85       	ldd	r25, Y+9	; 0x09
    26e0:	84 30       	cpi	r24, 0x04	; 4
    26e2:	91 05       	cpc	r25, r1
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <MTIMER1_voidInit+0x5a>
    26e6:	81 c0       	rjmp	.+258    	; 0x27ea <MTIMER1_voidInit+0x15c>
    26e8:	28 85       	ldd	r18, Y+8	; 0x08
    26ea:	39 85       	ldd	r19, Y+9	; 0x09
    26ec:	24 30       	cpi	r18, 0x04	; 4
    26ee:	31 05       	cpc	r19, r1
    26f0:	0c f4       	brge	.+2      	; 0x26f4 <MTIMER1_voidInit+0x66>
    26f2:	5e c0       	rjmp	.+188    	; 0x27b0 <MTIMER1_voidInit+0x122>
    26f4:	88 85       	ldd	r24, Y+8	; 0x08
    26f6:	99 85       	ldd	r25, Y+9	; 0x09
    26f8:	85 30       	cpi	r24, 0x05	; 5
    26fa:	91 05       	cpc	r25, r1
    26fc:	09 f4       	brne	.+2      	; 0x2700 <MTIMER1_voidInit+0x72>
    26fe:	92 c0       	rjmp	.+292    	; 0x2824 <MTIMER1_voidInit+0x196>
    2700:	ad c0       	rjmp	.+346    	; 0x285c <MTIMER1_voidInit+0x1ce>
	case NORMAL_MODE : {
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2702:	af e4       	ldi	r26, 0x4F	; 79
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	ef e4       	ldi	r30, 0x4F	; 79
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	8f 7b       	andi	r24, 0xBF	; 191
    270e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    2710:	af e4       	ldi	r26, 0x4F	; 79
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	ef e4       	ldi	r30, 0x4F	; 79
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	8f 7e       	andi	r24, 0xEF	; 239
    271c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    271e:	af e4       	ldi	r26, 0x4F	; 79
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	ef e4       	ldi	r30, 0x4F	; 79
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	80 81       	ld	r24, Z
    2728:	8f 77       	andi	r24, 0x7F	; 127
    272a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    272c:	af e4       	ldi	r26, 0x4F	; 79
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	ef e4       	ldi	r30, 0x4F	; 79
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	8f 7d       	andi	r24, 0xDF	; 223
    2738:	8c 93       	st	X, r24
    273a:	90 c0       	rjmp	.+288    	; 0x285c <MTIMER1_voidInit+0x1ce>
		break;
	}
	case CTC_TOGGLE : {
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    273c:	af e4       	ldi	r26, 0x4F	; 79
    273e:	b0 e0       	ldi	r27, 0x00	; 0
    2740:	ef e4       	ldi	r30, 0x4F	; 79
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	80 81       	ld	r24, Z
    2746:	80 64       	ori	r24, 0x40	; 64
    2748:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    274a:	af e4       	ldi	r26, 0x4F	; 79
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	ef e4       	ldi	r30, 0x4F	; 79
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	80 61       	ori	r24, 0x10	; 16
    2756:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1A1);
    2758:	af e4       	ldi	r26, 0x4F	; 79
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	ef e4       	ldi	r30, 0x4F	; 79
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	8f 77       	andi	r24, 0x7F	; 127
    2764:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B1);
    2766:	af e4       	ldi	r26, 0x4F	; 79
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	ef e4       	ldi	r30, 0x4F	; 79
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	8f 7d       	andi	r24, 0xDF	; 223
    2772:	8c 93       	st	X, r24
    2774:	73 c0       	rjmp	.+230    	; 0x285c <MTIMER1_voidInit+0x1ce>
		break;
	}
	case CTC_SET : {
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2776:	af e4       	ldi	r26, 0x4F	; 79
    2778:	b0 e0       	ldi	r27, 0x00	; 0
    277a:	ef e4       	ldi	r30, 0x4F	; 79
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	80 81       	ld	r24, Z
    2780:	80 64       	ori	r24, 0x40	; 64
    2782:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2784:	af e4       	ldi	r26, 0x4F	; 79
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	ef e4       	ldi	r30, 0x4F	; 79
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	80 61       	ori	r24, 0x10	; 16
    2790:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2792:	af e4       	ldi	r26, 0x4F	; 79
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	ef e4       	ldi	r30, 0x4F	; 79
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	80 68       	ori	r24, 0x80	; 128
    279e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    27a0:	af e4       	ldi	r26, 0x4F	; 79
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	ef e4       	ldi	r30, 0x4F	; 79
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	80 62       	ori	r24, 0x20	; 32
    27ac:	8c 93       	st	X, r24
    27ae:	56 c0       	rjmp	.+172    	; 0x285c <MTIMER1_voidInit+0x1ce>
		break;
	}
	case CTC_CLR : {
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    27b0:	af e4       	ldi	r26, 0x4F	; 79
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	ef e4       	ldi	r30, 0x4F	; 79
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	8f 7b       	andi	r24, 0xBF	; 191
    27bc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    27be:	af e4       	ldi	r26, 0x4F	; 79
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	ef e4       	ldi	r30, 0x4F	; 79
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	8f 7e       	andi	r24, 0xEF	; 239
    27ca:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    27cc:	af e4       	ldi	r26, 0x4F	; 79
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	ef e4       	ldi	r30, 0x4F	; 79
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	80 68       	ori	r24, 0x80	; 128
    27d8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    27da:	af e4       	ldi	r26, 0x4F	; 79
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	ef e4       	ldi	r30, 0x4F	; 79
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	80 62       	ori	r24, 0x20	; 32
    27e6:	8c 93       	st	X, r24
    27e8:	39 c0       	rjmp	.+114    	; 0x285c <MTIMER1_voidInit+0x1ce>
		break;
	}
	case FAST_PWM_NON_INVERTING : {
		CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    27ea:	af e4       	ldi	r26, 0x4F	; 79
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	ef e4       	ldi	r30, 0x4F	; 79
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	8f 7b       	andi	r24, 0xBF	; 191
    27f6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_COM1B0);
    27f8:	af e4       	ldi	r26, 0x4F	; 79
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	ef e4       	ldi	r30, 0x4F	; 79
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	8f 7e       	andi	r24, 0xEF	; 239
    2804:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2806:	af e4       	ldi	r26, 0x4F	; 79
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	ef e4       	ldi	r30, 0x4F	; 79
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	80 68       	ori	r24, 0x80	; 128
    2812:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2814:	af e4       	ldi	r26, 0x4F	; 79
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	ef e4       	ldi	r30, 0x4F	; 79
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	80 62       	ori	r24, 0x20	; 32
    2820:	8c 93       	st	X, r24
    2822:	1c c0       	rjmp	.+56     	; 0x285c <MTIMER1_voidInit+0x1ce>
		break;
	}
	case FAST_PWM_INVERTING : {
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2824:	af e4       	ldi	r26, 0x4F	; 79
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	ef e4       	ldi	r30, 0x4F	; 79
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	80 64       	ori	r24, 0x40	; 64
    2830:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2832:	af e4       	ldi	r26, 0x4F	; 79
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	ef e4       	ldi	r30, 0x4F	; 79
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	80 61       	ori	r24, 0x10	; 16
    283e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2840:	af e4       	ldi	r26, 0x4F	; 79
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	ef e4       	ldi	r30, 0x4F	; 79
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	80 68       	ori	r24, 0x80	; 128
    284c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    284e:	af e4       	ldi	r26, 0x4F	; 79
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	ef e4       	ldi	r30, 0x4F	; 79
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	80 62       	ori	r24, 0x20	; 32
    285a:	8c 93       	st	X, r24
	}

	default: break;
	}

	switch(Copy_Timer1TopMode) {
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	28 2f       	mov	r18, r24
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	3f 83       	std	Y+7, r19	; 0x07
    2864:	2e 83       	std	Y+6, r18	; 0x06
    2866:	8e 81       	ldd	r24, Y+6	; 0x06
    2868:	9f 81       	ldd	r25, Y+7	; 0x07
    286a:	81 30       	cpi	r24, 0x01	; 1
    286c:	91 05       	cpc	r25, r1
    286e:	b9 f0       	breq	.+46     	; 0x289e <MTIMER1_voidInit+0x210>
    2870:	2e 81       	ldd	r18, Y+6	; 0x06
    2872:	3f 81       	ldd	r19, Y+7	; 0x07
    2874:	22 30       	cpi	r18, 0x02	; 2
    2876:	31 05       	cpc	r19, r1
    2878:	2c f4       	brge	.+10     	; 0x2884 <MTIMER1_voidInit+0x1f6>
    287a:	8e 81       	ldd	r24, Y+6	; 0x06
    287c:	9f 81       	ldd	r25, Y+7	; 0x07
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	59 f1       	breq	.+86     	; 0x28d8 <MTIMER1_voidInit+0x24a>
    2882:	80 c0       	rjmp	.+256    	; 0x2984 <MTIMER1_voidInit+0x2f6>
    2884:	2e 81       	ldd	r18, Y+6	; 0x06
    2886:	3f 81       	ldd	r19, Y+7	; 0x07
    2888:	22 30       	cpi	r18, 0x02	; 2
    288a:	31 05       	cpc	r19, r1
    288c:	09 f4       	brne	.+2      	; 0x2890 <MTIMER1_voidInit+0x202>
    288e:	41 c0       	rjmp	.+130    	; 0x2912 <MTIMER1_voidInit+0x284>
    2890:	8e 81       	ldd	r24, Y+6	; 0x06
    2892:	9f 81       	ldd	r25, Y+7	; 0x07
    2894:	83 30       	cpi	r24, 0x03	; 3
    2896:	91 05       	cpc	r25, r1
    2898:	09 f4       	brne	.+2      	; 0x289c <MTIMER1_voidInit+0x20e>
    289a:	58 c0       	rjmp	.+176    	; 0x294c <MTIMER1_voidInit+0x2be>
    289c:	73 c0       	rjmp	.+230    	; 0x2984 <MTIMER1_voidInit+0x2f6>
	case TOP_CTC_ICR1 : {
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    289e:	af e4       	ldi	r26, 0x4F	; 79
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	ef e4       	ldi	r30, 0x4F	; 79
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	8e 7f       	andi	r24, 0xFE	; 254
    28aa:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    28ac:	af e4       	ldi	r26, 0x4F	; 79
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	ef e4       	ldi	r30, 0x4F	; 79
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	8d 7f       	andi	r24, 0xFD	; 253
    28b8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    28ba:	ae e4       	ldi	r26, 0x4E	; 78
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	ee e4       	ldi	r30, 0x4E	; 78
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	88 60       	ori	r24, 0x08	; 8
    28c6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    28c8:	ae e4       	ldi	r26, 0x4E	; 78
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	ee e4       	ldi	r30, 0x4E	; 78
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	80 81       	ld	r24, Z
    28d2:	80 61       	ori	r24, 0x10	; 16
    28d4:	8c 93       	st	X, r24
    28d6:	56 c0       	rjmp	.+172    	; 0x2984 <MTIMER1_voidInit+0x2f6>
		break;
	}
	case TOP_CTC_OCR1A : {
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    28d8:	af e4       	ldi	r26, 0x4F	; 79
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	ef e4       	ldi	r30, 0x4F	; 79
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	8e 7f       	andi	r24, 0xFE	; 254
    28e4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    28e6:	af e4       	ldi	r26, 0x4F	; 79
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	ef e4       	ldi	r30, 0x4F	; 79
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	8d 7f       	andi	r24, 0xFD	; 253
    28f2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    28f4:	ae e4       	ldi	r26, 0x4E	; 78
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	ee e4       	ldi	r30, 0x4E	; 78
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	88 60       	ori	r24, 0x08	; 8
    2900:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    2902:	ae e4       	ldi	r26, 0x4E	; 78
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	ee e4       	ldi	r30, 0x4E	; 78
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	8f 7e       	andi	r24, 0xEF	; 239
    290e:	8c 93       	st	X, r24
    2910:	39 c0       	rjmp	.+114    	; 0x2984 <MTIMER1_voidInit+0x2f6>
		break;
	}
	case TOP_FPWM_ICR1 : {
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2912:	af e4       	ldi	r26, 0x4F	; 79
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	ef e4       	ldi	r30, 0x4F	; 79
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	8e 7f       	andi	r24, 0xFE	; 254
    291e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2920:	af e4       	ldi	r26, 0x4F	; 79
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	ef e4       	ldi	r30, 0x4F	; 79
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	82 60       	ori	r24, 0x02	; 2
    292c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    292e:	ae e4       	ldi	r26, 0x4E	; 78
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	ee e4       	ldi	r30, 0x4E	; 78
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	88 60       	ori	r24, 0x08	; 8
    293a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    293c:	ae e4       	ldi	r26, 0x4E	; 78
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	ee e4       	ldi	r30, 0x4E	; 78
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	80 61       	ori	r24, 0x10	; 16
    2948:	8c 93       	st	X, r24
    294a:	1c c0       	rjmp	.+56     	; 0x2984 <MTIMER1_voidInit+0x2f6>
		break;
	}
	case TOP_FPWM_OCR1A : {
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    294c:	af e4       	ldi	r26, 0x4F	; 79
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	ef e4       	ldi	r30, 0x4F	; 79
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	81 60       	ori	r24, 0x01	; 1
    2958:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    295a:	af e4       	ldi	r26, 0x4F	; 79
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	ef e4       	ldi	r30, 0x4F	; 79
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	82 60       	ori	r24, 0x02	; 2
    2966:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2968:	ae e4       	ldi	r26, 0x4E	; 78
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	ee e4       	ldi	r30, 0x4E	; 78
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	88 60       	ori	r24, 0x08	; 8
    2974:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2976:	ae e4       	ldi	r26, 0x4E	; 78
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	ee e4       	ldi	r30, 0x4E	; 78
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	80 61       	ori	r24, 0x10	; 16
    2982:	8c 93       	st	X, r24
	//
	//
	default: break;
	}

	switch (Copy_enuPrescalerValue){
    2984:	8b 81       	ldd	r24, Y+3	; 0x03
    2986:	28 2f       	mov	r18, r24
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	3d 83       	std	Y+5, r19	; 0x05
    298c:	2c 83       	std	Y+4, r18	; 0x04
    298e:	8c 81       	ldd	r24, Y+4	; 0x04
    2990:	9d 81       	ldd	r25, Y+5	; 0x05
    2992:	81 30       	cpi	r24, 0x01	; 1
    2994:	91 05       	cpc	r25, r1
    2996:	01 f1       	breq	.+64     	; 0x29d8 <MTIMER1_voidInit+0x34a>
    2998:	2c 81       	ldd	r18, Y+4	; 0x04
    299a:	3d 81       	ldd	r19, Y+5	; 0x05
    299c:	22 30       	cpi	r18, 0x02	; 2
    299e:	31 05       	cpc	r19, r1
    29a0:	89 f1       	breq	.+98     	; 0x2a04 <MTIMER1_voidInit+0x376>
    29a2:	8c 81       	ldd	r24, Y+4	; 0x04
    29a4:	9d 81       	ldd	r25, Y+5	; 0x05
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	09 f0       	breq	.+2      	; 0x29ac <MTIMER1_voidInit+0x31e>
    29aa:	41 c0       	rjmp	.+130    	; 0x2a2e <MTIMER1_voidInit+0x3a0>
	case DIV_8: {
			CLR_BIT(TCCR1B,TCCR1B_CS10);
    29ac:	ae e4       	ldi	r26, 0x4E	; 78
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	ee e4       	ldi	r30, 0x4E	; 78
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	8e 7f       	andi	r24, 0xFE	; 254
    29b8:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_CS11);
    29ba:	ae e4       	ldi	r26, 0x4E	; 78
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	ee e4       	ldi	r30, 0x4E	; 78
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	82 60       	ori	r24, 0x02	; 2
    29c6:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_CS12);
    29c8:	ae e4       	ldi	r26, 0x4E	; 78
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	ee e4       	ldi	r30, 0x4E	; 78
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	8b 7f       	andi	r24, 0xFB	; 251
    29d4:	8c 93       	st	X, r24
    29d6:	2b c0       	rjmp	.+86     	; 0x2a2e <MTIMER1_voidInit+0x3a0>
			break;
		}
	case DIV_64: {
			SET_BIT(TCCR1B,TCCR1B_CS10);
    29d8:	ae e4       	ldi	r26, 0x4E	; 78
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	ee e4       	ldi	r30, 0x4E	; 78
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	81 60       	ori	r24, 0x01	; 1
    29e4:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_CS11);
    29e6:	ae e4       	ldi	r26, 0x4E	; 78
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	ee e4       	ldi	r30, 0x4E	; 78
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	82 60       	ori	r24, 0x02	; 2
    29f2:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_CS12);
    29f4:	ae e4       	ldi	r26, 0x4E	; 78
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	ee e4       	ldi	r30, 0x4E	; 78
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	8b 7f       	andi	r24, 0xFB	; 251
    2a00:	8c 93       	st	X, r24
    2a02:	15 c0       	rjmp	.+42     	; 0x2a2e <MTIMER1_voidInit+0x3a0>
			break;
		}
	case DIV_256: {
			CLR_BIT(TCCR1B,TCCR1B_CS10);
    2a04:	ae e4       	ldi	r26, 0x4E	; 78
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	ee e4       	ldi	r30, 0x4E	; 78
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	8e 7f       	andi	r24, 0xFE	; 254
    2a10:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B,TCCR1B_CS11);
    2a12:	ae e4       	ldi	r26, 0x4E	; 78
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	ee e4       	ldi	r30, 0x4E	; 78
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	8d 7f       	andi	r24, 0xFD	; 253
    2a1e:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,TCCR1B_CS12);
    2a20:	ae e4       	ldi	r26, 0x4E	; 78
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	ee e4       	ldi	r30, 0x4E	; 78
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	84 60       	ori	r24, 0x04	; 4
    2a2c:	8c 93       	st	X, r24
	//
	//
	default: break;
	}

}
    2a2e:	29 96       	adiw	r28, 0x09	; 9
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <MTIMER1_voidSetTopValue>:
void MTIMER1_voidSetTopValue(u16 Copy_u16TopValue , Top_t Copy_Timer1TopMode){
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <MTIMER1_voidSetTopValue+0x6>
    2a46:	00 d0       	rcall	.+0      	; 0x2a48 <MTIMER1_voidSetTopValue+0x8>
    2a48:	0f 92       	push	r0
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	9a 83       	std	Y+2, r25	; 0x02
    2a50:	89 83       	std	Y+1, r24	; 0x01
    2a52:	6b 83       	std	Y+3, r22	; 0x03
	switch (Copy_Timer1TopMode) {
    2a54:	8b 81       	ldd	r24, Y+3	; 0x03
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	3d 83       	std	Y+5, r19	; 0x05
    2a5c:	2c 83       	std	Y+4, r18	; 0x04
    2a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a60:	9d 81       	ldd	r25, Y+5	; 0x05
    2a62:	82 30       	cpi	r24, 0x02	; 2
    2a64:	91 05       	cpc	r25, r1
    2a66:	31 f0       	breq	.+12     	; 0x2a74 <MTIMER1_voidSetTopValue+0x34>
    2a68:	2c 81       	ldd	r18, Y+4	; 0x04
    2a6a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a6c:	23 30       	cpi	r18, 0x03	; 3
    2a6e:	31 05       	cpc	r19, r1
    2a70:	41 f0       	breq	.+16     	; 0x2a82 <MTIMER1_voidSetTopValue+0x42>
    2a72:	0d c0       	rjmp	.+26     	; 0x2a8e <MTIMER1_voidSetTopValue+0x4e>
		case TOP_FPWM_ICR1 : ICR1 = Copy_u16TopValue; break;
    2a74:	e6 e4       	ldi	r30, 0x46	; 70
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	80 83       	st	Z, r24
    2a80:	06 c0       	rjmp	.+12     	; 0x2a8e <MTIMER1_voidSetTopValue+0x4e>
		case TOP_FPWM_OCR1A: OCR1A = Copy_u16TopValue; break;
    2a82:	ea e4       	ldi	r30, 0x4A	; 74
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8a:	91 83       	std	Z+1, r25	; 0x01
    2a8c:	80 83       	st	Z, r24
		default: break;
	}

}
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <MTIMER1_voidSetDutyCycle>:
void MTIMER1_voidSetDutyCycle(u16 Copy_u16DutyCycleValue){
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <MTIMER1_voidSetDutyCycle+0x6>
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	9a 83       	std	Y+2, r25	; 0x02
    2aaa:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16DutyCycleValue;
    2aac:	ea e4       	ldi	r30, 0x4A	; 74
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	80 83       	st	Z, r24
}
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <main>:
#include "HServo_interface.h"
#include "HLDR_interface.h"

s16 s16MappingLuxToAngle(s16 Copy_s16MaxAngle , s16 Copy_s16MiniAngle , u16 Copy_u16MaxLux 		, u16 Copy_u16MiniLux 	   , u16 Copy_u16Lux);

int main (){
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	00 d0       	rcall	.+0      	; 0x2acc <main+0xa>
    2acc:	00 d0       	rcall	.+0      	; 0x2ace <main+0xc>
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62

	u16 LDRLux;
	s16 servoAngle;
	HLCD_voidInit();
    2ad2:	0e 94 94 08 	call	0x1128	; 0x1128 <HLCD_voidInit>
	Port_voidInit();
    2ad6:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <Port_voidInit>
	HLCD_voidInit();
    2ada:	0e 94 94 08 	call	0x1128	; 0x1128 <HLCD_voidInit>

	MADC_ErrorStateInit(ADC_VREF_VCC,ADC_PRESCALER_DIV32,ADC_RIGHT_ADJUSTMENT);
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	65 e0       	ldi	r22, 0x05	; 5
    2ae2:	40 e0       	ldi	r20, 0x00	; 0
    2ae4:	0e 94 03 0c 	call	0x1806	; 0x1806 <MADC_ErrorStateInit>

	MTIMER1_voidInit(FAST_PWM_NON_INVERTING, TOP_FPWM_ICR1,DIV_8);
    2ae8:	84 e0       	ldi	r24, 0x04	; 4
    2aea:	62 e0       	ldi	r22, 0x02	; 2
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	0e 94 47 13 	call	0x268e	; 0x268e <MTIMER1_voidInit>
	MTIMER1_voidSetTopValue(20000,TOP_FPWM_ICR1);
    2af2:	80 e2       	ldi	r24, 0x20	; 32
    2af4:	9e e4       	ldi	r25, 0x4E	; 78
    2af6:	62 e0       	ldi	r22, 0x02	; 2
    2af8:	0e 94 20 15 	call	0x2a40	; 0x2a40 <MTIMER1_voidSetTopValue>


	while(1){
		/* getting read from LDR "ADC3"*/
		LDRLux  	= HLDR_u16GetRead();
    2afc:	0e 94 df 0a 	call	0x15be	; 0x15be <HLDR_u16GetRead>
    2b00:	9c 83       	std	Y+4, r25	; 0x04
    2b02:	8b 83       	std	Y+3, r24	; 0x03

		/* Mapping ADC reading to get brightness ammount "lux" */
		/* Mapping ADC reading to get Servo Angle */

		servoAngle = s16MappingLuxToAngle(90,-90,10000,0,LDRLux);
    2b04:	eb 81       	ldd	r30, Y+3	; 0x03
    2b06:	fc 81       	ldd	r31, Y+4	; 0x04
    2b08:	8a e5       	ldi	r24, 0x5A	; 90
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	66 ea       	ldi	r22, 0xA6	; 166
    2b0e:	7f ef       	ldi	r23, 0xFF	; 255
    2b10:	40 e1       	ldi	r20, 0x10	; 16
    2b12:	57 e2       	ldi	r21, 0x27	; 39
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	8f 01       	movw	r16, r30
    2b1a:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <s16MappingLuxToAngle>
    2b1e:	9a 83       	std	Y+2, r25	; 0x02
    2b20:	89 83       	std	Y+1, r24	; 0x01
		/* Sending Angle to servo */
		HServo_voidSetAngleSimulation(servoAngle);
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	9a 81       	ldd	r25, Y+2	; 0x02
    2b26:	aa 27       	eor	r26, r26
    2b28:	97 fd       	sbrc	r25, 7
    2b2a:	a0 95       	com	r26
    2b2c:	ba 2f       	mov	r27, r26
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0e 94 84 0b 	call	0x1708	; 0x1708 <HServo_voidSetAngleSimulation>

		/* Sending LUX to LCD */
		HLCD_voidSendString("    LUX:");
    2b36:	80 e6       	ldi	r24, 0x60	; 96
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <HLCD_voidSendString>
		HLCD_voidSendInt(10000-	LDRLux);
    2b3e:	20 e1       	ldi	r18, 0x10	; 16
    2b40:	37 e2       	ldi	r19, 0x27	; 39
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	9c 81       	ldd	r25, Y+4	; 0x04
    2b46:	a9 01       	movw	r20, r18
    2b48:	48 1b       	sub	r20, r24
    2b4a:	59 0b       	sbc	r21, r25
    2b4c:	ca 01       	movw	r24, r20
    2b4e:	cc 01       	movw	r24, r24
    2b50:	a0 e0       	ldi	r26, 0x00	; 0
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 89 0a 	call	0x1512	; 0x1512 <HLCD_voidSendInt>
		HLCD_voidSendString(" ");
    2b5c:	89 e6       	ldi	r24, 0x69	; 105
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <HLCD_voidSendString>
		/* Sending Servo angle to LCD */
		HLCD_voidSetCursorPosition(2,0);
    2b64:	82 e0       	ldi	r24, 0x02	; 2
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	0e 94 c2 0a 	call	0x1584	; 0x1584 <HLCD_voidSetCursorPosition>
		HLCD_voidSendString("Servo Angel:");
    2b6c:	8b e6       	ldi	r24, 0x6B	; 107
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <HLCD_voidSendString>
		HLCD_voidSendInt(servoAngle);
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	9a 81       	ldd	r25, Y+2	; 0x02
    2b78:	aa 27       	eor	r26, r26
    2b7a:	97 fd       	sbrc	r25, 7
    2b7c:	a0 95       	com	r26
    2b7e:	ba 2f       	mov	r27, r26
    2b80:	bc 01       	movw	r22, r24
    2b82:	cd 01       	movw	r24, r26
    2b84:	0e 94 89 0a 	call	0x1512	; 0x1512 <HLCD_voidSendInt>
		HLCD_voidSendString("  ");
    2b88:	88 e7       	ldi	r24, 0x78	; 120
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <HLCD_voidSendString>
		HLCD_voidReturnHome();
    2b90:	0e 94 b8 0a 	call	0x1570	; 0x1570 <HLCD_voidReturnHome>
    2b94:	b3 cf       	rjmp	.-154    	; 0x2afc <main+0x3a>

00002b96 <s16MappingLuxToAngle>:
	}
}

s16 s16MappingLuxToAngle(s16 Copy_s16MaxAngle , s16 Copy_s16MiniAngle , u16 Copy_u16MaxLux 		, u16 Copy_u16MiniLux 	   , u16 Copy_u16Lux)
{
    2b96:	ef 92       	push	r14
    2b98:	ff 92       	push	r15
    2b9a:	0f 93       	push	r16
    2b9c:	1f 93       	push	r17
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	2c 97       	sbiw	r28, 0x0c	; 12
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	9c 83       	std	Y+4, r25	; 0x04
    2bb4:	8b 83       	std	Y+3, r24	; 0x03
    2bb6:	7e 83       	std	Y+6, r23	; 0x06
    2bb8:	6d 83       	std	Y+5, r22	; 0x05
    2bba:	58 87       	std	Y+8, r21	; 0x08
    2bbc:	4f 83       	std	Y+7, r20	; 0x07
    2bbe:	3a 87       	std	Y+10, r19	; 0x0a
    2bc0:	29 87       	std	Y+9, r18	; 0x09
    2bc2:	1c 87       	std	Y+12, r17	; 0x0c
    2bc4:	0b 87       	std	Y+11, r16	; 0x0b
	s16 X;
	X = (s16)( ( (f64) (  (f64) (Copy_s16MaxAngle - Copy_s16MiniAngle) * (( Copy_u16Lux - Copy_u16MiniLux ) ) / (f64)( Copy_u16MaxLux - Copy_u16MiniLux )) + Copy_s16MiniAngle) + 1);
    2bc6:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc8:	3c 81       	ldd	r19, Y+4	; 0x04
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bce:	a9 01       	movw	r20, r18
    2bd0:	48 1b       	sub	r20, r24
    2bd2:	59 0b       	sbc	r21, r25
    2bd4:	ca 01       	movw	r24, r20
    2bd6:	aa 27       	eor	r26, r26
    2bd8:	97 fd       	sbrc	r25, 7
    2bda:	a0 95       	com	r26
    2bdc:	ba 2f       	mov	r27, r26
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatsisf>
    2be6:	7b 01       	movw	r14, r22
    2be8:	8c 01       	movw	r16, r24
    2bea:	2b 85       	ldd	r18, Y+11	; 0x0b
    2bec:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bee:	89 85       	ldd	r24, Y+9	; 0x09
    2bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf2:	a9 01       	movw	r20, r18
    2bf4:	48 1b       	sub	r20, r24
    2bf6:	59 0b       	sbc	r21, r25
    2bf8:	ca 01       	movw	r24, r20
    2bfa:	cc 01       	movw	r24, r24
    2bfc:	a0 e0       	ldi	r26, 0x00	; 0
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__floatunsisf>
    2c08:	9b 01       	movw	r18, r22
    2c0a:	ac 01       	movw	r20, r24
    2c0c:	c8 01       	movw	r24, r16
    2c0e:	b7 01       	movw	r22, r14
    2c10:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	7c 01       	movw	r14, r24
    2c1a:	8d 01       	movw	r16, r26
    2c1c:	2f 81       	ldd	r18, Y+7	; 0x07
    2c1e:	38 85       	ldd	r19, Y+8	; 0x08
    2c20:	89 85       	ldd	r24, Y+9	; 0x09
    2c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c24:	a9 01       	movw	r20, r18
    2c26:	48 1b       	sub	r20, r24
    2c28:	59 0b       	sbc	r21, r25
    2c2a:	ca 01       	movw	r24, r20
    2c2c:	cc 01       	movw	r24, r24
    2c2e:	a0 e0       	ldi	r26, 0x00	; 0
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__floatunsisf>
    2c3a:	9b 01       	movw	r18, r22
    2c3c:	ac 01       	movw	r20, r24
    2c3e:	c8 01       	movw	r24, r16
    2c40:	b7 01       	movw	r22, r14
    2c42:	0e 94 b9 03 	call	0x772	; 0x772 <__divsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	7c 01       	movw	r14, r24
    2c4c:	8d 01       	movw	r16, r26
    2c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c50:	9e 81       	ldd	r25, Y+6	; 0x06
    2c52:	aa 27       	eor	r26, r26
    2c54:	97 fd       	sbrc	r25, 7
    2c56:	a0 95       	com	r26
    2c58:	ba 2f       	mov	r27, r26
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__floatsisf>
    2c62:	9b 01       	movw	r18, r22
    2c64:	ac 01       	movw	r20, r24
    2c66:	c8 01       	movw	r24, r16
    2c68:	b7 01       	movw	r22, r14
    2c6a:	0e 94 92 02 	call	0x524	; 0x524 <__addsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	bc 01       	movw	r22, r24
    2c74:	cd 01       	movw	r24, r26
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e8       	ldi	r20, 0x80	; 128
    2c7c:	5f e3       	ldi	r21, 0x3F	; 63
    2c7e:	0e 94 92 02 	call	0x524	; 0x524 <__addsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	bc 01       	movw	r22, r24
    2c88:	cd 01       	movw	r24, r26
    2c8a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fixsfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9a 83       	std	Y+2, r25	; 0x02
    2c94:	89 83       	std	Y+1, r24	; 0x01
	return X ;
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c9a:	2c 96       	adiw	r28, 0x0c	; 12
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	cf 91       	pop	r28
    2ca8:	df 91       	pop	r29
    2caa:	1f 91       	pop	r17
    2cac:	0f 91       	pop	r16
    2cae:	ff 90       	pop	r15
    2cb0:	ef 90       	pop	r14
    2cb2:	08 95       	ret

00002cb4 <__mulsi3>:
    2cb4:	62 9f       	mul	r22, r18
    2cb6:	d0 01       	movw	r26, r0
    2cb8:	73 9f       	mul	r23, r19
    2cba:	f0 01       	movw	r30, r0
    2cbc:	82 9f       	mul	r24, r18
    2cbe:	e0 0d       	add	r30, r0
    2cc0:	f1 1d       	adc	r31, r1
    2cc2:	64 9f       	mul	r22, r20
    2cc4:	e0 0d       	add	r30, r0
    2cc6:	f1 1d       	adc	r31, r1
    2cc8:	92 9f       	mul	r25, r18
    2cca:	f0 0d       	add	r31, r0
    2ccc:	83 9f       	mul	r24, r19
    2cce:	f0 0d       	add	r31, r0
    2cd0:	74 9f       	mul	r23, r20
    2cd2:	f0 0d       	add	r31, r0
    2cd4:	65 9f       	mul	r22, r21
    2cd6:	f0 0d       	add	r31, r0
    2cd8:	99 27       	eor	r25, r25
    2cda:	72 9f       	mul	r23, r18
    2cdc:	b0 0d       	add	r27, r0
    2cde:	e1 1d       	adc	r30, r1
    2ce0:	f9 1f       	adc	r31, r25
    2ce2:	63 9f       	mul	r22, r19
    2ce4:	b0 0d       	add	r27, r0
    2ce6:	e1 1d       	adc	r30, r1
    2ce8:	f9 1f       	adc	r31, r25
    2cea:	bd 01       	movw	r22, r26
    2cec:	cf 01       	movw	r24, r30
    2cee:	11 24       	eor	r1, r1
    2cf0:	08 95       	ret

00002cf2 <__prologue_saves__>:
    2cf2:	2f 92       	push	r2
    2cf4:	3f 92       	push	r3
    2cf6:	4f 92       	push	r4
    2cf8:	5f 92       	push	r5
    2cfa:	6f 92       	push	r6
    2cfc:	7f 92       	push	r7
    2cfe:	8f 92       	push	r8
    2d00:	9f 92       	push	r9
    2d02:	af 92       	push	r10
    2d04:	bf 92       	push	r11
    2d06:	cf 92       	push	r12
    2d08:	df 92       	push	r13
    2d0a:	ef 92       	push	r14
    2d0c:	ff 92       	push	r15
    2d0e:	0f 93       	push	r16
    2d10:	1f 93       	push	r17
    2d12:	cf 93       	push	r28
    2d14:	df 93       	push	r29
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	ca 1b       	sub	r28, r26
    2d1c:	db 0b       	sbc	r29, r27
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	09 94       	ijmp

00002d2a <__epilogue_restores__>:
    2d2a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d2c:	39 88       	ldd	r3, Y+17	; 0x11
    2d2e:	48 88       	ldd	r4, Y+16	; 0x10
    2d30:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d32:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d34:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d36:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d38:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d3a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d3c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d3e:	c8 84       	ldd	r12, Y+8	; 0x08
    2d40:	df 80       	ldd	r13, Y+7	; 0x07
    2d42:	ee 80       	ldd	r14, Y+6	; 0x06
    2d44:	fd 80       	ldd	r15, Y+5	; 0x05
    2d46:	0c 81       	ldd	r16, Y+4	; 0x04
    2d48:	1b 81       	ldd	r17, Y+3	; 0x03
    2d4a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d4c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d4e:	ce 0f       	add	r28, r30
    2d50:	d1 1d       	adc	r29, r1
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	ed 01       	movw	r28, r26
    2d5e:	08 95       	ret

00002d60 <itoa>:
    2d60:	fb 01       	movw	r30, r22
    2d62:	9f 01       	movw	r18, r30
    2d64:	e8 94       	clt
    2d66:	42 30       	cpi	r20, 0x02	; 2
    2d68:	c4 f0       	brlt	.+48     	; 0x2d9a <itoa+0x3a>
    2d6a:	45 32       	cpi	r20, 0x25	; 37
    2d6c:	b4 f4       	brge	.+44     	; 0x2d9a <itoa+0x3a>
    2d6e:	4a 30       	cpi	r20, 0x0A	; 10
    2d70:	29 f4       	brne	.+10     	; 0x2d7c <itoa+0x1c>
    2d72:	97 fb       	bst	r25, 7
    2d74:	1e f4       	brtc	.+6      	; 0x2d7c <itoa+0x1c>
    2d76:	90 95       	com	r25
    2d78:	81 95       	neg	r24
    2d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7c:	64 2f       	mov	r22, r20
    2d7e:	77 27       	eor	r23, r23
    2d80:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__udivmodhi4>
    2d84:	80 5d       	subi	r24, 0xD0	; 208
    2d86:	8a 33       	cpi	r24, 0x3A	; 58
    2d88:	0c f0       	brlt	.+2      	; 0x2d8c <itoa+0x2c>
    2d8a:	89 5d       	subi	r24, 0xD9	; 217
    2d8c:	81 93       	st	Z+, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	a1 f7       	brne	.-24     	; 0x2d7c <itoa+0x1c>
    2d94:	16 f4       	brtc	.+4      	; 0x2d9a <itoa+0x3a>
    2d96:	5d e2       	ldi	r21, 0x2D	; 45
    2d98:	51 93       	st	Z+, r21
    2d9a:	10 82       	st	Z, r1
    2d9c:	c9 01       	movw	r24, r18
    2d9e:	0c 94 d1 16 	jmp	0x2da2	; 0x2da2 <strrev>

00002da2 <strrev>:
    2da2:	dc 01       	movw	r26, r24
    2da4:	fc 01       	movw	r30, r24
    2da6:	67 2f       	mov	r22, r23
    2da8:	71 91       	ld	r23, Z+
    2daa:	77 23       	and	r23, r23
    2dac:	e1 f7       	brne	.-8      	; 0x2da6 <strrev+0x4>
    2dae:	32 97       	sbiw	r30, 0x02	; 2
    2db0:	04 c0       	rjmp	.+8      	; 0x2dba <strrev+0x18>
    2db2:	7c 91       	ld	r23, X
    2db4:	6d 93       	st	X+, r22
    2db6:	70 83       	st	Z, r23
    2db8:	62 91       	ld	r22, -Z
    2dba:	ae 17       	cp	r26, r30
    2dbc:	bf 07       	cpc	r27, r31
    2dbe:	c8 f3       	brcs	.-14     	; 0x2db2 <strrev+0x10>
    2dc0:	08 95       	ret

00002dc2 <__udivmodhi4>:
    2dc2:	aa 1b       	sub	r26, r26
    2dc4:	bb 1b       	sub	r27, r27
    2dc6:	51 e1       	ldi	r21, 0x11	; 17
    2dc8:	07 c0       	rjmp	.+14     	; 0x2dd8 <__udivmodhi4_ep>

00002dca <__udivmodhi4_loop>:
    2dca:	aa 1f       	adc	r26, r26
    2dcc:	bb 1f       	adc	r27, r27
    2dce:	a6 17       	cp	r26, r22
    2dd0:	b7 07       	cpc	r27, r23
    2dd2:	10 f0       	brcs	.+4      	; 0x2dd8 <__udivmodhi4_ep>
    2dd4:	a6 1b       	sub	r26, r22
    2dd6:	b7 0b       	sbc	r27, r23

00002dd8 <__udivmodhi4_ep>:
    2dd8:	88 1f       	adc	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	5a 95       	dec	r21
    2dde:	a9 f7       	brne	.-22     	; 0x2dca <__udivmodhi4_loop>
    2de0:	80 95       	com	r24
    2de2:	90 95       	com	r25
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	08 95       	ret

00002dea <_exit>:
    2dea:	f8 94       	cli

00002dec <__stop_program>:
    2dec:	ff cf       	rjmp	.-2      	; 0x2dec <__stop_program>
